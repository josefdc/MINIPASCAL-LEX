
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftORXORleftANDleftSHLSHRnonassocEQUALNEQUALLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEDIVIDE_INTMODULOleftLPARENRPARENrightNOTABSOLUTE AND ARRAY ASM ASSIGN BEGIN BOOLEAN CASE COLON COMMA CONST CONSTRUCTOR DESTRUCTOR DIVIDE DIVIDE_INT DO DOT DOTDOT DOWNTO ELSE END EQUAL EXTERNAL FILE FOR FORWARD FUNCTION GE GOTO GT ID IF IMPLEMENTATION IN INLINE INTEGER INTEGER_CONST INTERFACE INTERRUPT LABEL LBRACKET LE LPAREN LT MINUS MODULO NEQUAL NIL NOT OBJECT OF OFF OR PACKED PLUS PRIVATE PROCEDURE PROGRAM RBRACKET REAL REAL_CONST RECORD REPEAT RPAREN SEMICOLON SET SHL SHR STRING STRING_LITERAL THEN TIMES TO TYPE UNIT UNTIL USES VAR VIRTUAL WHILE WITH XORprogram : PROGRAM ID SEMICOLON uses_clause_opt block DOTuses_clause_opt : uses_clause\n                       | emptyunit_list : unit_list COMMA ID\n                 | IDuses_clause : USES unit_list SEMICOLONblock : declarations compound_statementdeclarations : declaration_list\n                    | emptydeclaration_list : declaration_list declaration\n                        | declarationdeclaration : var_declaration\n                   | const_declaration\n                   | type_declaration\n                   | procedure_declaration\n                   | function_declarationvar_declaration : VAR var_declaration_listvar_declaration_list : var_declaration_list var_decl\n                | var_declvar_decl : id_list COLON type SEMICOLONid_list : id_list COMMA ID\n               | IDconst_declaration : CONST const_listconst_list : const_list const_definition SEMICOLON\n                  | const_definition SEMICOLONconst_definition : ID EQUAL constantprocedure_declaration : PROCEDURE ID  formal_parameter_list_opt SEMICOLON block SEMICOLONfunction_declaration : FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLONformal_parameter_list_opt : LPAREN formal_parameter_list RPAREN\n                             | emptyformal_parameter_list : formal_parameter_list SEMICOLON formal_parameter\n                             | formal_parameterformal_parameter : id_list COLON typetype_declaration : TYPE type_listtype_list : type_list type_definition SEMICOLON\n                 | type_definition SEMICOLONtype_definition : ID EQUAL typetype : simple_type\n            | array_type\n            | record_typesimple_type : subrange_type\n                   | type_identifiersubrange_type : constant DOTDOT constantarray_type : ARRAY LBRACKET index_type RBRACKET OF typeindex_type : simple_typerecord_type : RECORD record_fields ENDrecord_fields : field_listfield_list : field_list field_declaration SEMICOLON\n                  | field_declaration SEMICOLONfield_declaration : id_list COLON typetype_identifier : ID\n                       | predefined_typepredefined_type : INTEGER\n                       | REAL\n                       | BOOLEAN\n                       | STRINGcompound_statement : BEGIN statement_list ENDstatement_list : statement\n                      | statement_list SEMICOLON statementstatement : simple_statement\n                 | structured_statementsimple_statement : assignment_statement\n                        | procedure_call_statement\n                        | emptyassignment_statement : variable ASSIGN expressionvariable : ID\n                | variable DOT ID\n                | variable LBRACKET expression_list RBRACKETexpression_list : expression\n                       | expression_list COMMA expressionprocedure_call_statement : procedure_callprocedure_call : ID LPAREN args_optional RPARENargs : args COMMA expression\n            | expressionstructured_statement : compound_statement\n                            | if_statement\n                            | while_statement\n                            | repeat_statement\n                            | for_statement\n                            | case_statement\n                            | record_assignmentif_statement : IF expression THEN statement else_partelse_part : ELSE statement\n                 | emptywhile_statement : WHILE expression DO statementrepeat_statement : REPEAT statement_list UNTIL expressionfor_statement : FOR ID ASSIGN expression TO expression DO statement\n                     | FOR ID ASSIGN expression DOWNTO expression DO statementcase_statement : CASE expression OF case_element_list else_clause_optional ENDcase_element_list : case_element_list semicolon_optional case_element\n                         | case_elementcase_element : case_label_list COLON statementcase_label_list : case_label_list COMMA case_label\n                       | case_labelcase_label : constantelse_clause_optional : semicolon_optional ELSE statement semicolon_optional\n                            | emptysemicolon_optional : SEMICOLON\n                          | emptyrecord_assignment : ID DOT ID ASSIGN expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression DIVIDE_INT expression\n                  | expression MODULO expression\n                  | expression SHL expression\n                  | expression SHR expression\n                  | expression EQUAL expression\n                  | expression NEQUAL expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression XOR expression\n                  | NOT expression %prec NOT\n                  | LPAREN expression RPAREN\n                  | function_call\n                  | variable\n                  | INTEGER_CONST\n                  | REAL_CONST\n                  | STRING_LITERALfunction_call : ID LPAREN args_optional RPARENargs_optional : args\n                     | emptyconstant : UNSIGNED_NUMBER\n                | sign UNSIGNED_NUMBER\n                | STRING_LITERAL\n                | constant_identifierUNSIGNED_NUMBER : INTEGER_CONST\n                       | REAL_CONSTsign : PLUS\n            | MINUSconstant_identifier : IDempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$endone,None,None,None,None,None,148,148,148,-119,148,148,148,-125,148,148,148,148,]),'LPAREN':([40,41,60,61,64,65,82,84,86,87,93,98,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,161,162,183,207,209,231,232,],[76,76,87,87,98,87,87,87,87,87,159,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'UNTIL':([45,46,47,48,49,50,51,52,53,54,55,56,57,59,62,80,81,88,89,90,91,92,93,95,134,135,136,139,157,160,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,205,208,227,228,229,230,233,245,248,255,256,259,260,],[-58,-60,-61,-62,-63,-64,-75,-76,-77,-78,-79,-80,-81,-71,-137,-57,-137,-120,-121,-122,-123,-124,-66,161,-59,-65,-67,-137,-118,-137,-68,-137,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-119,-85,-86,-72,-82,-137,-84,-125,-100,-83,-89,-137,-137,-87,-88,]),'ELSE':([46,47,48,49,50,51,52,53,54,55,56,57,59,80,88,89,90,91,92,93,135,136,139,157,160,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,205,208,210,211,227,228,229,230,233,236,237,238,239,245,248,249,251,255,256,259,260,],[-60,-61,-62,-63,-64,-75,-76,-77,-78,-79,-80,-81,-71,-57,-120,-121,-122,-123,-124,-66,-65,-67,-137,-118,-137,-68,228,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-119,-85,-86,-72,-137,-91,-82,-137,-84,-125,-100,250,-99,-98,-137,-83,-89,-90,-92,-137,-137,-87,-88,]),'STRING_LITERAL':([46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,65,67,71,74,80,82,84,86,87,88,89,90,91,92,93,98,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,162,168,170,175,180,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,205,207,208,209,210,211,220,227,228,229,230,231,232,233,236,237,238,239,240,245,248,249,251,253,255,256,259,260,],[-60,-61,-62,-63,-64,-75,-76,-77,-78,-79,-80,-81,-71,92,92,92,113,113,113,-57,92,92,92,92,-120,-121,-122,-123,-124,-66,92,113,-65,-67,-137,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-118,92,-137,92,92,113,113,113,113,-68,92,-137,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-119,-85,-86,92,-72,92,-137,-91,113,-82,-137,-84,-125,92,92,-100,113,-99,-98,-137,113,-83,-89,-90,-92,113,-137,-137,-87,-88,]),'INTEGER_CONST':([46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,65,67,71,74,80,82,84,86,87,88,89,90,91,92,93,98,112,121,122,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,162,168,170,175,180,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,205,207,208,209,210,211,220,227,228,229,230,231,232,233,236,237,238,239,240,245,248,249,251,253,255,256,259,260,],[-60,-61,-62,-63,-64,-75,-76,-77,-78,-79,-80,-81,-71,90,90,90,119,119,119,-57,90,90,90,90,-120,-121,-122,-123,-124,-66,90,119,-134,-135,119,-65,-67,-137,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-118,90,-137,90,90,119,119,119,119,-68,90,-137,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-119,-85,-86,90,-72,90,-137,-91,119,-82,-137,-84,-125,90,90,-100,119,-99,-98,-137,119,-83,-89,-90,-92,119,-137,-137,-87,-88,]),'REAL_CONST':([46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,65,67,71,74,80,82,84,86,87,88,89,90,91,92,93,98,112,121,122,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,162,168,170,175,180,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,205,207,208,209,210,211,220,227,228,229,230,231,232,233,236,237,238,239,240,245,248,249,251,253,255,256,259,260,],[-60,-61,-62,-63,-64,-75,-76,-77,-78,-79,-80,-81,-71,91,91,91,120,120,120,-57,91,91,91,91,-120,-121,-122,-123,-124,-66,91,120,-134,-135,120,-65,-67,-137,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-118,91,-137,91,91,120,120,120,120,-68,91,-137,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-119,-85,-86,91,-72,91,-137,-91,120,-82,-137,-84,-125,91,91,-100,120,-99,-98,-137,120,-83,-89,-90,-92,120,-137,-137,-87,-88,]),'PLUS':([46,47,48,49,50,51,52,53,54,55,56,57,59,67,71,74,80,85,88,89,90,91,92,93,94,99,133,135,136,138,139,157,158,160,167,168,170,175,180,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,205,206,208,210,211,220,226,227,228,229,230,233,234,236,237,238,239,240,245,246,247,248,249,251,253,255,256,259,260,],[-60,-61,-62,-63,-64,-75,-76,-77,-78,-79,-80,-81,-71,121,121,121,-57,140,-120,-121,-122,-123,-124,-66,140,140,121,140,-67,140,-137,-118,140,-137,140,121,121,121,121,-68,-137,-101,-102,-103,-104,-105,-106,140,140,140,140,140,140,140,140,140,140,140,-119,-85,140,140,-72,-137,-91,121,140,-82,-137,-84,-125,140,140,121,-99,-98,-137,121,-83,140,140,-89,-90,-92,121,-137,-137,-87,-88,]),'MINUS':([46,47,48,49,50,51,52,53,54,55,56,57,59,67,71,74,80,85,88,89,90,91,92,93,94,99,133,135,136,138,139,157,158,160,167,168,170,175,180,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,205,206,208,210,211,220,226,227,228,229,230,233,234,236,237,238,239,240,245,246,247,248,249,251,253,255,256,259,260,],[-60,-61,-62,-63,-64,-75,-76,-77,-78,-79,-80,-81,-71,122,122,122,-57,141,-120,-121,-122,-123,-124,-66,141,141,122,141,-67,141,-137,-118,141,-137,141,122,122,122,122,-68,-137,-101,-102,-103,-104,-105,-106,141,141,141,141,141,141,141,141,141,141,141,-119,-85,141,141,-72,-137,-91,122,141,-82,-137,-84,-125,141,141,122,-99,-98,-137,122,-83,141,141,-89,-90,-92,122,-137,-137,-87,-88,]),'ASSIGN':([58,64,96,136,163,182,],[82,-66,162,-67,207,-68,]),'LBRACKET':([58,64,89,93,106,136,182,],[84,-66,84,-66,170,-67,-68,]),'NOT':([60,61,65,82,84,86,87,98,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,161,162,183,207,209,231,232,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'ARRAY':([67,74,133,180,220,253,],[106,106,106,106,106,106,]),'RECORD':([67,74,133,180,220,253,],[107,107,107,107,107,107,]),'INTEGER':([67,74,133,170,180,220,253,],[115,115,115,115,115,115,115,]),'REAL':([67,74,133,170,180,220,253,],[116,116,116,116,116,116,116,]),'BOOLEAN':([67,74,133,170,180,220,253,],[117,117,117,117,117,117,117,]),'STRING':([67,74,133,170,180,220,253,],[118,118,118,118,118,118,118,]),'THEN':([85,88,89,90,91,92,93,136,157,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,230,],[139,-120,-121,-122,-123,-124,-66,-67,-118,-68,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-119,-125,]),'TIMES':([85,88,89,90,91,92,93,94,99,135,136,138,157,158,167,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,226,230,233,234,246,247,],[142,-120,-121,-122,-123,-124,-66,142,142,142,-67,142,-118,142,142,-68,142,142,-103,-104,-105,-106,142,142,142,142,142,142,142,142,142,142,142,-119,142,142,142,-125,142,142,142,142,]),'DIVIDE':([85,88,89,90,91,92,93,94,99,135,136,138,157,158,167,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,226,230,233,234,246,247,],[143,-120,-121,-122,-123,-124,-66,143,143,143,-67,143,-118,143,143,-68,143,143,-103,-104,-105,-106,143,143,143,143,143,143,143,143,143,143,143,-119,143,143,143,-125,143,143,143,143,]),'DIVIDE_INT':([85,88,89,90,91,92,93,94,99,135,136,138,157,158,167,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,226,230,233,234,246,247,],[144,-120,-121,-122,-123,-124,-66,144,144,144,-67,144,-118,144,144,-68,144,144,-103,-104,-105,-106,144,144,144,144,144,144,144,144,144,144,144,-119,144,144,144,-125,144,144,144,144,]),'MODULO':([85,88,89,90,91,92,93,94,99,135,136,138,157,158,167,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,226,230,233,234,246,247,],[145,-120,-121,-122,-123,-124,-66,145,145,145,-67,145,-118,145,145,-68,145,145,-103,-104,-105,-106,145,145,145,145,145,145,145,145,145,145,145,-119,145,145,145,-125,145,145,145,145,]),'SHL':([85,88,89,90,91,92,93,94,99,135,136,138,157,158,167,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,226,230,233,234,246,247,],[146,-120,-121,-122,-123,-124,-66,146,146,146,-67,146,-118,146,146,-68,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,146,146,146,-119,146,146,146,-125,146,146,146,146,]),'SHR':([85,88,89,90,91,92,93,94,99,135,136,138,157,158,167,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,226,230,233,234,246,247,],[147,-120,-121,-122,-123,-124,-66,147,147,147,-67,147,-118,147,147,-68,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,147,147,147,-119,147,147,147,-125,147,147,147,147,]),'NEQUAL':([85,88,89,90,91,92,93,94,99,135,136,138,157,158,167,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,226,230,233,234,246,247,],[149,-120,-121,-122,-123,-124,-66,149,149,149,-67,149,-118,149,149,-68,-101,-102,-103,-104,-105,-106,149,149,None,None,None,None,None,None,149,149,149,-119,149,149,149,-125,149,149,149,149,]),'LT':([85,88,89,90,91,92,93,94,99,135,136,138,157,158,167,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,226,230,233,234,246,247,],[150,-120,-121,-122,-123,-124,-66,150,150,150,-67,150,-118,150,150,-68,-101,-102,-103,-104,-105,-106,150,150,None,None,None,None,None,None,150,150,150,-119,150,150,150,-125,150,150,150,150,]),'GT':([85,88,89,90,91,92,93,94,99,135,136,138,157,158,167,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,226,230,233,234,246,247,],[151,-120,-121,-122,-123,-124,-66,151,151,151,-67,151,-118,151,151,-68,-101,-102,-103,-104,-105,-106,151,151,None,None,None,None,None,None,151,151,151,-119,151,151,151,-125,151,151,151,151,]),'LE':([85,88,89,90,91,92,93,94,99,135,136,138,157,158,167,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,226,230,233,234,246,247,],[152,-120,-121,-122,-123,-124,-66,152,152,152,-67,152,-118,152,152,-68,-101,-102,-103,-104,-105,-106,152,152,None,None,None,None,None,None,152,152,152,-119,152,152,152,-125,152,152,152,152,]),'GE':([85,88,89,90,91,92,93,94,99,135,136,138,157,158,167,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,226,230,233,234,246,247,],[153,-120,-121,-122,-123,-124,-66,153,153,153,-67,153,-118,153,153,-68,-101,-102,-103,-104,-105,-106,153,153,None,None,None,None,None,None,153,153,153,-119,153,153,153,-125,153,153,153,153,]),'AND':([85,88,89,90,91,92,93,94,99,135,136,138,157,158,167,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,226,230,233,234,246,247,],[154,-120,-121,-122,-123,-124,-66,154,154,154,-67,154,-118,154,154,-68,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,154,154,-119,154,154,154,-125,154,154,154,154,]),'OR':([85,88,89,90,91,92,93,94,99,135,136,138,157,158,167,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,226,230,233,234,246,247,],[155,-120,-121,-122,-123,-124,-66,155,155,155,-67,155,-118,155,155,-68,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-119,155,155,155,-125,155,155,155,155,]),'XOR':([85,88,89,90,91,92,93,94,99,135,136,138,157,158,167,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,226,230,233,234,246,247,],[156,-120,-121,-122,-123,-124,-66,156,156,156,-67,156,-118,156,156,-68,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-119,156,156,156,-125,156,156,156,156,]),'DO':([88,89,90,91,92,93,94,136,157,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,230,246,247,],[-120,-121,-122,-123,-124,-66,160,-67,-118,-68,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-119,-125,255,256,]),'OF':([88,89,90,91,92,93,99,136,157,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,230,241,],[-120,-121,-122,-123,-124,-66,168,-67,-118,-68,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-119,-125,253,]),'RBRACKET':([88,89,90,91,92,93,104,105,109,110,111,113,114,115,116,117,118,119,120,125,136,137,138,157,176,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,215,216,221,226,230,],[-120,-121,-122,-123,-124,-66,-41,-42,-51,-52,-128,-130,-131,-53,-54,-55,-56,-132,-133,-136,-67,182,-69,-118,-129,-68,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-119,241,-45,-43,-70,-125,]),'RPAREN':([88,89,90,91,92,93,98,101,102,103,104,105,109,110,111,113,114,115,116,117,118,119,120,125,130,131,136,157,158,159,164,165,166,167,176,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,217,221,223,224,230,234,258,],[-120,-121,-122,-123,-124,-66,-137,-38,-39,-40,-41,-42,-51,-52,-128,-130,-131,-53,-54,-55,-56,-132,-133,-136,178,-32,-67,-118,202,-137,208,-126,-127,-74,-129,-68,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-119,230,-46,-43,-31,-33,-125,-73,-44,]),'TO':([88,89,90,91,92,93,136,157,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,206,230,],[-120,-121,-122,-123,-124,-66,-67,-118,-68,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-119,231,-125,]),'DOWNTO':([88,89,90,91,92,93,136,157,182,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,206,230,],[-120,-121,-122,-123,-124,-66,-67,-118,-68,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-119,232,-125,]),'DOTDOT':([108,109,111,113,114,119,120,176,],[175,-136,-128,-130,-131,-132,-133,-129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'uses_clause_opt':([4,],[5,]),'uses_clause':([4,],[6,]),'empty':([4,5,28,40,41,62,81,98,129,139,159,160,184,210,225,228,239,250,255,256,257,],[7,12,50,77,77,50,50,166,12,50,166,50,229,237,12,50,50,50,50,50,262,]),'block':([5,129,225,],[9,177,244,]),'declarations':([5,129,225,],[10,10,10,]),'declaration_list':([5,129,225,],[11,11,11,]),'declaration':([5,11,129,225,],[13,29,13,13,]),'var_declaration':([5,11,129,225,],[14,14,14,14,]),'const_declaration':([5,11,129,225,],[15,15,15,15,]),'type_declaration':([5,11,129,225,],[16,16,16,16,]),'procedure_declaration':([5,11,129,225,],[17,17,17,17,]),'function_declaration':([5,11,129,225,],[18,18,18,18,]),'unit_list':([8,],[24,]),'compound_statement':([10,28,62,81,139,160,228,239,250,255,256,],[27,51,51,51,51,51,51,51,51,51,51,]),'var_declaration_list':([19,],[30,]),'var_decl':([19,30,],[31,66,]),'id_list':([19,30,76,107,172,179,],[32,32,132,174,174,132,]),'const_list':([20,],[34,]),'const_definition':([20,34,],[35,69,]),'type_list':([21,],[37,]),'type_definition':([21,37,],[38,72,]),'statement_list':([28,62,],[44,95,]),'statement':([28,62,81,139,160,228,239,250,255,256,],[45,45,134,184,204,245,251,257,259,260,]),'simple_statement':([28,62,81,139,160,228,239,250,255,256,],[46,46,46,46,46,46,46,46,46,46,]),'structured_statement':([28,62,81,139,160,228,239,250,255,256,],[47,47,47,47,47,47,47,47,47,47,]),'assignment_statement':([28,62,81,139,160,228,239,250,255,256,],[48,48,48,48,48,48,48,48,48,48,]),'procedure_call_statement':([28,62,81,139,160,228,239,250,255,256,],[49,49,49,49,49,49,49,49,49,49,]),'if_statement':([28,62,81,139,160,228,239,250,255,256,],[52,52,52,52,52,52,52,52,52,52,]),'while_statement':([28,62,81,139,160,228,239,250,255,256,],[53,53,53,53,53,53,53,53,53,53,]),'repeat_statement':([28,62,81,139,160,228,239,250,255,256,],[54,54,54,54,54,54,54,54,54,54,]),'for_statement':([28,62,81,139,160,228,239,250,255,256,],[55,55,55,55,55,55,55,55,55,55,]),'case_statement':([28,62,81,139,160,228,239,250,255,256,],[56,56,56,56,56,56,56,56,56,56,]),'record_assignment':([28,62,81,139,160,228,239,250,255,256,],[57,57,57,57,57,57,57,57,57,57,]),'variable':([28,60,61,62,65,81,82,84,86,87,98,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,160,161,162,183,207,209,228,231,232,239,250,255,256,],[58,89,89,58,89,58,89,89,89,89,89,58,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,58,89,89,89,89,89,58,89,89,58,58,58,58,]),'procedure_call':([28,62,81,139,160,228,239,250,255,256,],[59,59,59,59,59,59,59,59,59,59,]),'formal_parameter_list_opt':([40,41,],[75,78,]),'expression':([60,61,65,82,84,86,87,98,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,161,162,183,207,209,231,232,],[85,94,99,135,138,157,158,167,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,167,205,206,226,233,234,246,247,]),'function_call':([60,61,65,82,84,86,87,98,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,161,162,183,207,209,231,232,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'type':([67,74,133,180,220,253,],[100,128,181,224,243,258,]),'simple_type':([67,74,133,170,180,220,253,],[101,101,101,216,101,101,101,]),'array_type':([67,74,133,180,220,253,],[102,102,102,102,102,102,]),'record_type':([67,74,133,180,220,253,],[103,103,103,103,103,103,]),'subrange_type':([67,74,133,170,180,220,253,],[104,104,104,104,104,104,104,]),'type_identifier':([67,74,133,170,180,220,253,],[105,105,105,105,105,105,105,]),'constant':([67,71,74,133,168,170,175,180,220,236,240,253,],[108,126,108,108,214,108,221,108,108,214,214,108,]),'predefined_type':([67,74,133,170,180,220,253,],[110,110,110,110,110,110,110,]),'UNSIGNED_NUMBER':([67,71,74,112,133,168,170,175,180,220,236,240,253,],[111,111,111,176,111,111,111,111,111,111,111,111,111,]),'sign':([67,71,74,133,168,170,175,180,220,236,240,253,],[112,112,112,112,112,112,112,112,112,112,112,112,]),'constant_identifier':([67,71,74,133,168,170,175,180,220,236,240,253,],[114,114,114,114,114,114,114,114,114,114,114,114,]),'formal_parameter_list':([76,],[130,]),'formal_parameter':([76,179,],[131,223,]),'expression_list':([84,],[137,]),'args_optional':([98,159,],[164,203,]),'args':([98,159,],[165,165,]),'record_fields':([107,],[171,]),'field_list':([107,],[172,]),'field_declaration':([107,172,],[173,218,]),'case_element_list':([168,],[210,]),'case_element':([168,236,],[211,249,]),'case_label_list':([168,236,],[212,212,]),'case_label':([168,236,240,],[213,213,252,]),'index_type':([170,],[215,]),'else_part':([184,],[227,]),'else_clause_optional':([210,],[235,]),'semicolon_optional':([210,257,],[236,261,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON uses_clause_opt block DOT','program',6,'p_program','minipascal_parser.py',23),
  ('uses_clause_opt -> uses_clause','uses_clause_opt',1,'p_uses_clause_opt','minipascal_parser.py',27),
  ('uses_clause_opt -> empty','uses_clause_opt',1,'p_uses_clause_opt','minipascal_parser.py',28),
  ('unit_list -> unit_list COMMA ID','unit_list',3,'p_unit_list','minipascal_parser.py',33),
  ('unit_list -> ID','unit_list',1,'p_unit_list','minipascal_parser.py',34),
  ('uses_clause -> USES unit_list SEMICOLON','uses_clause',3,'p_uses_clause','minipascal_parser.py',38),
  ('block -> declarations compound_statement','block',2,'p_block','minipascal_parser.py',43),
  ('declarations -> declaration_list','declarations',1,'p_declarations','minipascal_parser.py',48),
  ('declarations -> empty','declarations',1,'p_declarations','minipascal_parser.py',49),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','minipascal_parser.py',53),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','minipascal_parser.py',54),
  ('declaration -> var_declaration','declaration',1,'p_declaration','minipascal_parser.py',58),
  ('declaration -> const_declaration','declaration',1,'p_declaration','minipascal_parser.py',59),
  ('declaration -> type_declaration','declaration',1,'p_declaration','minipascal_parser.py',60),
  ('declaration -> procedure_declaration','declaration',1,'p_declaration','minipascal_parser.py',61),
  ('declaration -> function_declaration','declaration',1,'p_declaration','minipascal_parser.py',62),
  ('var_declaration -> VAR var_declaration_list','var_declaration',2,'p_var_declaration','minipascal_parser.py',66),
  ('var_declaration_list -> var_declaration_list var_decl','var_declaration_list',2,'p_var_declaration_list','minipascal_parser.py',70),
  ('var_declaration_list -> var_decl','var_declaration_list',1,'p_var_declaration_list','minipascal_parser.py',71),
  ('var_decl -> id_list COLON type SEMICOLON','var_decl',4,'p_var_decl','minipascal_parser.py',75),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','minipascal_parser.py',79),
  ('id_list -> ID','id_list',1,'p_id_list','minipascal_parser.py',80),
  ('const_declaration -> CONST const_list','const_declaration',2,'p_const_declaration','minipascal_parser.py',84),
  ('const_list -> const_list const_definition SEMICOLON','const_list',3,'p_const_list','minipascal_parser.py',88),
  ('const_list -> const_definition SEMICOLON','const_list',2,'p_const_list','minipascal_parser.py',89),
  ('const_definition -> ID EQUAL constant','const_definition',3,'p_const_definition','minipascal_parser.py',93),
  ('procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON','procedure_declaration',6,'p_procedure_declaration','minipascal_parser.py',97),
  ('function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON','function_declaration',8,'p_function_declaration','minipascal_parser.py',101),
  ('formal_parameter_list_opt -> LPAREN formal_parameter_list RPAREN','formal_parameter_list_opt',3,'p_formal_parameter_list_opt','minipascal_parser.py',105),
  ('formal_parameter_list_opt -> empty','formal_parameter_list_opt',1,'p_formal_parameter_list_opt','minipascal_parser.py',106),
  ('formal_parameter_list -> formal_parameter_list SEMICOLON formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','minipascal_parser.py',110),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','minipascal_parser.py',111),
  ('formal_parameter -> id_list COLON type','formal_parameter',3,'p_formal_parameter','minipascal_parser.py',115),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','minipascal_parser.py',120),
  ('type_list -> type_list type_definition SEMICOLON','type_list',3,'p_type_list','minipascal_parser.py',124),
  ('type_list -> type_definition SEMICOLON','type_list',2,'p_type_list','minipascal_parser.py',125),
  ('type_definition -> ID EQUAL type','type_definition',3,'p_type_definition','minipascal_parser.py',129),
  ('type -> simple_type','type',1,'p_type','minipascal_parser.py',134),
  ('type -> array_type','type',1,'p_type','minipascal_parser.py',135),
  ('type -> record_type','type',1,'p_type','minipascal_parser.py',136),
  ('simple_type -> subrange_type','simple_type',1,'p_simple_type','minipascal_parser.py',140),
  ('simple_type -> type_identifier','simple_type',1,'p_simple_type','minipascal_parser.py',141),
  ('subrange_type -> constant DOTDOT constant','subrange_type',3,'p_subrange_type','minipascal_parser.py',145),
  ('array_type -> ARRAY LBRACKET index_type RBRACKET OF type','array_type',6,'p_array_type','minipascal_parser.py',149),
  ('index_type -> simple_type','index_type',1,'p_index_type','minipascal_parser.py',153),
  ('record_type -> RECORD record_fields END','record_type',3,'p_record_type','minipascal_parser.py',157),
  ('record_fields -> field_list','record_fields',1,'p_record_fields','minipascal_parser.py',161),
  ('field_list -> field_list field_declaration SEMICOLON','field_list',3,'p_field_list','minipascal_parser.py',165),
  ('field_list -> field_declaration SEMICOLON','field_list',2,'p_field_list','minipascal_parser.py',166),
  ('field_declaration -> id_list COLON type','field_declaration',3,'p_field_declaration','minipascal_parser.py',170),
  ('type_identifier -> ID','type_identifier',1,'p_type_identifier','minipascal_parser.py',174),
  ('type_identifier -> predefined_type','type_identifier',1,'p_type_identifier','minipascal_parser.py',175),
  ('predefined_type -> INTEGER','predefined_type',1,'p_predefined_type','minipascal_parser.py',179),
  ('predefined_type -> REAL','predefined_type',1,'p_predefined_type','minipascal_parser.py',180),
  ('predefined_type -> BOOLEAN','predefined_type',1,'p_predefined_type','minipascal_parser.py',181),
  ('predefined_type -> STRING','predefined_type',1,'p_predefined_type','minipascal_parser.py',182),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','minipascal_parser.py',187),
  ('statement_list -> statement','statement_list',1,'p_statement_list','minipascal_parser.py',191),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','minipascal_parser.py',192),
  ('statement -> simple_statement','statement',1,'p_statement','minipascal_parser.py',196),
  ('statement -> structured_statement','statement',1,'p_statement','minipascal_parser.py',197),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','minipascal_parser.py',201),
  ('simple_statement -> procedure_call_statement','simple_statement',1,'p_simple_statement','minipascal_parser.py',202),
  ('simple_statement -> empty','simple_statement',1,'p_simple_statement','minipascal_parser.py',203),
  ('assignment_statement -> variable ASSIGN expression','assignment_statement',3,'p_assignment_statement','minipascal_parser.py',207),
  ('variable -> ID','variable',1,'p_variable','minipascal_parser.py',211),
  ('variable -> variable DOT ID','variable',3,'p_variable','minipascal_parser.py',212),
  ('variable -> variable LBRACKET expression_list RBRACKET','variable',4,'p_variable','minipascal_parser.py',213),
  ('expression_list -> expression','expression_list',1,'p_expression_list','minipascal_parser.py',217),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','minipascal_parser.py',218),
  ('procedure_call_statement -> procedure_call','procedure_call_statement',1,'p_procedure_call_statement','minipascal_parser.py',222),
  ('procedure_call -> ID LPAREN args_optional RPAREN','procedure_call',4,'p_procedure_call','minipascal_parser.py',226),
  ('args -> args COMMA expression','args',3,'p_args','minipascal_parser.py',230),
  ('args -> expression','args',1,'p_args','minipascal_parser.py',231),
  ('structured_statement -> compound_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',235),
  ('structured_statement -> if_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',236),
  ('structured_statement -> while_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',237),
  ('structured_statement -> repeat_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',238),
  ('structured_statement -> for_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',239),
  ('structured_statement -> case_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',240),
  ('structured_statement -> record_assignment','structured_statement',1,'p_structured_statement','minipascal_parser.py',241),
  ('if_statement -> IF expression THEN statement else_part','if_statement',5,'p_if_statement','minipascal_parser.py',245),
  ('else_part -> ELSE statement','else_part',2,'p_else_part','minipascal_parser.py',249),
  ('else_part -> empty','else_part',1,'p_else_part','minipascal_parser.py',250),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','minipascal_parser.py',254),
  ('repeat_statement -> REPEAT statement_list UNTIL expression','repeat_statement',4,'p_repeat_statement','minipascal_parser.py',258),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','minipascal_parser.py',262),
  ('for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','minipascal_parser.py',263),
  ('case_statement -> CASE expression OF case_element_list else_clause_optional END','case_statement',6,'p_case_statement','minipascal_parser.py',267),
  ('case_element_list -> case_element_list semicolon_optional case_element','case_element_list',3,'p_case_element_list','minipascal_parser.py',271),
  ('case_element_list -> case_element','case_element_list',1,'p_case_element_list','minipascal_parser.py',272),
  ('case_element -> case_label_list COLON statement','case_element',3,'p_case_element','minipascal_parser.py',276),
  ('case_label_list -> case_label_list COMMA case_label','case_label_list',3,'p_case_label_list','minipascal_parser.py',280),
  ('case_label_list -> case_label','case_label_list',1,'p_case_label_list','minipascal_parser.py',281),
  ('case_label -> constant','case_label',1,'p_case_label','minipascal_parser.py',285),
  ('else_clause_optional -> semicolon_optional ELSE statement semicolon_optional','else_clause_optional',4,'p_else_clause_optional','minipascal_parser.py',289),
  ('else_clause_optional -> empty','else_clause_optional',1,'p_else_clause_optional','minipascal_parser.py',290),
  ('semicolon_optional -> SEMICOLON','semicolon_optional',1,'p_semicolon_optional','minipascal_parser.py',294),
  ('semicolon_optional -> empty','semicolon_optional',1,'p_semicolon_optional','minipascal_parser.py',295),
  ('record_assignment -> ID DOT ID ASSIGN expression','record_assignment',5,'p_record_assignment','minipascal_parser.py',299),
  ('expression -> expression PLUS expression','expression',3,'p_expression','minipascal_parser.py',305),
  ('expression -> expression MINUS expression','expression',3,'p_expression','minipascal_parser.py',306),
  ('expression -> expression TIMES expression','expression',3,'p_expression','minipascal_parser.py',307),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','minipascal_parser.py',308),
  ('expression -> expression DIVIDE_INT expression','expression',3,'p_expression','minipascal_parser.py',309),
  ('expression -> expression MODULO expression','expression',3,'p_expression','minipascal_parser.py',310),
  ('expression -> expression SHL expression','expression',3,'p_expression','minipascal_parser.py',311),
  ('expression -> expression SHR expression','expression',3,'p_expression','minipascal_parser.py',312),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','minipascal_parser.py',313),
  ('expression -> expression NEQUAL expression','expression',3,'p_expression','minipascal_parser.py',314),
  ('expression -> expression LT expression','expression',3,'p_expression','minipascal_parser.py',315),
  ('expression -> expression GT expression','expression',3,'p_expression','minipascal_parser.py',316),
  ('expression -> expression LE expression','expression',3,'p_expression','minipascal_parser.py',317),
  ('expression -> expression GE expression','expression',3,'p_expression','minipascal_parser.py',318),
  ('expression -> expression AND expression','expression',3,'p_expression','minipascal_parser.py',319),
  ('expression -> expression OR expression','expression',3,'p_expression','minipascal_parser.py',320),
  ('expression -> expression XOR expression','expression',3,'p_expression','minipascal_parser.py',321),
  ('expression -> NOT expression','expression',2,'p_expression','minipascal_parser.py',322),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','minipascal_parser.py',323),
  ('expression -> function_call','expression',1,'p_expression','minipascal_parser.py',324),
  ('expression -> variable','expression',1,'p_expression','minipascal_parser.py',325),
  ('expression -> INTEGER_CONST','expression',1,'p_expression','minipascal_parser.py',326),
  ('expression -> REAL_CONST','expression',1,'p_expression','minipascal_parser.py',327),
  ('expression -> STRING_LITERAL','expression',1,'p_expression','minipascal_parser.py',328),
  ('function_call -> ID LPAREN args_optional RPAREN','function_call',4,'p_function_call','minipascal_parser.py',333),
  ('args_optional -> args','args_optional',1,'p_args_opt','minipascal_parser.py',338),
  ('args_optional -> empty','args_optional',1,'p_args_opt','minipascal_parser.py',339),
  ('constant -> UNSIGNED_NUMBER','constant',1,'p_constant','minipascal_parser.py',344),
  ('constant -> sign UNSIGNED_NUMBER','constant',2,'p_constant','minipascal_parser.py',345),
  ('constant -> STRING_LITERAL','constant',1,'p_constant','minipascal_parser.py',346),
  ('constant -> constant_identifier','constant',1,'p_constant','minipascal_parser.py',347),
  ('UNSIGNED_NUMBER -> INTEGER_CONST','UNSIGNED_NUMBER',1,'p_unsigned_number','minipascal_parser.py',351),
  ('UNSIGNED_NUMBER -> REAL_CONST','UNSIGNED_NUMBER',1,'p_unsigned_number','minipascal_parser.py',352),
  ('sign -> PLUS','sign',1,'p_sign','minipascal_parser.py',356),
  ('sign -> MINUS','sign',1,'p_sign','minipascal_parser.py',357),
  ('constant_identifier -> ID','constant_identifier',1,'p_constant_identifier','minipascal_parser.py',361),
  ('empty -> <empty>','empty',0,'p_empty','minipascal_parser.py',366),
]
