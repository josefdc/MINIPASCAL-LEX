
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

<<<<<<< HEAD
_lr_signature = 'rightASSIGNleftORXORleftANDnonassocEQUALNEQUALLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEDIVIDE_INTMODULOrightNOTleftLPARENRPARENABSOLUTE AND ARRAY ASM ASSIGN BEGIN BOOLEAN CASE COLON COMMA CONST CONSTRUCTOR DESTRUCTOR DIV DIVIDE DIVIDE_INT DO DOT DOTDOT DOWNTO ELSE END EQUAL EXTERNAL FILE FOR FORWARD FUNCTION GE GOTO GT ID IF IMPLEMENTATION IN INLINE INTEGER INTEGER_CONST INTERFACE INTERRUPT LABEL LBRACKET LE LPAREN LT MINUS MOD MODULO NEQUAL NIL NOT OBJECT OF OFF OR PACKED PLUS PRIVATE PROCEDURE PROGRAM RBRACKET REAL REAL_CONST RECORD REPEAT RPAREN SEMICOLON SET SHL SHR STRING STRING_LITERAL THEN TIMES TO TYPE UNIT UNTIL USES VAR VIRTUAL WHILE WITH XORprogram : PROGRAM ID SEMICOLON block DOTblock : declarations compound_statementdeclarations : declaration_list\n                    | emptydeclaration_list : declaration_list declaration\n                        | declarationdeclaration : var_declaration\n                   | const_declaration\n                   | type_declaration\n                   | procedure_declarationvar_declaration : VAR var_declaration_listvar_declaration_list : var_declaration_list var_decl\n                | var_declvar_decl : id_list COLON type SEMICOLONid_list : id_list COMMA ID\n               | IDconst_declaration : CONST const_listconst_list : const_list const_definition SEMICOLON\n                  | const_definition SEMICOLONconst_definition : ID EQUAL constantprocedure_declaration : PROCEDURE ID LPAREN param_list RPAREN SEMICOLON blockparam_list : param_list SEMICOLON param\n                  | param\n                  | emptyparam : ID COLON typetype_declaration : TYPE type_listtype_list : type_list type_definition SEMICOLON\n                 | type_definition SEMICOLONtype_definition : ID EQUAL typetype : simple_type\n            | array_type\n            | record_typesimple_type : subrange_type\n                   | type_identifiersubrange_type : constant DOTDOT constantarray_type : ARRAY LBRACKET index_type RBRACKET OF typeindex_type : simple_typerecord_type : RECORD record_fields ENDrecord_fields : field_listfield_list : field_list field_declaration SEMICOLON\n                  | field_declaration SEMICOLONfield_declaration : id_list COLON typetype_identifier : ID\n                       | predefined_typepredefined_type : INTEGER\n                       | REAL\n                       | BOOLEAN\n                       | STRINGcompound_statement : BEGIN statement_list ENDstatement_list : statement\n                      | statement_list SEMICOLON statementstatement : simple_statement\n                 | structured_statementsimple_statement : assignment_statement\n                        | procedure_call_statement\n                        | emptystructured_statement : compound_statement\n                            | if_statement\n                            | while_statement\n                            | repeat_statement\n                            | for_statement\n                            | record_assignmentassignment_statement : variable ASSIGN expressionvariable : ID\n                | variable DOT ID\n                | variable LBRACKET expression_list RBRACKETexpression_list : expression\n                       | expression_list COMMA expressionrecord_assignment : ID DOT ID ASSIGN expressionif_statement : IF expression THEN statement else_partelse_part : ELSE statement\n                 | emptywhile_statement : WHILE expression DO statementrepeat_statement : REPEAT statement_list UNTIL expressionfor_statement : FOR ID ASSIGN expression TO expression DO statement\n                     | FOR ID ASSIGN expression DOWNTO expression DO statementprocedure_call_statement : procedure_callprocedure_call : ID LPAREN args RPAREN\n                      | IDargs : args COMMA expression\n            | expression\n            | emptyexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression DIVIDE_INT expression\n                  | expression MODULO expression\n                  | expression EQUAL expression\n                  | expression NEQUAL expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression XOR expression\n                  | NOT expression %prec NOT\n                  | LPAREN expression RPAREN\n                  | variable\n                  | INTEGER_CONST\n                  | REAL_CONST\n                  | STRING_LITERALconstant : UNSIGNED_NUMBER\n                | sign UNSIGNED_NUMBER\n                | STRING_LITERAL\n                | constant_identifierUNSIGNED_NUMBER : INTEGER_CONST\n                       | REAL_CONSTsign : PLUS\n            | MINUSconstant_identifier : IDempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,18,],[0,-1,]),'ID':([2,14,15,16,17,20,22,23,26,29,48,49,50,51,53,54,55,57,58,60,61,62,64,65,66,67,69,70,79,80,88,105,108,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,138,139,144,145,147,150,152,154,156,177,179,184,185,192,194,195,199,205,206,207,],[3,25,28,31,32,52,25,-13,28,31,75,75,52,78,-12,90,104,-19,106,-28,90,110,52,75,116,75,75,75,140,75,25,-18,-27,52,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,52,75,75,-14,90,25,106,90,110,75,75,75,-41,90,52,75,75,-40,90,52,52,]),'SEMICOLON':([3,20,27,30,33,34,35,36,37,38,39,40,41,42,43,44,45,47,50,52,56,59,62,63,64,71,72,73,74,75,77,81,82,83,84,85,86,90,91,92,94,95,96,97,98,99,100,101,106,107,109,111,112,113,114,115,116,119,135,137,148,151,153,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,178,182,183,186,187,189,191,192,193,196,200,202,206,207,208,209,210,],[4,-113,57,60,64,-50,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-77,-113,-79,105,108,-113,-49,-113,-100,-101,-102,-103,-64,64,144,-30,-31,-32,-33,-34,-43,-44,-104,-106,-107,-45,-46,-47,-48,-108,-109,-112,-20,-29,154,-23,-24,-51,-63,-65,-113,-98,-113,184,-105,188,-66,-113,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-99,-73,-74,-78,-38,199,-35,-25,-22,-70,-113,-72,-69,-42,-71,-113,-113,-36,-75,-76,]),'BEGIN':([4,6,7,8,9,10,11,12,13,19,20,21,22,23,26,29,50,53,57,60,63,64,105,108,119,137,144,188,192,201,206,207,],[-113,20,-3,-4,-6,-7,-8,-9,-10,-2,20,-5,-11,-13,-17,-26,20,-12,-19,-28,-49,20,-18,-27,20,20,-14,-113,20,-21,20,20,]),'VAR':([4,7,9,10,11,12,13,19,21,22,23,26,29,53,57,60,63,105,108,144,188,201,],[14,14,-6,-7,-8,-9,-10,-2,-5,-11,-13,-17,-26,-12,-19,-28,-49,-18,-27,-14,14,-21,]),'CONST':([4,7,9,10,11,12,13,19,21,22,23,26,29,53,57,60,63,105,108,144,188,201,],[15,15,-6,-7,-8,-9,-10,-2,-5,-11,-13,-17,-26,-12,-19,-28,-49,-18,-27,-14,15,-21,]),'TYPE':([4,7,9,10,11,12,13,19,21,22,23,26,29,53,57,60,63,105,108,144,188,201,],[16,16,-6,-7,-8,-9,-10,-2,-5,-11,-13,-17,-26,-12,-19,-28,-49,-18,-27,-14,16,-21,]),'PROCEDURE':([4,7,9,10,11,12,13,19,21,22,23,26,29,53,57,60,63,105,108,144,188,201,],[17,17,-6,-7,-8,-9,-10,-2,-5,-11,-13,-17,-26,-12,-19,-28,-49,-18,-27,-14,17,-21,]),'DOT':([5,19,46,52,63,71,75,116,155,],[18,-2,66,79,-49,66,-64,-65,-66,]),'END':([20,33,34,35,36,37,38,39,40,41,42,43,44,45,47,52,63,64,71,72,73,74,75,114,115,116,119,135,137,146,147,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,178,184,191,192,193,196,199,202,206,207,209,210,],[-113,63,-50,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-77,-79,-49,-113,-100,-101,-102,-103,-64,-51,-63,-65,-113,-98,-113,182,-39,-66,-113,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-99,-73,-74,-78,-41,-70,-113,-72,-69,-40,-71,-113,-113,-75,-76,]),'IF':([20,50,64,119,137,192,206,207,],[48,48,48,48,48,48,48,48,]),'WHILE':([20,50,64,119,137,192,206,207,],[49,49,49,49,49,49,49,49,]),'REPEAT':([20,50,64,119,137,192,206,207,],[50,50,50,50,50,50,50,50,]),'FOR':([20,50,64,119,137,192,206,207,],[51,51,51,51,51,51,51,51,]),'COLON':([24,25,104,110,149,],[54,-16,-15,152,185,]),'COMMA':([24,25,71,72,73,74,75,80,104,116,117,118,135,141,142,143,149,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,190,197,],[55,-16,-100,-101,-102,-103,-64,-113,-15,-65,156,-67,-98,179,-81,-82,55,-66,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-99,-68,-80,]),'EQUAL':([28,31,68,71,72,73,74,75,76,115,116,118,135,136,142,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,190,196,197,203,204,],[58,61,126,-100,-101,-102,-103,-64,126,126,-65,126,-98,126,126,-66,-83,-84,-85,-86,-87,-88,None,None,None,None,None,None,126,126,126,-99,126,126,126,126,126,126,126,]),'LPAREN':([32,48,49,52,65,67,69,70,80,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,138,139,156,177,179,194,195,],[62,70,70,80,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'UNTIL':([34,35,36,37,38,39,40,41,42,43,44,45,47,50,52,63,64,71,72,73,74,75,77,114,115,116,119,135,137,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,178,191,192,193,196,202,206,207,209,210,],[-50,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-77,-113,-79,-49,-113,-100,-101,-102,-103,-64,138,-51,-63,-65,-113,-98,-113,-66,-113,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-99,-73,-74,-78,-70,-113,-72,-69,-71,-113,-113,-75,-76,]),'ELSE':([35,36,37,38,39,40,41,42,43,44,45,47,52,63,71,72,73,74,75,115,116,119,135,137,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,178,191,192,193,196,202,206,207,209,210,],[-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-77,-79,-49,-100,-101,-102,-103,-64,-63,-65,-113,-98,-113,-66,192,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-99,-73,-74,-78,-70,-113,-72,-69,-71,-113,-113,-75,-76,]),'ASSIGN':([46,52,78,116,140,155,],[65,-64,139,-65,177,-66,]),'LBRACKET':([46,52,71,75,87,116,155,],[67,-64,67,-64,145,-65,-66,]),'NOT':([48,49,65,67,69,70,80,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,138,139,156,177,179,194,195,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'INTEGER_CONST':([48,49,54,58,61,65,67,69,70,80,93,102,103,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,138,139,145,150,152,156,177,179,185,194,195,205,],[72,72,100,100,100,72,72,72,72,72,100,-110,-111,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,100,100,100,72,72,72,100,72,72,100,]),'REAL_CONST':([48,49,54,58,61,65,67,69,70,80,93,102,103,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,138,139,145,150,152,156,177,179,185,194,195,205,],[73,73,101,101,101,73,73,73,73,73,101,-110,-111,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,101,101,101,73,73,73,101,73,73,101,]),'STRING_LITERAL':([48,49,54,58,61,65,67,69,70,80,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,138,139,145,150,152,156,177,179,185,194,195,205,],[74,74,94,94,94,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,94,94,94,74,74,74,94,74,74,94,]),'ARRAY':([54,61,152,185,205,],[87,87,87,87,87,]),'RECORD':([54,61,152,185,205,],[88,88,88,88,88,]),'INTEGER':([54,61,145,152,185,205,],[96,96,96,96,96,96,]),'REAL':([54,61,145,152,185,205,],[97,97,97,97,97,97,]),'BOOLEAN':([54,61,145,152,185,205,],[98,98,98,98,98,98,]),'STRING':([54,61,145,152,185,205,],[99,99,99,99,99,99,]),'PLUS':([54,58,61,68,71,72,73,74,75,76,115,116,118,135,136,142,145,150,152,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,185,190,196,197,203,204,205,],[102,102,102,120,-100,-101,-102,-103,-64,120,120,-65,120,-98,120,120,102,102,102,-66,-83,-84,-85,-86,-87,-88,120,120,120,120,120,120,120,120,120,-99,120,120,102,120,120,120,120,120,102,]),'MINUS':([54,58,61,68,71,72,73,74,75,76,115,116,118,135,136,142,145,150,152,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,185,190,196,197,203,204,205,],[103,103,103,121,-100,-101,-102,-103,-64,121,121,-65,121,-98,121,121,103,103,103,-66,-83,-84,-85,-86,-87,-88,121,121,121,121,121,121,121,121,121,-99,121,121,103,121,121,121,121,121,103,]),'RPAREN':([62,71,72,73,74,75,80,82,83,84,85,86,90,91,92,94,95,96,97,98,99,100,101,106,111,112,113,116,135,136,141,142,143,151,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,182,186,187,189,197,208,],[-113,-100,-101,-102,-103,-64,-113,-30,-31,-32,-33,-34,-43,-44,-104,-106,-107,-45,-46,-47,-48,-108,-109,-112,153,-23,-24,-65,-98,173,178,-81,-82,-105,-66,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-99,-38,-35,-25,-22,-80,-36,]),'THEN':([68,71,72,73,74,75,116,135,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,],[119,-100,-101,-102,-103,-64,-65,-98,-66,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-99,]),'TIMES':([68,71,72,73,74,75,76,115,116,118,135,136,142,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,190,196,197,203,204,],[122,-100,-101,-102,-103,-64,122,122,-65,122,-98,122,122,-66,122,122,-85,-86,-87,-88,122,122,122,122,122,122,122,122,122,-99,122,122,122,122,122,122,122,]),'DIVIDE':([68,71,72,73,74,75,76,115,116,118,135,136,142,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,190,196,197,203,204,],[123,-100,-101,-102,-103,-64,123,123,-65,123,-98,123,123,-66,123,123,-85,-86,-87,-88,123,123,123,123,123,123,123,123,123,-99,123,123,123,123,123,123,123,]),'DIVIDE_INT':([68,71,72,73,74,75,76,115,116,118,135,136,142,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,190,196,197,203,204,],[124,-100,-101,-102,-103,-64,124,124,-65,124,-98,124,124,-66,124,124,-85,-86,-87,-88,124,124,124,124,124,124,124,124,124,-99,124,124,124,124,124,124,124,]),'MODULO':([68,71,72,73,74,75,76,115,116,118,135,136,142,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,190,196,197,203,204,],[125,-100,-101,-102,-103,-64,125,125,-65,125,-98,125,125,-66,125,125,-85,-86,-87,-88,125,125,125,125,125,125,125,125,125,-99,125,125,125,125,125,125,125,]),'NEQUAL':([68,71,72,73,74,75,76,115,116,118,135,136,142,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,190,196,197,203,204,],[127,-100,-101,-102,-103,-64,127,127,-65,127,-98,127,127,-66,-83,-84,-85,-86,-87,-88,None,None,None,None,None,None,127,127,127,-99,127,127,127,127,127,127,127,]),'LT':([68,71,72,73,74,75,76,115,116,118,135,136,142,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,190,196,197,203,204,],[128,-100,-101,-102,-103,-64,128,128,-65,128,-98,128,128,-66,-83,-84,-85,-86,-87,-88,None,None,None,None,None,None,128,128,128,-99,128,128,128,128,128,128,128,]),'GT':([68,71,72,73,74,75,76,115,116,118,135,136,142,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,190,196,197,203,204,],[129,-100,-101,-102,-103,-64,129,129,-65,129,-98,129,129,-66,-83,-84,-85,-86,-87,-88,None,None,None,None,None,None,129,129,129,-99,129,129,129,129,129,129,129,]),'LE':([68,71,72,73,74,75,76,115,116,118,135,136,142,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,190,196,197,203,204,],[130,-100,-101,-102,-103,-64,130,130,-65,130,-98,130,130,-66,-83,-84,-85,-86,-87,-88,None,None,None,None,None,None,130,130,130,-99,130,130,130,130,130,130,130,]),'GE':([68,71,72,73,74,75,76,115,116,118,135,136,142,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,190,196,197,203,204,],[131,-100,-101,-102,-103,-64,131,131,-65,131,-98,131,131,-66,-83,-84,-85,-86,-87,-88,None,None,None,None,None,None,131,131,131,-99,131,131,131,131,131,131,131,]),'AND':([68,71,72,73,74,75,76,115,116,118,135,136,142,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,190,196,197,203,204,],[132,-100,-101,-102,-103,-64,132,132,-65,132,-98,132,132,-66,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,132,132,-99,132,132,132,132,132,132,132,]),'OR':([68,71,72,73,74,75,76,115,116,118,135,136,142,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,190,196,197,203,204,],[133,-100,-101,-102,-103,-64,133,133,-65,133,-98,133,133,-66,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-99,133,133,133,133,133,133,133,]),'XOR':([68,71,72,73,74,75,76,115,116,118,135,136,142,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,190,196,197,203,204,],[134,-100,-101,-102,-103,-64,134,134,-65,134,-98,134,134,-66,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-99,134,134,134,134,134,134,134,]),'DO':([71,72,73,74,75,76,116,135,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,203,204,],[-100,-101,-102,-103,-64,137,-65,-98,-66,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-99,206,207,]),'RBRACKET':([71,72,73,74,75,85,86,90,91,92,94,95,96,97,98,99,100,101,106,116,117,118,135,151,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,180,181,186,190,],[-100,-101,-102,-103,-64,-33,-34,-43,-44,-104,-106,-107,-45,-46,-47,-48,-108,-109,-112,-65,155,-67,-98,-105,-66,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-99,198,-37,-35,-68,]),'TO':([71,72,73,74,75,116,135,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,],[-100,-101,-102,-103,-64,-65,-98,-66,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-99,194,]),'DOWNTO':([71,72,73,74,75,116,135,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,],[-100,-101,-102,-103,-64,-65,-98,-66,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-99,195,]),'DOTDOT':([89,90,92,94,95,100,101,151,],[150,-112,-104,-106,-107,-108,-109,-105,]),'OF':([198,],[205,]),}
=======
_lr_signature = 'rightASSIGNleftORXORleftANDnonassocEQUALNEQUALLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEDIVIDE_INTMODULOleftSHLSHRrightNOTrightUMINUSABSOLUTE AND ARRAY ASM ASSIGN BEGIN BOOLEAN CASE COLON COMMA CONST CONSTRUCTOR DESTRUCTOR DIV DIVIDE DIVIDE_INT DO DOT DOTDOT DOWNTO ELSE END EQUAL EXTERNAL FILE FOR FORWARD FUNCTION GE GOTO GT ID IF IMPLEMENTATION IN INLINE INTEGER INTEGER_CONST INTERFACE INTERRUPT LABEL LBRACKET LE LPAREN LT MINUS MOD MODULO NEQUAL NIL NOT OBJECT OF OR PACKED PLUS PROCEDURE PROGRAM RBRACKET REAL REAL_CONST RECORD REPEAT RPAREN SEMICOLON SET SHL SHR STRING STRING_LITERAL THEN TIMES TO TYPE UNIT UNTIL USES VAR VIRTUAL WHILE WITH XORprogram : PROGRAM ID SEMICOLON block DOTblock : declarations BEGIN statement_list ENDdeclarations : declarations declaration\n                    | emptydeclaration : var_declaration\n                   | const_declaration\n                   | type_declaration\n                   | procedure_declaration\n                   | function_declaration\n                   | uses_clauseuses_clause : USES identifier_list SEMICOLONidentifier_list : identifier_list COMMA ID\n                       | IDvar_declaration : VAR var_decl_listvar_decl_list : var_decl_list var_decl\n                     | var_declvar_decl : id_list COLON type SEMICOLONid_list : id_list COMMA ID\n               | IDconst_declaration : CONST const_listconst_list : const_list const_decl\n                  | const_declconst_decl : ID EQUAL constant SEMICOLONtype_declaration : TYPE type_decl_listtype_decl_list : type_decl_list type_decl\n                      | type_decltype_decl : ID EQUAL type SEMICOLONprocedure_declaration : PROCEDURE ID SEMICOLON block SEMICOLON\n                             | PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block SEMICOLONfunction_declaration : FUNCTION ID COLON type SEMICOLON block SEMICOLON\n                            | FUNCTION ID LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLONparam_list : param_list SEMICOLON param\n                  | paramparam : id_list COLON typetype : INTEGER\n            | REAL\n            | BOOLEAN\n            | STRING\n            | ID\n            | ARRAY LBRACKET range RBRACKET OF type\n            | RECORD field_list ENDrange : INTEGER_CONST DOTDOT INTEGER_CONSTfield_list : field_list field_decl SEMICOLON\n                  | field_decl SEMICOLONfield_decl : id_list COLON typestatement_list : statement_list statement\n                      | statementstatement : assignment_statement\n                 | procedure_call\n                 | compound_statement\n                 | if_statement\n                 | while_statement\n                 | repeat_statement\n                 | for_statement\n                 | emptyassignment_statement : variable ASSIGN expression SEMICOLONvariable : ID\n                | ID LBRACKET expression_list RBRACKET\n                | ID DOT IDexpression_list : expression_list COMMA expression\n                       | expressionprocedure_call : ID LPAREN args RPAREN SEMICOLON\n                      | ID SEMICOLONargs : args COMMA expression\n            | expression\n            | emptycompound_statement : BEGIN statement_list ENDif_statement : IF expression THEN statement else_partelse_part : ELSE statement\n                 | emptywhile_statement : WHILE expression DO statementrepeat_statement : REPEAT statement_list UNTIL expression SEMICOLONfor_statement : FOR ID ASSIGN expression direction expression DO statementdirection : TO\n                 | DOWNTOexpression : simple_expression relop_optrelop_opt : relop simple_expression\n                 | emptyrelop : EQUAL\n             | NEQUAL\n             | LT\n             | LE\n             | GT\n             | GE\n             | INsimple_expression : term\n                         | simple_expression addop termaddop : PLUS\n             | MINUS\n             | OR\n             | XORterm : factor\n            | term mulop factormulop : TIMES\n             | DIVIDE\n             | DIVIDE_INT\n             | MODULO\n             | DIV\n             | MOD\n             | AND\n             | SHL\n             | SHRfactor : variable\n              | INTEGER_CONST\n              | REAL_CONST\n              | STRING_LITERAL\n              | LPAREN expression RPAREN\n              | NOT factor\n              | MINUS factor %prec UMINUSconstant : INTEGER_CONST\n                | REAL_CONST\n                | STRING_LITERAL\n                | NILempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,8,],[0,-1,]),'ID':([2,9,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,37,38,39,40,41,44,45,47,48,54,56,57,58,59,60,61,70,71,72,75,77,78,79,80,82,83,85,86,87,89,90,98,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,128,129,137,152,154,156,157,162,165,167,170,171,174,175,178,181,182,183,184,185,186,187,192,193,198,199,203,208,209,213,],[3,35,43,46,49,50,51,53,35,35,-47,-48,-49,-50,-51,-52,-53,-54,-55,73,73,35,76,43,-16,46,-22,49,-26,35,-46,73,73,-63,73,97,73,73,73,35,-15,135,138,-21,-25,135,43,135,43,151,-67,35,73,73,-88,-89,-90,-91,-79,-80,-81,-82,-83,-84,-85,73,-94,-95,-96,-97,-98,-99,-100,-101,-102,35,73,73,43,-56,73,73,-114,-71,-17,43,-23,-27,43,135,-62,-68,35,-70,-72,73,-74,-75,-44,135,135,-69,-43,35,135,-73,]),'SEMICOLON':([3,35,50,52,53,55,63,64,65,66,67,68,69,73,91,97,99,102,125,126,130,131,132,133,134,135,139,140,141,142,143,144,145,146,147,149,150,151,153,155,158,159,160,161,163,168,173,190,191,195,196,197,204,205,207,214,215,],[4,59,84,88,-13,-2,-114,-86,-92,-103,-104,-105,-106,-57,152,-59,-76,-78,-108,-109,165,-35,-36,-37,-38,-39,170,-110,-111,-112,-113,171,172,174,-33,176,174,-12,178,-58,-87,-77,-93,-107,184,192,194,-41,203,-32,-34,206,-45,211,212,-40,216,]),'BEGIN':([4,6,7,9,10,11,12,13,14,15,16,23,24,25,26,27,28,29,30,31,32,33,38,40,41,44,45,47,48,54,56,59,75,77,80,82,84,88,90,98,127,152,157,162,165,170,171,172,176,178,181,182,183,184,194,199,206,208,211,212,213,216,],[-114,9,-4,23,-3,-5,-6,-7,-8,-9,-10,23,23,-47,-48,-49,-50,-51,-52,-53,-54,-55,23,-14,-16,-20,-22,-24,-26,23,-46,-63,23,-15,-21,-25,-114,-11,-67,23,23,-56,-114,-71,-17,-23,-27,-28,-114,-62,-68,23,-70,-72,-114,-69,-30,23,-29,-114,-73,-31,]),'VAR':([4,6,7,10,11,12,13,14,15,16,40,41,44,45,47,48,77,80,82,84,88,165,170,171,172,176,194,206,211,212,216,],[-114,17,-4,-3,-5,-6,-7,-8,-9,-10,-14,-16,-20,-22,-24,-26,-15,-21,-25,-114,-11,-17,-23,-27,-28,-114,-114,-30,-29,-114,-31,]),'CONST':([4,6,7,10,11,12,13,14,15,16,40,41,44,45,47,48,77,80,82,84,88,165,170,171,172,176,194,206,211,212,216,],[-114,18,-4,-3,-5,-6,-7,-8,-9,-10,-14,-16,-20,-22,-24,-26,-15,-21,-25,-114,-11,-17,-23,-27,-28,-114,-114,-30,-29,-114,-31,]),'TYPE':([4,6,7,10,11,12,13,14,15,16,40,41,44,45,47,48,77,80,82,84,88,165,170,171,172,176,194,206,211,212,216,],[-114,19,-4,-3,-5,-6,-7,-8,-9,-10,-14,-16,-20,-22,-24,-26,-15,-21,-25,-114,-11,-17,-23,-27,-28,-114,-114,-30,-29,-114,-31,]),'PROCEDURE':([4,6,7,10,11,12,13,14,15,16,40,41,44,45,47,48,77,80,82,84,88,165,170,171,172,176,194,206,211,212,216,],[-114,20,-4,-3,-5,-6,-7,-8,-9,-10,-14,-16,-20,-22,-24,-26,-15,-21,-25,-114,-11,-17,-23,-27,-28,-114,-114,-30,-29,-114,-31,]),'FUNCTION':([4,6,7,10,11,12,13,14,15,16,40,41,44,45,47,48,77,80,82,84,88,165,170,171,172,176,194,206,211,212,216,],[-114,21,-4,-3,-5,-6,-7,-8,-9,-10,-14,-16,-20,-22,-24,-26,-15,-21,-25,-114,-11,-17,-23,-27,-28,-114,-114,-30,-29,-114,-31,]),'USES':([4,6,7,10,11,12,13,14,15,16,40,41,44,45,47,48,77,80,82,84,88,165,170,171,172,176,194,206,211,212,216,],[-114,22,-4,-3,-5,-6,-7,-8,-9,-10,-14,-16,-20,-22,-24,-26,-15,-21,-25,-114,-11,-17,-23,-27,-28,-114,-114,-30,-29,-114,-31,]),'DOT':([5,35,55,73,],[8,61,-2,61,]),'IF':([9,23,24,25,26,27,28,29,30,31,32,33,38,54,56,59,75,90,98,127,152,157,162,178,181,182,183,184,199,208,213,],[36,36,36,-47,-48,-49,-50,-51,-52,-53,-54,-55,36,36,-46,-63,36,-67,36,36,-56,-114,-71,-62,-68,36,-70,-72,-69,36,-73,]),'WHILE':([9,23,24,25,26,27,28,29,30,31,32,33,38,54,56,59,75,90,98,127,152,157,162,178,181,182,183,184,199,208,213,],[37,37,37,-47,-48,-49,-50,-51,-52,-53,-54,-55,37,37,-46,-63,37,-67,37,37,-56,-114,-71,-62,-68,37,-70,-72,-69,37,-73,]),'REPEAT':([9,23,24,25,26,27,28,29,30,31,32,33,38,54,56,59,75,90,98,127,152,157,162,178,181,182,183,184,199,208,213,],[38,38,38,-47,-48,-49,-50,-51,-52,-53,-54,-55,38,38,-46,-63,38,-67,38,38,-56,-114,-71,-62,-68,38,-70,-72,-69,38,-73,]),'FOR':([9,23,24,25,26,27,28,29,30,31,32,33,38,54,56,59,75,90,98,127,152,157,162,178,181,182,183,184,199,208,213,],[39,39,39,-47,-48,-49,-50,-51,-52,-53,-54,-55,39,39,-46,-63,39,-67,39,39,-56,-114,-71,-62,-68,39,-70,-72,-69,39,-73,]),'END':([9,23,24,25,26,27,28,29,30,31,32,33,54,56,59,90,98,127,152,157,162,167,178,181,182,183,184,192,199,203,208,213,],[-114,-114,55,-47,-48,-49,-50,-51,-52,-53,-54,-55,90,-46,-63,-67,-114,-114,-56,-114,-71,190,-62,-68,-114,-70,-72,-44,-69,-43,-114,-73,]),'UNTIL':([25,26,27,28,29,30,31,32,33,38,56,59,75,90,98,127,152,157,162,178,181,182,183,184,199,208,213,],[-47,-48,-49,-50,-51,-52,-53,-54,-55,-114,-46,-63,128,-67,-114,-114,-56,-114,-71,-62,-68,-114,-70,-72,-69,-114,-73,]),'ELSE':([26,27,28,29,30,31,32,33,59,90,98,127,152,157,162,178,181,182,183,184,199,208,213,],[-48,-49,-50,-51,-52,-53,-54,-55,-63,-67,-114,-114,-56,182,-71,-62,-68,-114,-70,-72,-69,-114,-73,]),'ASSIGN':([34,35,76,97,155,],[57,-57,129,-59,-58,]),'LPAREN':([35,36,37,50,51,57,58,60,70,71,72,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,154,156,185,186,187,],[58,70,70,85,87,70,70,70,70,70,70,70,70,-88,-89,-90,-91,-79,-80,-81,-82,-83,-84,-85,70,-94,-95,-96,-97,-98,-99,-100,-101,-102,70,70,70,70,70,-74,-75,]),'LBRACKET':([35,73,136,],[60,60,166,]),'INTEGER_CONST':([36,37,57,58,60,70,71,72,81,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,154,156,166,185,186,187,202,],[67,67,67,67,67,67,67,67,140,67,67,-88,-89,-90,-91,-79,-80,-81,-82,-83,-84,-85,67,-94,-95,-96,-97,-98,-99,-100,-101,-102,67,67,67,67,189,67,-74,-75,210,]),'REAL_CONST':([36,37,57,58,60,70,71,72,81,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,154,156,185,186,187,],[68,68,68,68,68,68,68,68,141,68,68,-88,-89,-90,-91,-79,-80,-81,-82,-83,-84,-85,68,-94,-95,-96,-97,-98,-99,-100,-101,-102,68,68,68,68,68,-74,-75,]),'STRING_LITERAL':([36,37,57,58,60,70,71,72,81,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,154,156,185,186,187,],[69,69,69,69,69,69,69,69,142,69,69,-88,-89,-90,-91,-79,-80,-81,-82,-83,-84,-85,69,-94,-95,-96,-97,-98,-99,-100,-101,-102,69,69,69,69,69,-74,-75,]),'NOT':([36,37,57,58,60,70,71,72,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,154,156,185,186,187,],[71,71,71,71,71,71,71,71,71,71,-88,-89,-90,-91,-79,-80,-81,-82,-83,-84,-85,71,-94,-95,-96,-97,-98,-99,-100,-101,-102,71,71,71,71,71,-74,-75,]),'MINUS':([36,37,57,58,60,63,64,65,66,67,68,69,70,71,72,73,97,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,126,128,129,154,155,156,158,159,160,161,185,186,187,],[72,72,72,72,72,104,-86,-92,-103,-104,-105,-106,72,72,72,-57,-59,72,72,-88,-89,-90,-91,-79,-80,-81,-82,-83,-84,-85,72,-94,-95,-96,-97,-98,-99,-100,-101,-102,-108,-109,72,72,72,-58,72,-87,104,-93,-107,72,-74,-75,]),'COLON':([42,43,51,138,148,169,177,],[78,-19,86,-18,175,193,198,]),'COMMA':([42,43,52,53,58,63,64,65,66,67,68,69,73,92,93,94,95,96,97,99,102,125,126,138,148,151,155,158,159,160,161,169,179,180,],[79,-19,89,-13,-114,-114,-86,-92,-103,-104,-105,-106,-57,154,-65,-66,156,-61,-59,-76,-78,-108,-109,-18,79,-12,-58,-87,-77,-93,-107,79,-64,-60,]),'EQUAL':([46,49,63,64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[81,83,107,-86,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,-87,-93,-107,]),'RPAREN':([58,63,64,65,66,67,68,69,73,92,93,94,97,99,102,124,125,126,131,132,133,134,135,146,147,150,155,158,159,160,161,179,190,195,196,214,],[-114,-114,-86,-92,-103,-104,-105,-106,-57,153,-65,-66,-59,-76,-78,161,-108,-109,-35,-36,-37,-38,-39,173,-33,177,-58,-87,-77,-93,-107,-64,-41,-32,-34,-40,]),'THEN':([62,63,64,65,66,67,68,69,73,97,99,102,125,126,155,158,159,160,161,],[98,-114,-86,-92,-103,-104,-105,-106,-57,-59,-76,-78,-108,-109,-58,-87,-77,-93,-107,]),'PLUS':([63,64,65,66,67,68,69,73,97,125,126,155,158,159,160,161,],[103,-86,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,-87,103,-93,-107,]),'OR':([63,64,65,66,67,68,69,73,97,125,126,155,158,159,160,161,],[105,-86,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,-87,105,-93,-107,]),'XOR':([63,64,65,66,67,68,69,73,97,125,126,155,158,159,160,161,],[106,-86,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,-87,106,-93,-107,]),'NEQUAL':([63,64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[108,-86,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,-87,-93,-107,]),'LT':([63,64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[109,-86,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,-87,-93,-107,]),'LE':([63,64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[110,-86,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,-87,-93,-107,]),'GT':([63,64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[111,-86,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,-87,-93,-107,]),'GE':([63,64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[112,-86,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,-87,-93,-107,]),'IN':([63,64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[113,-86,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,-87,-93,-107,]),'DO':([63,64,65,66,67,68,69,73,74,97,99,102,125,126,155,158,159,160,161,200,],[-114,-86,-92,-103,-104,-105,-106,-57,127,-59,-76,-78,-108,-109,-58,-87,-77,-93,-107,208,]),'RBRACKET':([63,64,65,66,67,68,69,73,95,96,97,99,102,125,126,155,158,159,160,161,180,188,210,],[-114,-86,-92,-103,-104,-105,-106,-57,155,-61,-59,-76,-78,-108,-109,-58,-87,-77,-93,-107,-60,201,-42,]),'TO':([63,64,65,66,67,68,69,73,97,99,102,125,126,155,158,159,160,161,164,],[-114,-86,-92,-103,-104,-105,-106,-57,-59,-76,-78,-108,-109,-58,-87,-77,-93,-107,186,]),'DOWNTO':([63,64,65,66,67,68,69,73,97,99,102,125,126,155,158,159,160,161,164,],[-114,-86,-92,-103,-104,-105,-106,-57,-59,-76,-78,-108,-109,-58,-87,-77,-93,-107,187,]),'TIMES':([64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[115,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,115,-93,-107,]),'DIVIDE':([64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[116,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,116,-93,-107,]),'DIVIDE_INT':([64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[117,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,117,-93,-107,]),'MODULO':([64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[118,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,118,-93,-107,]),'DIV':([64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[119,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,119,-93,-107,]),'MOD':([64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[120,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,120,-93,-107,]),'AND':([64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[121,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,121,-93,-107,]),'SHL':([64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[122,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,122,-93,-107,]),'SHR':([64,65,66,67,68,69,73,97,125,126,155,158,160,161,],[123,-92,-103,-104,-105,-106,-57,-59,-108,-109,-58,123,-93,-107,]),'INTEGER':([78,83,86,175,193,198,209,],[131,131,131,131,131,131,131,]),'REAL':([78,83,86,175,193,198,209,],[132,132,132,132,132,132,132,]),'BOOLEAN':([78,83,86,175,193,198,209,],[133,133,133,133,133,133,133,]),'STRING':([78,83,86,175,193,198,209,],[134,134,134,134,134,134,134,]),'ARRAY':([78,83,86,175,193,198,209,],[136,136,136,136,136,136,136,]),'RECORD':([78,83,86,175,193,198,209,],[137,137,137,137,137,137,137,]),'NIL':([81,],[143,]),'DOTDOT':([189,],[202,]),'OF':([201,],[209,]),}
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

<<<<<<< HEAD
_lr_goto_items = {'program':([0,],[1,]),'block':([4,188,],[5,201,]),'declarations':([4,188,],[6,6,]),'declaration_list':([4,188,],[7,7,]),'empty':([4,20,50,62,64,80,119,137,157,188,192,206,207,],[8,39,39,113,39,143,39,39,193,8,39,39,39,]),'declaration':([4,7,188,],[9,21,9,]),'var_declaration':([4,7,188,],[10,10,10,]),'const_declaration':([4,7,188,],[11,11,11,]),'type_declaration':([4,7,188,],[12,12,12,]),'procedure_declaration':([4,7,188,],[13,13,13,]),'compound_statement':([6,20,50,64,119,137,192,206,207,],[19,40,40,40,40,40,40,40,40,]),'var_declaration_list':([14,],[22,]),'var_decl':([14,22,],[23,53,]),'id_list':([14,22,88,147,],[24,24,149,149,]),'const_list':([15,],[26,]),'const_definition':([15,26,],[27,56,]),'type_list':([16,],[29,]),'type_definition':([16,29,],[30,59,]),'statement_list':([20,50,],[33,77,]),'statement':([20,50,64,119,137,192,206,207,],[34,34,114,157,174,202,209,210,]),'simple_statement':([20,50,64,119,137,192,206,207,],[35,35,35,35,35,35,35,35,]),'structured_statement':([20,50,64,119,137,192,206,207,],[36,36,36,36,36,36,36,36,]),'assignment_statement':([20,50,64,119,137,192,206,207,],[37,37,37,37,37,37,37,37,]),'procedure_call_statement':([20,50,64,119,137,192,206,207,],[38,38,38,38,38,38,38,38,]),'if_statement':([20,50,64,119,137,192,206,207,],[41,41,41,41,41,41,41,41,]),'while_statement':([20,50,64,119,137,192,206,207,],[42,42,42,42,42,42,42,42,]),'repeat_statement':([20,50,64,119,137,192,206,207,],[43,43,43,43,43,43,43,43,]),'for_statement':([20,50,64,119,137,192,206,207,],[44,44,44,44,44,44,44,44,]),'record_assignment':([20,50,64,119,137,192,206,207,],[45,45,45,45,45,45,45,45,]),'variable':([20,48,49,50,64,65,67,69,70,80,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,138,139,156,177,179,192,194,195,206,207,],[46,71,71,46,46,71,71,71,71,71,46,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,46,71,71,71,71,71,46,71,71,46,46,]),'procedure_call':([20,50,64,119,137,192,206,207,],[47,47,47,47,47,47,47,47,]),'expression':([48,49,65,67,69,70,80,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,138,139,156,177,179,194,195,],[68,76,115,118,135,136,142,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,175,176,190,196,197,203,204,]),'type':([54,61,152,185,205,],[81,109,187,200,208,]),'simple_type':([54,61,145,152,185,205,],[82,82,181,82,82,82,]),'array_type':([54,61,152,185,205,],[83,83,83,83,83,]),'record_type':([54,61,152,185,205,],[84,84,84,84,84,]),'subrange_type':([54,61,145,152,185,205,],[85,85,85,85,85,85,]),'type_identifier':([54,61,145,152,185,205,],[86,86,86,86,86,86,]),'constant':([54,58,61,145,150,152,185,205,],[89,107,89,89,186,89,89,89,]),'predefined_type':([54,61,145,152,185,205,],[91,91,91,91,91,91,]),'UNSIGNED_NUMBER':([54,58,61,93,145,150,152,185,205,],[92,92,92,151,92,92,92,92,92,]),'sign':([54,58,61,145,150,152,185,205,],[93,93,93,93,93,93,93,93,]),'constant_identifier':([54,58,61,145,150,152,185,205,],[95,95,95,95,95,95,95,95,]),'param_list':([62,],[111,]),'param':([62,154,],[112,189,]),'expression_list':([67,],[117,]),'args':([80,],[141,]),'record_fields':([88,],[146,]),'field_list':([88,],[147,]),'field_declaration':([88,147,],[148,183,]),'index_type':([145,],[180,]),'else_part':([157,],[191,]),}
=======
_lr_goto_items = {'program':([0,],[1,]),'block':([4,84,176,194,212,],[5,145,197,205,215,]),'declarations':([4,84,176,194,212,],[6,6,6,6,6,]),'empty':([4,9,23,24,38,54,58,63,75,84,98,127,157,176,182,194,208,212,],[7,33,33,33,33,33,94,102,33,7,33,33,183,7,33,7,33,7,]),'declaration':([6,],[10,]),'var_declaration':([6,],[11,]),'const_declaration':([6,],[12,]),'type_declaration':([6,],[13,]),'procedure_declaration':([6,],[14,]),'function_declaration':([6,],[15,]),'uses_clause':([6,],[16,]),'statement_list':([9,23,38,],[24,54,75,]),'statement':([9,23,24,38,54,75,98,127,182,208,],[25,25,56,25,56,56,157,162,199,213,]),'assignment_statement':([9,23,24,38,54,75,98,127,182,208,],[26,26,26,26,26,26,26,26,26,26,]),'procedure_call':([9,23,24,38,54,75,98,127,182,208,],[27,27,27,27,27,27,27,27,27,27,]),'compound_statement':([9,23,24,38,54,75,98,127,182,208,],[28,28,28,28,28,28,28,28,28,28,]),'if_statement':([9,23,24,38,54,75,98,127,182,208,],[29,29,29,29,29,29,29,29,29,29,]),'while_statement':([9,23,24,38,54,75,98,127,182,208,],[30,30,30,30,30,30,30,30,30,30,]),'repeat_statement':([9,23,24,38,54,75,98,127,182,208,],[31,31,31,31,31,31,31,31,31,31,]),'for_statement':([9,23,24,38,54,75,98,127,182,208,],[32,32,32,32,32,32,32,32,32,32,]),'variable':([9,23,24,36,37,38,54,57,58,60,70,71,72,75,98,100,101,114,127,128,129,154,156,182,185,208,],[34,34,34,66,66,34,34,66,66,66,66,66,66,34,34,66,66,66,34,66,66,66,66,34,66,34,]),'var_decl_list':([17,],[40,]),'var_decl':([17,40,],[41,77,]),'id_list':([17,40,85,87,137,167,174,],[42,42,148,148,169,169,148,]),'const_list':([18,],[44,]),'const_decl':([18,44,],[45,80,]),'type_decl_list':([19,],[47,]),'type_decl':([19,47,],[48,82,]),'identifier_list':([22,],[52,]),'expression':([36,37,57,58,60,70,128,129,154,156,185,],[62,74,91,93,96,124,163,164,179,180,200,]),'simple_expression':([36,37,57,58,60,70,101,128,129,154,156,185,],[63,63,63,63,63,63,159,63,63,63,63,63,]),'term':([36,37,57,58,60,70,100,101,128,129,154,156,185,],[64,64,64,64,64,64,158,64,64,64,64,64,64,]),'factor':([36,37,57,58,60,70,71,72,100,101,114,128,129,154,156,185,],[65,65,65,65,65,65,125,126,65,65,160,65,65,65,65,65,]),'args':([58,],[92,]),'expression_list':([60,],[95,]),'relop_opt':([63,],[99,]),'addop':([63,159,],[100,100,]),'relop':([63,],[101,]),'mulop':([64,158,],[114,114,]),'type':([78,83,86,175,193,198,209,],[130,144,149,196,204,207,214,]),'constant':([81,],[139,]),'param_list':([85,87,],[146,150,]),'param':([85,87,174,],[147,147,195,]),'field_list':([137,],[167,]),'field_decl':([137,167,],[168,191,]),'else_part':([157,],[181,]),'direction':([164,],[185,]),'range':([166,],[188,]),}
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
<<<<<<< HEAD
  ('program -> PROGRAM ID SEMICOLON block DOT','program',5,'p_program','minipascal_parser.py',22),
  ('block -> declarations compound_statement','block',2,'p_block','minipascal_parser.py',27),
  ('declarations -> declaration_list','declarations',1,'p_declarations','minipascal_parser.py',32),
  ('declarations -> empty','declarations',1,'p_declarations','minipascal_parser.py',33),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','minipascal_parser.py',37),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','minipascal_parser.py',38),
  ('declaration -> var_declaration','declaration',1,'p_declaration','minipascal_parser.py',42),
  ('declaration -> const_declaration','declaration',1,'p_declaration','minipascal_parser.py',43),
  ('declaration -> type_declaration','declaration',1,'p_declaration','minipascal_parser.py',44),
  ('declaration -> procedure_declaration','declaration',1,'p_declaration','minipascal_parser.py',45),
  ('var_declaration -> VAR var_declaration_list','var_declaration',2,'p_var_declaration','minipascal_parser.py',49),
  ('var_declaration_list -> var_declaration_list var_decl','var_declaration_list',2,'p_var_declaration_list','minipascal_parser.py',53),
  ('var_declaration_list -> var_decl','var_declaration_list',1,'p_var_declaration_list','minipascal_parser.py',54),
  ('var_decl -> id_list COLON type SEMICOLON','var_decl',4,'p_var_decl','minipascal_parser.py',58),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','minipascal_parser.py',62),
  ('id_list -> ID','id_list',1,'p_id_list','minipascal_parser.py',63),
  ('const_declaration -> CONST const_list','const_declaration',2,'p_const_declaration','minipascal_parser.py',67),
  ('const_list -> const_list const_definition SEMICOLON','const_list',3,'p_const_list','minipascal_parser.py',71),
  ('const_list -> const_definition SEMICOLON','const_list',2,'p_const_list','minipascal_parser.py',72),
  ('const_definition -> ID EQUAL constant','const_definition',3,'p_const_definition','minipascal_parser.py',76),
  ('procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block','procedure_declaration',7,'p_procedure_declaration','minipascal_parser.py',80),
  ('param_list -> param_list SEMICOLON param','param_list',3,'p_param_list','minipascal_parser.py',84),
  ('param_list -> param','param_list',1,'p_param_list','minipascal_parser.py',85),
  ('param_list -> empty','param_list',1,'p_param_list','minipascal_parser.py',86),
  ('param -> ID COLON type','param',3,'p_param','minipascal_parser.py',90),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','minipascal_parser.py',95),
  ('type_list -> type_list type_definition SEMICOLON','type_list',3,'p_type_list','minipascal_parser.py',99),
  ('type_list -> type_definition SEMICOLON','type_list',2,'p_type_list','minipascal_parser.py',100),
  ('type_definition -> ID EQUAL type','type_definition',3,'p_type_definition','minipascal_parser.py',104),
  ('type -> simple_type','type',1,'p_type','minipascal_parser.py',109),
  ('type -> array_type','type',1,'p_type','minipascal_parser.py',110),
  ('type -> record_type','type',1,'p_type','minipascal_parser.py',111),
  ('simple_type -> subrange_type','simple_type',1,'p_simple_type','minipascal_parser.py',115),
  ('simple_type -> type_identifier','simple_type',1,'p_simple_type','minipascal_parser.py',116),
  ('subrange_type -> constant DOTDOT constant','subrange_type',3,'p_subrange_type','minipascal_parser.py',120),
  ('array_type -> ARRAY LBRACKET index_type RBRACKET OF type','array_type',6,'p_array_type','minipascal_parser.py',124),
  ('index_type -> simple_type','index_type',1,'p_index_type','minipascal_parser.py',128),
  ('record_type -> RECORD record_fields END','record_type',3,'p_record_type','minipascal_parser.py',132),
  ('record_fields -> field_list','record_fields',1,'p_record_fields','minipascal_parser.py',136),
  ('field_list -> field_list field_declaration SEMICOLON','field_list',3,'p_field_list','minipascal_parser.py',140),
  ('field_list -> field_declaration SEMICOLON','field_list',2,'p_field_list','minipascal_parser.py',141),
  ('field_declaration -> id_list COLON type','field_declaration',3,'p_field_declaration','minipascal_parser.py',145),
  ('type_identifier -> ID','type_identifier',1,'p_type_identifier','minipascal_parser.py',149),
  ('type_identifier -> predefined_type','type_identifier',1,'p_type_identifier','minipascal_parser.py',150),
  ('predefined_type -> INTEGER','predefined_type',1,'p_predefined_type','minipascal_parser.py',155),
  ('predefined_type -> REAL','predefined_type',1,'p_predefined_type','minipascal_parser.py',156),
  ('predefined_type -> BOOLEAN','predefined_type',1,'p_predefined_type','minipascal_parser.py',157),
  ('predefined_type -> STRING','predefined_type',1,'p_predefined_type','minipascal_parser.py',158),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','minipascal_parser.py',162),
  ('statement_list -> statement','statement_list',1,'p_statement_list','minipascal_parser.py',166),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','minipascal_parser.py',167),
  ('statement -> simple_statement','statement',1,'p_statement','minipascal_parser.py',171),
  ('statement -> structured_statement','statement',1,'p_statement','minipascal_parser.py',172),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','minipascal_parser.py',176),
  ('simple_statement -> procedure_call_statement','simple_statement',1,'p_simple_statement','minipascal_parser.py',177),
  ('simple_statement -> empty','simple_statement',1,'p_simple_statement','minipascal_parser.py',178),
  ('structured_statement -> compound_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',182),
  ('structured_statement -> if_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',183),
  ('structured_statement -> while_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',184),
  ('structured_statement -> repeat_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',185),
  ('structured_statement -> for_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',186),
  ('structured_statement -> record_assignment','structured_statement',1,'p_structured_statement','minipascal_parser.py',187),
  ('assignment_statement -> variable ASSIGN expression','assignment_statement',3,'p_assignment_statement','minipascal_parser.py',191),
  ('variable -> ID','variable',1,'p_variable','minipascal_parser.py',195),
  ('variable -> variable DOT ID','variable',3,'p_variable','minipascal_parser.py',196),
  ('variable -> variable LBRACKET expression_list RBRACKET','variable',4,'p_variable','minipascal_parser.py',197),
  ('expression_list -> expression','expression_list',1,'p_expression_list','minipascal_parser.py',201),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','minipascal_parser.py',202),
  ('record_assignment -> ID DOT ID ASSIGN expression','record_assignment',5,'p_record_assignment','minipascal_parser.py',206),
  ('if_statement -> IF expression THEN statement else_part','if_statement',5,'p_if_statement','minipascal_parser.py',210),
  ('else_part -> ELSE statement','else_part',2,'p_else_part','minipascal_parser.py',214),
  ('else_part -> empty','else_part',1,'p_else_part','minipascal_parser.py',215),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','minipascal_parser.py',219),
  ('repeat_statement -> REPEAT statement_list UNTIL expression','repeat_statement',4,'p_repeat_statement','minipascal_parser.py',223),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','minipascal_parser.py',227),
  ('for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','minipascal_parser.py',228),
  ('procedure_call_statement -> procedure_call','procedure_call_statement',1,'p_procedure_call_statement','minipascal_parser.py',232),
  ('procedure_call -> ID LPAREN args RPAREN','procedure_call',4,'p_procedure_call','minipascal_parser.py',236),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','minipascal_parser.py',237),
  ('args -> args COMMA expression','args',3,'p_args','minipascal_parser.py',241),
  ('args -> expression','args',1,'p_args','minipascal_parser.py',242),
  ('args -> empty','args',1,'p_args','minipascal_parser.py',243),
  ('expression -> expression PLUS expression','expression',3,'p_expression','minipascal_parser.py',250),
  ('expression -> expression MINUS expression','expression',3,'p_expression','minipascal_parser.py',251),
  ('expression -> expression TIMES expression','expression',3,'p_expression','minipascal_parser.py',252),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','minipascal_parser.py',253),
  ('expression -> expression DIVIDE_INT expression','expression',3,'p_expression','minipascal_parser.py',254),
  ('expression -> expression MODULO expression','expression',3,'p_expression','minipascal_parser.py',255),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','minipascal_parser.py',256),
  ('expression -> expression NEQUAL expression','expression',3,'p_expression','minipascal_parser.py',257),
  ('expression -> expression LT expression','expression',3,'p_expression','minipascal_parser.py',258),
  ('expression -> expression GT expression','expression',3,'p_expression','minipascal_parser.py',259),
  ('expression -> expression LE expression','expression',3,'p_expression','minipascal_parser.py',260),
  ('expression -> expression GE expression','expression',3,'p_expression','minipascal_parser.py',261),
  ('expression -> expression AND expression','expression',3,'p_expression','minipascal_parser.py',262),
  ('expression -> expression OR expression','expression',3,'p_expression','minipascal_parser.py',263),
  ('expression -> expression XOR expression','expression',3,'p_expression','minipascal_parser.py',264),
  ('expression -> NOT expression','expression',2,'p_expression','minipascal_parser.py',265),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','minipascal_parser.py',266),
  ('expression -> variable','expression',1,'p_expression','minipascal_parser.py',267),
  ('expression -> INTEGER_CONST','expression',1,'p_expression','minipascal_parser.py',268),
  ('expression -> REAL_CONST','expression',1,'p_expression','minipascal_parser.py',269),
  ('expression -> STRING_LITERAL','expression',1,'p_expression','minipascal_parser.py',270),
  ('constant -> UNSIGNED_NUMBER','constant',1,'p_constant','minipascal_parser.py',275),
  ('constant -> sign UNSIGNED_NUMBER','constant',2,'p_constant','minipascal_parser.py',276),
  ('constant -> STRING_LITERAL','constant',1,'p_constant','minipascal_parser.py',277),
  ('constant -> constant_identifier','constant',1,'p_constant','minipascal_parser.py',278),
  ('UNSIGNED_NUMBER -> INTEGER_CONST','UNSIGNED_NUMBER',1,'p_unsigned_number','minipascal_parser.py',282),
  ('UNSIGNED_NUMBER -> REAL_CONST','UNSIGNED_NUMBER',1,'p_unsigned_number','minipascal_parser.py',283),
  ('sign -> PLUS','sign',1,'p_sign','minipascal_parser.py',287),
  ('sign -> MINUS','sign',1,'p_sign','minipascal_parser.py',288),
  ('constant_identifier -> ID','constant_identifier',1,'p_constant_identifier','minipascal_parser.py',292),
  ('empty -> <empty>','empty',0,'p_empty','minipascal_parser.py',297),
=======
  ('program -> PROGRAM ID SEMICOLON block DOT','program',5,'p_program','minipascal_parser.py',23),
  ('block -> declarations BEGIN statement_list END','block',4,'p_block','minipascal_parser.py',28),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','minipascal_parser.py',33),
  ('declarations -> empty','declarations',1,'p_declarations','minipascal_parser.py',34),
  ('declaration -> var_declaration','declaration',1,'p_declaration','minipascal_parser.py',38),
  ('declaration -> const_declaration','declaration',1,'p_declaration','minipascal_parser.py',39),
  ('declaration -> type_declaration','declaration',1,'p_declaration','minipascal_parser.py',40),
  ('declaration -> procedure_declaration','declaration',1,'p_declaration','minipascal_parser.py',41),
  ('declaration -> function_declaration','declaration',1,'p_declaration','minipascal_parser.py',42),
  ('declaration -> uses_clause','declaration',1,'p_declaration','minipascal_parser.py',43),
  ('uses_clause -> USES identifier_list SEMICOLON','uses_clause',3,'p_uses_clause','minipascal_parser.py',47),
  ('identifier_list -> identifier_list COMMA ID','identifier_list',3,'p_identifier_list','minipascal_parser.py',51),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','minipascal_parser.py',52),
  ('var_declaration -> VAR var_decl_list','var_declaration',2,'p_var_declaration','minipascal_parser.py',56),
  ('var_decl_list -> var_decl_list var_decl','var_decl_list',2,'p_var_decl_list','minipascal_parser.py',60),
  ('var_decl_list -> var_decl','var_decl_list',1,'p_var_decl_list','minipascal_parser.py',61),
  ('var_decl -> id_list COLON type SEMICOLON','var_decl',4,'p_var_decl','minipascal_parser.py',65),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','minipascal_parser.py',69),
  ('id_list -> ID','id_list',1,'p_id_list','minipascal_parser.py',70),
  ('const_declaration -> CONST const_list','const_declaration',2,'p_const_declaration','minipascal_parser.py',74),
  ('const_list -> const_list const_decl','const_list',2,'p_const_list','minipascal_parser.py',78),
  ('const_list -> const_decl','const_list',1,'p_const_list','minipascal_parser.py',79),
  ('const_decl -> ID EQUAL constant SEMICOLON','const_decl',4,'p_const_decl','minipascal_parser.py',83),
  ('type_declaration -> TYPE type_decl_list','type_declaration',2,'p_type_declaration','minipascal_parser.py',87),
  ('type_decl_list -> type_decl_list type_decl','type_decl_list',2,'p_type_decl_list','minipascal_parser.py',91),
  ('type_decl_list -> type_decl','type_decl_list',1,'p_type_decl_list','minipascal_parser.py',92),
  ('type_decl -> ID EQUAL type SEMICOLON','type_decl',4,'p_type_decl','minipascal_parser.py',96),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON','procedure_declaration',5,'p_procedure_declaration','minipascal_parser.py',100),
  ('procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block SEMICOLON','procedure_declaration',8,'p_procedure_declaration','minipascal_parser.py',101),
  ('function_declaration -> FUNCTION ID COLON type SEMICOLON block SEMICOLON','function_declaration',7,'p_function_declaration','minipascal_parser.py',105),
  ('function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','minipascal_parser.py',106),
  ('param_list -> param_list SEMICOLON param','param_list',3,'p_param_list','minipascal_parser.py',110),
  ('param_list -> param','param_list',1,'p_param_list','minipascal_parser.py',111),
  ('param -> id_list COLON type','param',3,'p_param','minipascal_parser.py',115),
  ('type -> INTEGER','type',1,'p_type','minipascal_parser.py',119),
  ('type -> REAL','type',1,'p_type','minipascal_parser.py',120),
  ('type -> BOOLEAN','type',1,'p_type','minipascal_parser.py',121),
  ('type -> STRING','type',1,'p_type','minipascal_parser.py',122),
  ('type -> ID','type',1,'p_type','minipascal_parser.py',123),
  ('type -> ARRAY LBRACKET range RBRACKET OF type','type',6,'p_type','minipascal_parser.py',124),
  ('type -> RECORD field_list END','type',3,'p_type','minipascal_parser.py',125),
  ('range -> INTEGER_CONST DOTDOT INTEGER_CONST','range',3,'p_range','minipascal_parser.py',129),
  ('field_list -> field_list field_decl SEMICOLON','field_list',3,'p_field_list','minipascal_parser.py',133),
  ('field_list -> field_decl SEMICOLON','field_list',2,'p_field_list','minipascal_parser.py',134),
  ('field_decl -> id_list COLON type','field_decl',3,'p_field_decl','minipascal_parser.py',138),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','minipascal_parser.py',143),
  ('statement_list -> statement','statement_list',1,'p_statement_list','minipascal_parser.py',144),
  ('statement -> assignment_statement','statement',1,'p_statement','minipascal_parser.py',148),
  ('statement -> procedure_call','statement',1,'p_statement','minipascal_parser.py',149),
  ('statement -> compound_statement','statement',1,'p_statement','minipascal_parser.py',150),
  ('statement -> if_statement','statement',1,'p_statement','minipascal_parser.py',151),
  ('statement -> while_statement','statement',1,'p_statement','minipascal_parser.py',152),
  ('statement -> repeat_statement','statement',1,'p_statement','minipascal_parser.py',153),
  ('statement -> for_statement','statement',1,'p_statement','minipascal_parser.py',154),
  ('statement -> empty','statement',1,'p_statement','minipascal_parser.py',155),
  ('assignment_statement -> variable ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','minipascal_parser.py',159),
  ('variable -> ID','variable',1,'p_variable','minipascal_parser.py',163),
  ('variable -> ID LBRACKET expression_list RBRACKET','variable',4,'p_variable','minipascal_parser.py',164),
  ('variable -> ID DOT ID','variable',3,'p_variable','minipascal_parser.py',165),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','minipascal_parser.py',169),
  ('expression_list -> expression','expression_list',1,'p_expression_list','minipascal_parser.py',170),
  ('procedure_call -> ID LPAREN args RPAREN SEMICOLON','procedure_call',5,'p_procedure_call','minipascal_parser.py',174),
  ('procedure_call -> ID SEMICOLON','procedure_call',2,'p_procedure_call','minipascal_parser.py',175),
  ('args -> args COMMA expression','args',3,'p_args','minipascal_parser.py',179),
  ('args -> expression','args',1,'p_args','minipascal_parser.py',180),
  ('args -> empty','args',1,'p_args','minipascal_parser.py',181),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','minipascal_parser.py',185),
  ('if_statement -> IF expression THEN statement else_part','if_statement',5,'p_if_statement','minipascal_parser.py',189),
  ('else_part -> ELSE statement','else_part',2,'p_else_part','minipascal_parser.py',193),
  ('else_part -> empty','else_part',1,'p_else_part','minipascal_parser.py',194),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','minipascal_parser.py',198),
  ('repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON','repeat_statement',5,'p_repeat_statement','minipascal_parser.py',202),
  ('for_statement -> FOR ID ASSIGN expression direction expression DO statement','for_statement',8,'p_for_statement','minipascal_parser.py',206),
  ('direction -> TO','direction',1,'p_direction','minipascal_parser.py',210),
  ('direction -> DOWNTO','direction',1,'p_direction','minipascal_parser.py',211),
  ('expression -> simple_expression relop_opt','expression',2,'p_expression','minipascal_parser.py',215),
  ('relop_opt -> relop simple_expression','relop_opt',2,'p_relop_opt','minipascal_parser.py',219),
  ('relop_opt -> empty','relop_opt',1,'p_relop_opt','minipascal_parser.py',220),
  ('relop -> EQUAL','relop',1,'p_relop','minipascal_parser.py',224),
  ('relop -> NEQUAL','relop',1,'p_relop','minipascal_parser.py',225),
  ('relop -> LT','relop',1,'p_relop','minipascal_parser.py',226),
  ('relop -> LE','relop',1,'p_relop','minipascal_parser.py',227),
  ('relop -> GT','relop',1,'p_relop','minipascal_parser.py',228),
  ('relop -> GE','relop',1,'p_relop','minipascal_parser.py',229),
  ('relop -> IN','relop',1,'p_relop','minipascal_parser.py',230),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','minipascal_parser.py',234),
  ('simple_expression -> simple_expression addop term','simple_expression',3,'p_simple_expression','minipascal_parser.py',235),
  ('addop -> PLUS','addop',1,'p_addop','minipascal_parser.py',239),
  ('addop -> MINUS','addop',1,'p_addop','minipascal_parser.py',240),
  ('addop -> OR','addop',1,'p_addop','minipascal_parser.py',241),
  ('addop -> XOR','addop',1,'p_addop','minipascal_parser.py',242),
  ('term -> factor','term',1,'p_term','minipascal_parser.py',246),
  ('term -> term mulop factor','term',3,'p_term','minipascal_parser.py',247),
  ('mulop -> TIMES','mulop',1,'p_mulop','minipascal_parser.py',251),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','minipascal_parser.py',252),
  ('mulop -> DIVIDE_INT','mulop',1,'p_mulop','minipascal_parser.py',253),
  ('mulop -> MODULO','mulop',1,'p_mulop','minipascal_parser.py',254),
  ('mulop -> DIV','mulop',1,'p_mulop','minipascal_parser.py',255),
  ('mulop -> MOD','mulop',1,'p_mulop','minipascal_parser.py',256),
  ('mulop -> AND','mulop',1,'p_mulop','minipascal_parser.py',257),
  ('mulop -> SHL','mulop',1,'p_mulop','minipascal_parser.py',258),
  ('mulop -> SHR','mulop',1,'p_mulop','minipascal_parser.py',259),
  ('factor -> variable','factor',1,'p_factor','minipascal_parser.py',263),
  ('factor -> INTEGER_CONST','factor',1,'p_factor','minipascal_parser.py',264),
  ('factor -> REAL_CONST','factor',1,'p_factor','minipascal_parser.py',265),
  ('factor -> STRING_LITERAL','factor',1,'p_factor','minipascal_parser.py',266),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','minipascal_parser.py',267),
  ('factor -> NOT factor','factor',2,'p_factor','minipascal_parser.py',268),
  ('factor -> MINUS factor','factor',2,'p_factor','minipascal_parser.py',269),
  ('constant -> INTEGER_CONST','constant',1,'p_constant','minipascal_parser.py',273),
  ('constant -> REAL_CONST','constant',1,'p_constant','minipascal_parser.py',274),
  ('constant -> STRING_LITERAL','constant',1,'p_constant','minipascal_parser.py',275),
  ('constant -> NIL','constant',1,'p_constant','minipascal_parser.py',276),
  ('empty -> <empty>','empty',0,'p_empty','minipascal_parser.py',281),
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d
]
