
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftORXORleftANDleftSHLSHRnonassocEQUALNEQUALLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEDIVIDE_INTMODULOleftLPARENRPARENrightNOTABSOLUTE AND ARRAY ASM ASSIGN BEGIN BOOLEAN CASE CLASS COLON COMMA CONST CONSTRUCTOR DESTRUCTOR DIVIDE DIVIDE_INT DO DOT DOTDOT DOWNTO ELSE END EQUAL EXTERNAL FILE FOR FORWARD FUNCTION FUNCTION GE GOTO GT ID IF IMPLEMENTATION IN INLINE INTEGER INTEGER_CONST INTERFACE INTERRUPT LABEL LBRACKET LE LPAREN LT MINUS MODULO NEQUAL NIL NOT OBJECT OF OFF OR PACKED PLUS PRIVATE PROCEDURE PROCEDURE PROGRAM RBRACKET REAL REAL_CONST RECORD REPEAT RPAREN SEMICOLON SET SHL SHR STRING STRING_LITERAL THEN TIMES TO TYPE UNIT UNTIL USES VAR VIRTUAL WHILE WITH XORprogram : PROGRAM ID SEMICOLON uses_clause_opt block DOTuses_clause_opt : uses_clause\n                       | emptyunit_list : unit_list COMMA ID\n                 | IDuses_clause : USES unit_list SEMICOLONblock : declarations compound_statementdeclarations : declaration_list\n                    | emptydeclaration_list : declaration_list declaration\n                        | declarationdeclaration : var_declaration\n                   | const_declaration\n                   | type_declaration\n                   | procedure_declaration\n                   | function_declarationvar_declaration : VAR var_declaration_listvar_declaration_list : var_declaration_list var_decl\n                | var_declvar_decl : id_list COLON type SEMICOLONid_list : id_list COMMA ID\n               | IDconst_declaration : CONST const_listconst_list : const_list const_definition SEMICOLON\n                  | const_definition SEMICOLONconst_definition : ID EQUAL constantformal_parameter_list_opt : LPAREN formal_parameter_list RPAREN\n                             | emptyformal_parameter_list : formal_parameter_list SEMICOLON formal_parameter\n                             | formal_parameterformal_parameter : id_list COLON typetype_declaration : TYPE type_listtype_list : type_list type_definition SEMICOLON\n                 | type_definition SEMICOLONtype_definition : ID EQUAL typetype : simple_type\n            | array_type\n            | record_type\n            | class_typeclass_type : CLASS class_body ENDclass_body : class_member_listclass_member_list : class_member_list class_member\n                         | class_memberclass_member : class_variable_declaration\n                    | constructor_declaration\n                    | class_function_declaration\n                    | class_procedure_declarationclass_variable_declaration : ID COLON type SEMICOLONconstructor_declaration : CONSTRUCTOR ID formal_parameter_list_opt SEMICOLONclass_function_declaration : FUNCTION ID formal_parameter_list_opt COLON type SEMICOLONfunction_declaration : FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLONprocedure_declaration : PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLONclass_procedure_declaration : PROCEDURE ID formal_parameter_list_opt SEMICOLONsimple_type : subrange_type\n                   | type_identifiersubrange_type : constant DOTDOT constantarray_type : ARRAY LBRACKET index_type RBRACKET OF typeindex_type : simple_typerecord_type : RECORD record_fields ENDrecord_fields : field_listfield_list : field_list field_declaration SEMICOLON\n                  | field_declaration SEMICOLONfield_declaration : id_list COLON typetype_identifier : ID\n                       | predefined_typepredefined_type : INTEGER\n                       | REAL\n                       | BOOLEAN\n                       | STRINGcompound_statement : BEGIN statement_list ENDstatement_list : statement\n                      | statement_list SEMICOLON statementstatement : simple_statement\n                 | structured_statementsimple_statement : assignment_statement\n                        | procedure_call_statement\n                        | emptyassignment_statement : variable ASSIGN expressionvariable : ID\n                | variable DOT ID\n                | variable LBRACKET expression_list RBRACKETexpression_list : expression\n                       | expression_list COMMA expressionprocedure_call_statement : procedure_callprocedure_call : ID LPAREN args_optional RPARENargs : args COMMA expression\n            | expressionstructured_statement : compound_statement\n                            | if_statement\n                            | while_statement\n                            | repeat_statement\n                            | for_statement\n                            | case_statement\n                            | record_assignmentif_statement : IF expression THEN statement else_partelse_part : ELSE statement\n                 | emptywhile_statement : WHILE expression DO statementrepeat_statement : REPEAT statement_list UNTIL expressionfor_statement : FOR ID ASSIGN expression TO expression DO statement\n                     | FOR ID ASSIGN expression DOWNTO expression DO statementcase_statement : CASE expression OF case_element_list else_clause_optional ENDcase_element_list : case_element_list semicolon_optional case_element\n                         | case_elementcase_element : case_label_list COLON statementcase_label_list : case_label_list COMMA case_label\n                       | case_labelcase_label : constantelse_clause_optional : semicolon_optional ELSE statement semicolon_optional\n                            | emptysemicolon_optional : SEMICOLON\n                          | emptyrecord_assignment : ID DOT ID ASSIGN expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression DIVIDE_INT expression\n                  | expression MODULO expression\n                  | expression SHL expression\n                  | expression SHR expression\n                  | expression EQUAL expression\n                  | expression NEQUAL expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression XOR expression\n                  | NOT expression %prec NOT\n                  | LPAREN expression RPAREN\n                  | function_call\n                  | variable\n                  | INTEGER_CONST\n                  | REAL_CONST\n                  | STRING_LITERALfunction_call : ID LPAREN args_optional RPARENargs_optional : args\n                     | emptyconstant : UNSIGNED_NUMBER\n                | sign UNSIGNED_NUMBER\n                | STRING_LITERAL\n                | constant_identifierUNSIGNED_NUMBER : INTEGER_CONST\n                       | REAL_CONSTsign : PLUS\n            | MINUSconstant_identifier : IDempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,26,],[0,-1,]),'ID':([2,8,19,20,21,22,23,28,30,31,34,37,43,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,65,66,67,68,70,71,73,74,76,80,81,82,83,84,86,87,88,89,90,91,92,93,97,98,108,109,126,129,135,137,138,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,170,171,172,174,178,179,180,181,182,183,185,186,187,188,192,193,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,218,220,221,222,223,224,232,233,235,236,246,247,248,249,250,251,252,255,256,257,258,259,261,268,271,272,273,274,276,277,278,279,280,282,283,287,288,291,],[3,25,33,36,39,40,41,64,33,-19,36,39,79,-73,-74,-75,-76,-77,-88,-89,-90,-91,-92,-93,-94,-84,93,93,64,96,93,-18,111,125,-25,127,-34,111,33,-70,64,93,138,93,93,93,-133,-134,-135,-136,-137,-79,165,93,33,184,-24,-33,111,-78,-80,64,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-131,93,64,93,93,127,-20,111,33,184,-43,-44,-45,-46,-47,237,238,239,127,33,111,-81,93,-150,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,-98,-99,93,-85,93,-150,-104,-62,111,-42,111,-95,64,-97,-138,93,93,-113,127,-112,-111,64,127,-61,-96,-102,-103,64,-105,111,-48,-49,111,-53,64,64,-100,-101,-50,]),'SEMICOLON':([3,24,25,27,28,35,38,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,62,69,72,75,77,79,80,81,88,89,90,91,92,93,95,100,101,102,103,104,105,106,111,112,113,115,116,117,118,119,120,121,122,127,128,130,132,133,136,137,138,141,159,162,175,189,190,191,194,195,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,218,221,223,224,230,231,234,237,239,240,242,243,246,247,248,249,252,258,262,263,264,266,267,268,271,272,273,274,282,283,284,285,286,287,288,],[4,42,-5,-7,-150,70,73,-150,81,-71,-73,-74,-75,-76,-77,-88,-89,-90,-91,-92,-93,-94,-84,-150,126,129,131,-28,-4,-70,-150,-133,-134,-135,-136,-137,-79,81,171,-36,-37,-38,-39,-54,-55,-64,-65,-141,-143,-144,-66,-67,-68,-69,-145,-146,-149,-26,-35,192,-30,-72,-78,-80,-150,-131,-150,232,-142,241,-27,244,-81,-150,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,-98,-99,-85,257,-104,-59,261,-40,-150,-150,-56,-29,-31,-95,-150,-97,-138,-113,-150,-63,277,278,280,281,-96,-102,-103,-150,-105,-150,-150,257,-57,291,-100,-101,]),'USES':([4,],[8,]),'VAR':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,126,129,131,171,241,244,281,],[-150,19,-2,-3,19,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,-24,-33,19,-20,-52,19,-51,]),'CONST':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,126,129,131,171,241,244,281,],[-150,20,-2,-3,20,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,-24,-33,20,-20,-52,20,-51,]),'TYPE':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,126,129,131,171,241,244,281,],[-150,21,-2,-3,21,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,-24,-33,21,-20,-52,21,-51,]),'PROCEDURE':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,109,126,129,131,171,178,179,180,181,182,183,235,241,244,277,278,280,281,291,],[-150,22,-2,-3,22,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,187,-24,-33,22,-20,187,-43,-44,-45,-46,-47,-42,-52,22,-48,-49,-53,-51,-50,]),'FUNCTION':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,109,126,129,131,171,178,179,180,181,182,183,235,241,244,277,278,280,281,291,],[-150,23,-2,-3,23,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,186,-24,-33,23,-20,186,-43,-44,-45,-46,-47,-42,-52,23,-48,-49,-53,-51,-50,]),'BEGIN':([4,5,6,7,10,11,12,13,14,15,16,17,18,28,29,30,31,34,37,42,62,66,70,73,81,126,129,131,141,162,171,241,244,247,258,273,281,282,283,],[-150,-150,-2,-3,28,-8,-9,-11,-12,-13,-14,-15,-16,28,-10,-17,-19,-23,-32,-6,28,-18,-25,-34,28,-24,-33,-150,28,28,-20,-52,-150,28,28,28,-51,28,28,]),'DOT':([9,27,58,64,80,89,93,138,195,],[26,-7,83,97,-70,83,-79,-80,-81,]),'COMMA':([24,25,32,33,79,88,89,90,91,92,93,113,115,116,121,122,125,127,134,138,139,140,159,167,169,176,189,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,225,226,227,245,249,253,275,],[43,-5,68,-22,-4,-133,-134,-135,-136,-137,-79,-141,-143,-144,-145,-146,-21,-149,68,-80,196,-82,-131,222,-87,68,-142,-81,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,259,-107,-108,-83,-138,-86,-106,]),'END':([28,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,80,81,88,89,90,91,92,93,136,137,138,141,159,162,173,174,177,178,179,180,181,182,183,195,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,218,221,223,224,232,235,246,247,248,249,252,254,256,257,258,261,268,271,272,273,274,277,278,280,282,283,284,287,288,289,290,291,],[-150,80,-71,-73,-74,-75,-76,-77,-88,-89,-90,-91,-92,-93,-94,-84,-70,-150,-133,-134,-135,-136,-137,-79,-72,-78,-80,-150,-131,-150,230,-60,234,-41,-43,-44,-45,-46,-47,-81,-150,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,-98,-99,-85,-150,-104,-62,-42,-95,-150,-97,-138,-113,271,-110,-111,-150,-61,-96,-102,-103,-150,-105,-48,-49,-53,-150,-150,-150,-100,-101,-109,-112,-50,]),'IF':([28,62,81,141,162,247,258,273,282,283,],[60,60,60,60,60,60,60,60,60,60,]),'WHILE':([28,62,81,141,162,247,258,273,282,283,],[61,61,61,61,61,61,61,61,61,61,]),'REPEAT':([28,62,81,141,162,247,258,273,282,283,],[62,62,62,62,62,62,62,62,62,62,]),'FOR':([28,62,81,141,162,247,258,273,282,283,],[63,63,63,63,63,63,63,63,63,63,]),'CASE':([28,62,81,141,162,247,258,273,282,283,],[65,65,65,65,65,65,65,65,65,65,]),'COLON':([32,33,41,77,78,113,115,116,121,122,125,127,134,176,184,189,191,225,226,227,238,265,275,],[67,-22,-150,-28,135,-141,-143,-144,-145,-146,-21,-149,193,233,236,-142,-27,258,-107,-108,-150,279,-106,]),'EQUAL':([36,39,85,88,89,90,91,92,93,94,99,137,138,140,159,160,169,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,219,245,249,252,253,269,270,],[71,74,150,-133,-134,-135,-136,-137,-79,150,150,150,-80,150,-131,150,150,-81,-114,-115,-116,-117,-118,-119,150,150,None,None,None,None,None,None,150,150,150,-132,150,150,150,-138,150,150,150,150,]),'LPAREN':([40,41,60,61,64,65,82,84,86,87,93,98,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,161,163,164,196,220,222,237,238,239,250,251,],[76,76,87,87,98,87,87,87,87,87,161,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,76,76,76,87,87,]),'UNTIL':([45,46,47,48,49,50,51,52,53,54,55,56,57,59,62,80,81,88,89,90,91,92,93,95,136,137,138,141,159,162,195,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,218,221,246,247,248,249,252,268,271,282,283,287,288,],[-71,-73,-74,-75,-76,-77,-88,-89,-90,-91,-92,-93,-94,-84,-150,-70,-150,-133,-134,-135,-136,-137,-79,163,-72,-78,-80,-150,-131,-150,-81,-150,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,-98,-99,-85,-95,-150,-97,-138,-113,-96,-102,-150,-150,-100,-101,]),'ELSE':([46,47,48,49,50,51,52,53,54,55,56,57,59,80,88,89,90,91,92,93,137,138,141,159,162,195,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,218,221,223,224,246,247,248,249,252,255,256,257,258,268,271,272,274,282,283,287,288,],[-73,-74,-75,-76,-77,-88,-89,-90,-91,-92,-93,-94,-84,-70,-133,-134,-135,-136,-137,-79,-78,-80,-150,-131,-150,-81,247,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,-98,-99,-85,-150,-104,-95,-150,-97,-138,-113,273,-112,-111,-150,-96,-102,-103,-105,-150,-150,-100,-101,]),'STRING_LITERAL':([46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,65,67,71,74,80,82,84,86,87,88,89,90,91,92,93,98,135,137,138,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,170,172,188,193,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,218,220,221,222,223,224,233,236,246,247,248,249,250,251,252,255,256,257,258,259,268,271,272,274,276,279,282,283,287,288,],[-73,-74,-75,-76,-77,-88,-89,-90,-91,-92,-93,-94,-84,92,92,92,115,115,115,-70,92,92,92,92,-133,-134,-135,-136,-137,-79,92,115,-78,-80,-150,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-131,92,-150,92,92,115,115,115,115,-81,92,-150,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,-98,-99,92,-85,92,-150,-104,115,115,-95,-150,-97,-138,92,92,-113,115,-112,-111,-150,115,-96,-102,-103,-105,115,115,-150,-150,-100,-101,]),'INTEGER_CONST':([46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,65,67,71,74,80,82,84,86,87,88,89,90,91,92,93,98,114,123,124,135,137,138,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,170,172,188,193,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,218,220,221,222,223,224,233,236,246,247,248,249,250,251,252,255,256,257,258,259,268,271,272,274,276,279,282,283,287,288,],[-73,-74,-75,-76,-77,-88,-89,-90,-91,-92,-93,-94,-84,90,90,90,121,121,121,-70,90,90,90,90,-133,-134,-135,-136,-137,-79,90,121,-147,-148,121,-78,-80,-150,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-131,90,-150,90,90,121,121,121,121,-81,90,-150,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,-98,-99,90,-85,90,-150,-104,121,121,-95,-150,-97,-138,90,90,-113,121,-112,-111,-150,121,-96,-102,-103,-105,121,121,-150,-150,-100,-101,]),'REAL_CONST':([46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,65,67,71,74,80,82,84,86,87,88,89,90,91,92,93,98,114,123,124,135,137,138,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,170,172,188,193,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,218,220,221,222,223,224,233,236,246,247,248,249,250,251,252,255,256,257,258,259,268,271,272,274,276,279,282,283,287,288,],[-73,-74,-75,-76,-77,-88,-89,-90,-91,-92,-93,-94,-84,91,91,91,122,122,122,-70,91,91,91,91,-133,-134,-135,-136,-137,-79,91,122,-147,-148,122,-78,-80,-150,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-131,91,-150,91,91,122,122,122,122,-81,91,-150,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,-98,-99,91,-85,91,-150,-104,122,122,-95,-150,-97,-138,91,91,-113,122,-112,-111,-150,122,-96,-102,-103,-105,122,122,-150,-150,-100,-101,]),'PLUS':([46,47,48,49,50,51,52,53,54,55,56,57,59,67,71,74,80,85,88,89,90,91,92,93,94,99,135,137,138,140,141,159,160,162,169,170,172,188,193,195,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,218,219,221,223,224,233,236,245,246,247,248,249,252,253,255,256,257,258,259,268,269,270,271,272,274,276,279,282,283,287,288,],[-73,-74,-75,-76,-77,-88,-89,-90,-91,-92,-93,-94,-84,123,123,123,-70,142,-133,-134,-135,-136,-137,-79,142,142,123,142,-80,142,-150,-131,142,-150,142,123,123,123,123,-81,-150,-114,-115,-116,-117,-118,-119,142,142,142,142,142,142,142,142,142,142,142,-132,-98,142,142,-85,-150,-104,123,123,142,-95,-150,-97,-138,142,142,123,-112,-111,-150,123,-96,142,142,-102,-103,-105,123,123,-150,-150,-100,-101,]),'MINUS':([46,47,48,49,50,51,52,53,54,55,56,57,59,67,71,74,80,85,88,89,90,91,92,93,94,99,135,137,138,140,141,159,160,162,169,170,172,188,193,195,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,218,219,221,223,224,233,236,245,246,247,248,249,252,253,255,256,257,258,259,268,269,270,271,272,274,276,279,282,283,287,288,],[-73,-74,-75,-76,-77,-88,-89,-90,-91,-92,-93,-94,-84,124,124,124,-70,143,-133,-134,-135,-136,-137,-79,143,143,124,143,-80,143,-150,-131,143,-150,143,124,124,124,124,-81,-150,-114,-115,-116,-117,-118,-119,143,143,143,143,143,143,143,143,143,143,143,-132,-98,143,143,-85,-150,-104,124,124,143,-95,-150,-97,-138,143,143,124,-112,-111,-150,124,-96,143,143,-102,-103,-105,124,124,-150,-150,-100,-101,]),'ASSIGN':([58,64,96,138,165,195,],[82,-79,164,-80,220,-81,]),'LBRACKET':([58,64,89,93,107,138,195,],[84,-79,84,-79,172,-80,-81,]),'NOT':([60,61,65,82,84,86,87,98,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,161,163,164,196,220,222,250,251,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'ARRAY':([67,74,135,193,233,236,276,279,],[107,107,107,107,107,107,107,107,]),'RECORD':([67,74,135,193,233,236,276,279,],[108,108,108,108,108,108,108,108,]),'CLASS':([67,74,135,193,233,236,276,279,],[109,109,109,109,109,109,109,109,]),'INTEGER':([67,74,135,172,193,233,236,276,279,],[117,117,117,117,117,117,117,117,117,]),'REAL':([67,74,135,172,193,233,236,276,279,],[118,118,118,118,118,118,118,118,118,]),'BOOLEAN':([67,74,135,172,193,233,236,276,279,],[119,119,119,119,119,119,119,119,119,]),'STRING':([67,74,135,172,193,233,236,276,279,],[120,120,120,120,120,120,120,120,120,]),'THEN':([85,88,89,90,91,92,93,138,159,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,249,],[141,-133,-134,-135,-136,-137,-79,-80,-131,-81,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,-138,]),'TIMES':([85,88,89,90,91,92,93,94,99,137,138,140,159,160,169,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,219,245,249,252,253,269,270,],[144,-133,-134,-135,-136,-137,-79,144,144,144,-80,144,-131,144,144,-81,144,144,-116,-117,-118,-119,144,144,144,144,144,144,144,144,144,144,144,-132,144,144,144,-138,144,144,144,144,]),'DIVIDE':([85,88,89,90,91,92,93,94,99,137,138,140,159,160,169,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,219,245,249,252,253,269,270,],[145,-133,-134,-135,-136,-137,-79,145,145,145,-80,145,-131,145,145,-81,145,145,-116,-117,-118,-119,145,145,145,145,145,145,145,145,145,145,145,-132,145,145,145,-138,145,145,145,145,]),'DIVIDE_INT':([85,88,89,90,91,92,93,94,99,137,138,140,159,160,169,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,219,245,249,252,253,269,270,],[146,-133,-134,-135,-136,-137,-79,146,146,146,-80,146,-131,146,146,-81,146,146,-116,-117,-118,-119,146,146,146,146,146,146,146,146,146,146,146,-132,146,146,146,-138,146,146,146,146,]),'MODULO':([85,88,89,90,91,92,93,94,99,137,138,140,159,160,169,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,219,245,249,252,253,269,270,],[147,-133,-134,-135,-136,-137,-79,147,147,147,-80,147,-131,147,147,-81,147,147,-116,-117,-118,-119,147,147,147,147,147,147,147,147,147,147,147,-132,147,147,147,-138,147,147,147,147,]),'SHL':([85,88,89,90,91,92,93,94,99,137,138,140,159,160,169,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,219,245,249,252,253,269,270,],[148,-133,-134,-135,-136,-137,-79,148,148,148,-80,148,-131,148,148,-81,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,148,148,148,-132,148,148,148,-138,148,148,148,148,]),'SHR':([85,88,89,90,91,92,93,94,99,137,138,140,159,160,169,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,219,245,249,252,253,269,270,],[149,-133,-134,-135,-136,-137,-79,149,149,149,-80,149,-131,149,149,-81,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,149,149,149,-132,149,149,149,-138,149,149,149,149,]),'NEQUAL':([85,88,89,90,91,92,93,94,99,137,138,140,159,160,169,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,219,245,249,252,253,269,270,],[151,-133,-134,-135,-136,-137,-79,151,151,151,-80,151,-131,151,151,-81,-114,-115,-116,-117,-118,-119,151,151,None,None,None,None,None,None,151,151,151,-132,151,151,151,-138,151,151,151,151,]),'LT':([85,88,89,90,91,92,93,94,99,137,138,140,159,160,169,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,219,245,249,252,253,269,270,],[152,-133,-134,-135,-136,-137,-79,152,152,152,-80,152,-131,152,152,-81,-114,-115,-116,-117,-118,-119,152,152,None,None,None,None,None,None,152,152,152,-132,152,152,152,-138,152,152,152,152,]),'GT':([85,88,89,90,91,92,93,94,99,137,138,140,159,160,169,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,219,245,249,252,253,269,270,],[153,-133,-134,-135,-136,-137,-79,153,153,153,-80,153,-131,153,153,-81,-114,-115,-116,-117,-118,-119,153,153,None,None,None,None,None,None,153,153,153,-132,153,153,153,-138,153,153,153,153,]),'LE':([85,88,89,90,91,92,93,94,99,137,138,140,159,160,169,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,219,245,249,252,253,269,270,],[154,-133,-134,-135,-136,-137,-79,154,154,154,-80,154,-131,154,154,-81,-114,-115,-116,-117,-118,-119,154,154,None,None,None,None,None,None,154,154,154,-132,154,154,154,-138,154,154,154,154,]),'GE':([85,88,89,90,91,92,93,94,99,137,138,140,159,160,169,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,219,245,249,252,253,269,270,],[155,-133,-134,-135,-136,-137,-79,155,155,155,-80,155,-131,155,155,-81,-114,-115,-116,-117,-118,-119,155,155,None,None,None,None,None,None,155,155,155,-132,155,155,155,-138,155,155,155,155,]),'AND':([85,88,89,90,91,92,93,94,99,137,138,140,159,160,169,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,219,245,249,252,253,269,270,],[156,-133,-134,-135,-136,-137,-79,156,156,156,-80,156,-131,156,156,-81,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,156,156,-132,156,156,156,-138,156,156,156,156,]),'OR':([85,88,89,90,91,92,93,94,99,137,138,140,159,160,169,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,219,245,249,252,253,269,270,],[157,-133,-134,-135,-136,-137,-79,157,157,157,-80,157,-131,157,157,-81,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,157,157,157,-138,157,157,157,157,]),'XOR':([85,88,89,90,91,92,93,94,99,137,138,140,159,160,169,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,219,245,249,252,253,269,270,],[158,-133,-134,-135,-136,-137,-79,158,158,158,-80,158,-131,158,158,-81,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,158,158,158,-138,158,158,158,158,]),'DO':([88,89,90,91,92,93,94,138,159,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,249,269,270,],[-133,-134,-135,-136,-137,-79,162,-80,-131,-81,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,-138,282,283,]),'OF':([88,89,90,91,92,93,99,138,159,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,249,260,],[-133,-134,-135,-136,-137,-79,170,-80,-131,-81,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,-138,276,]),'RBRACKET':([88,89,90,91,92,93,105,106,111,112,113,115,116,117,118,119,120,121,122,127,138,139,140,159,189,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,228,229,240,245,249,],[-133,-134,-135,-136,-137,-79,-54,-55,-64,-65,-141,-143,-144,-66,-67,-68,-69,-145,-146,-149,-80,195,-82,-131,-142,-81,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,260,-58,-56,-83,-138,]),'RPAREN':([88,89,90,91,92,93,98,101,102,103,104,105,106,111,112,113,115,116,117,118,119,120,121,122,127,132,133,138,159,160,161,166,167,168,169,189,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,230,234,240,242,243,249,253,285,],[-133,-134,-135,-136,-137,-79,-150,-36,-37,-38,-39,-54,-55,-64,-65,-141,-143,-144,-66,-67,-68,-69,-145,-146,-149,191,-30,-80,-131,215,-150,221,-139,-140,-87,-142,-81,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,249,-59,-40,-56,-29,-31,-138,-86,-57,]),'TO':([88,89,90,91,92,93,138,159,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,219,249,],[-133,-134,-135,-136,-137,-79,-80,-131,-81,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,250,-138,]),'DOWNTO':([88,89,90,91,92,93,138,159,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,219,249,],[-133,-134,-135,-136,-137,-79,-80,-131,-81,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-132,251,-138,]),'CONSTRUCTOR':([109,178,179,180,181,182,183,235,277,278,280,291,],[185,185,-43,-44,-45,-46,-47,-42,-48,-49,-53,-50,]),'DOTDOT':([110,111,113,115,116,121,122,189,],[188,-149,-141,-143,-144,-145,-146,-142,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'uses_clause_opt':([4,],[5,]),'uses_clause':([4,],[6,]),'empty':([4,5,28,40,41,62,81,98,131,141,161,162,197,223,237,238,239,244,247,258,273,282,283,284,],[7,12,50,77,77,50,50,168,12,50,168,50,248,256,77,77,77,12,50,50,50,50,50,290,]),'block':([5,131,244,],[9,190,267,]),'declarations':([5,131,244,],[10,10,10,]),'declaration_list':([5,131,244,],[11,11,11,]),'declaration':([5,11,131,244,],[13,29,13,13,]),'var_declaration':([5,11,131,244,],[14,14,14,14,]),'const_declaration':([5,11,131,244,],[15,15,15,15,]),'type_declaration':([5,11,131,244,],[16,16,16,16,]),'procedure_declaration':([5,11,131,244,],[17,17,17,17,]),'function_declaration':([5,11,131,244,],[18,18,18,18,]),'unit_list':([8,],[24,]),'compound_statement':([10,28,62,81,141,162,247,258,273,282,283,],[27,51,51,51,51,51,51,51,51,51,51,]),'var_declaration_list':([19,],[30,]),'var_decl':([19,30,],[31,66,]),'id_list':([19,30,76,108,174,192,],[32,32,134,176,176,134,]),'const_list':([20,],[34,]),'const_definition':([20,34,],[35,69,]),'type_list':([21,],[37,]),'type_definition':([21,37,],[38,72,]),'statement_list':([28,62,],[44,95,]),'statement':([28,62,81,141,162,247,258,273,282,283,],[45,45,136,197,217,268,274,284,287,288,]),'simple_statement':([28,62,81,141,162,247,258,273,282,283,],[46,46,46,46,46,46,46,46,46,46,]),'structured_statement':([28,62,81,141,162,247,258,273,282,283,],[47,47,47,47,47,47,47,47,47,47,]),'assignment_statement':([28,62,81,141,162,247,258,273,282,283,],[48,48,48,48,48,48,48,48,48,48,]),'procedure_call_statement':([28,62,81,141,162,247,258,273,282,283,],[49,49,49,49,49,49,49,49,49,49,]),'if_statement':([28,62,81,141,162,247,258,273,282,283,],[52,52,52,52,52,52,52,52,52,52,]),'while_statement':([28,62,81,141,162,247,258,273,282,283,],[53,53,53,53,53,53,53,53,53,53,]),'repeat_statement':([28,62,81,141,162,247,258,273,282,283,],[54,54,54,54,54,54,54,54,54,54,]),'for_statement':([28,62,81,141,162,247,258,273,282,283,],[55,55,55,55,55,55,55,55,55,55,]),'case_statement':([28,62,81,141,162,247,258,273,282,283,],[56,56,56,56,56,56,56,56,56,56,]),'record_assignment':([28,62,81,141,162,247,258,273,282,283,],[57,57,57,57,57,57,57,57,57,57,]),'variable':([28,60,61,62,65,81,82,84,86,87,98,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,196,220,222,247,250,251,258,273,282,283,],[58,89,89,58,89,58,89,89,89,89,89,58,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,58,89,89,89,89,89,58,89,89,58,58,58,58,]),'procedure_call':([28,62,81,141,162,247,258,273,282,283,],[59,59,59,59,59,59,59,59,59,59,]),'formal_parameter_list_opt':([40,41,237,238,239,],[75,78,264,265,266,]),'expression':([60,61,65,82,84,86,87,98,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,161,163,164,196,220,222,250,251,],[85,94,99,137,140,159,160,169,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,169,218,219,245,252,253,269,270,]),'function_call':([60,61,65,82,84,86,87,98,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,161,163,164,196,220,222,250,251,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'type':([67,74,135,193,233,236,276,279,],[100,130,194,243,262,263,285,286,]),'simple_type':([67,74,135,172,193,233,236,276,279,],[101,101,101,229,101,101,101,101,101,]),'array_type':([67,74,135,193,233,236,276,279,],[102,102,102,102,102,102,102,102,]),'record_type':([67,74,135,193,233,236,276,279,],[103,103,103,103,103,103,103,103,]),'class_type':([67,74,135,193,233,236,276,279,],[104,104,104,104,104,104,104,104,]),'subrange_type':([67,74,135,172,193,233,236,276,279,],[105,105,105,105,105,105,105,105,105,]),'type_identifier':([67,74,135,172,193,233,236,276,279,],[106,106,106,106,106,106,106,106,106,]),'constant':([67,71,74,135,170,172,188,193,233,236,255,259,276,279,],[110,128,110,110,227,110,240,110,110,110,227,227,110,110,]),'predefined_type':([67,74,135,172,193,233,236,276,279,],[112,112,112,112,112,112,112,112,112,]),'UNSIGNED_NUMBER':([67,71,74,114,135,170,172,188,193,233,236,255,259,276,279,],[113,113,113,189,113,113,113,113,113,113,113,113,113,113,113,]),'sign':([67,71,74,135,170,172,188,193,233,236,255,259,276,279,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'constant_identifier':([67,71,74,135,170,172,188,193,233,236,255,259,276,279,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'formal_parameter_list':([76,],[132,]),'formal_parameter':([76,192,],[133,242,]),'expression_list':([84,],[139,]),'args_optional':([98,161,],[166,216,]),'args':([98,161,],[167,167,]),'record_fields':([108,],[173,]),'field_list':([108,],[174,]),'field_declaration':([108,174,],[175,231,]),'class_body':([109,],[177,]),'class_member_list':([109,],[178,]),'class_member':([109,178,],[179,235,]),'class_variable_declaration':([109,178,],[180,180,]),'constructor_declaration':([109,178,],[181,181,]),'class_function_declaration':([109,178,],[182,182,]),'class_procedure_declaration':([109,178,],[183,183,]),'case_element_list':([170,],[223,]),'case_element':([170,255,],[224,272,]),'case_label_list':([170,255,],[225,225,]),'case_label':([170,255,259,],[226,226,275,]),'index_type':([172,],[228,]),'else_part':([197,],[246,]),'else_clause_optional':([223,],[254,]),'semicolon_optional':([223,284,],[255,289,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON uses_clause_opt block DOT','program',6,'p_program','minipascal_parser.py',23),
  ('uses_clause_opt -> uses_clause','uses_clause_opt',1,'p_uses_clause_opt','minipascal_parser.py',27),
  ('uses_clause_opt -> empty','uses_clause_opt',1,'p_uses_clause_opt','minipascal_parser.py',28),
  ('unit_list -> unit_list COMMA ID','unit_list',3,'p_unit_list','minipascal_parser.py',33),
  ('unit_list -> ID','unit_list',1,'p_unit_list','minipascal_parser.py',34),
  ('uses_clause -> USES unit_list SEMICOLON','uses_clause',3,'p_uses_clause','minipascal_parser.py',38),
  ('block -> declarations compound_statement','block',2,'p_block','minipascal_parser.py',43),
  ('declarations -> declaration_list','declarations',1,'p_declarations','minipascal_parser.py',48),
  ('declarations -> empty','declarations',1,'p_declarations','minipascal_parser.py',49),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','minipascal_parser.py',53),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','minipascal_parser.py',54),
  ('declaration -> var_declaration','declaration',1,'p_declaration','minipascal_parser.py',58),
  ('declaration -> const_declaration','declaration',1,'p_declaration','minipascal_parser.py',59),
  ('declaration -> type_declaration','declaration',1,'p_declaration','minipascal_parser.py',60),
  ('declaration -> procedure_declaration','declaration',1,'p_declaration','minipascal_parser.py',61),
  ('declaration -> function_declaration','declaration',1,'p_declaration','minipascal_parser.py',62),
  ('var_declaration -> VAR var_declaration_list','var_declaration',2,'p_var_declaration','minipascal_parser.py',66),
  ('var_declaration_list -> var_declaration_list var_decl','var_declaration_list',2,'p_var_declaration_list','minipascal_parser.py',70),
  ('var_declaration_list -> var_decl','var_declaration_list',1,'p_var_declaration_list','minipascal_parser.py',71),
  ('var_decl -> id_list COLON type SEMICOLON','var_decl',4,'p_var_decl','minipascal_parser.py',75),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','minipascal_parser.py',79),
  ('id_list -> ID','id_list',1,'p_id_list','minipascal_parser.py',80),
  ('const_declaration -> CONST const_list','const_declaration',2,'p_const_declaration','minipascal_parser.py',84),
  ('const_list -> const_list const_definition SEMICOLON','const_list',3,'p_const_list','minipascal_parser.py',88),
  ('const_list -> const_definition SEMICOLON','const_list',2,'p_const_list','minipascal_parser.py',89),
  ('const_definition -> ID EQUAL constant','const_definition',3,'p_const_definition','minipascal_parser.py',93),
  ('formal_parameter_list_opt -> LPAREN formal_parameter_list RPAREN','formal_parameter_list_opt',3,'p_formal_parameter_list_opt','minipascal_parser.py',105),
  ('formal_parameter_list_opt -> empty','formal_parameter_list_opt',1,'p_formal_parameter_list_opt','minipascal_parser.py',106),
  ('formal_parameter_list -> formal_parameter_list SEMICOLON formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','minipascal_parser.py',110),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','minipascal_parser.py',111),
  ('formal_parameter -> id_list COLON type','formal_parameter',3,'p_formal_parameter','minipascal_parser.py',115),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','minipascal_parser.py',120),
  ('type_list -> type_list type_definition SEMICOLON','type_list',3,'p_type_list','minipascal_parser.py',124),
  ('type_list -> type_definition SEMICOLON','type_list',2,'p_type_list','minipascal_parser.py',125),
  ('type_definition -> ID EQUAL type','type_definition',3,'p_type_definition','minipascal_parser.py',129),
  ('type -> simple_type','type',1,'p_type','minipascal_parser.py',134),
  ('type -> array_type','type',1,'p_type','minipascal_parser.py',135),
  ('type -> record_type','type',1,'p_type','minipascal_parser.py',136),
  ('type -> class_type','type',1,'p_type','minipascal_parser.py',137),
  ('class_type -> CLASS class_body END','class_type',3,'p_class_type','minipascal_parser.py',141),
  ('class_body -> class_member_list','class_body',1,'p_class_body','minipascal_parser.py',145),
  ('class_member_list -> class_member_list class_member','class_member_list',2,'p_class_member_list','minipascal_parser.py',149),
  ('class_member_list -> class_member','class_member_list',1,'p_class_member_list','minipascal_parser.py',150),
  ('class_member -> class_variable_declaration','class_member',1,'p_class_member','minipascal_parser.py',153),
  ('class_member -> constructor_declaration','class_member',1,'p_class_member','minipascal_parser.py',154),
  ('class_member -> class_function_declaration','class_member',1,'p_class_member','minipascal_parser.py',155),
  ('class_member -> class_procedure_declaration','class_member',1,'p_class_member','minipascal_parser.py',156),
  ('class_variable_declaration -> ID COLON type SEMICOLON','class_variable_declaration',4,'p_class_variable_declaration','minipascal_parser.py',160),
  ('constructor_declaration -> CONSTRUCTOR ID formal_parameter_list_opt SEMICOLON','constructor_declaration',4,'p_constructor_declaration','minipascal_parser.py',164),
  ('class_function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON','class_function_declaration',6,'p_class_function_declaration','minipascal_parser.py',167),
  ('function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON','function_declaration',8,'p_function_declaration','minipascal_parser.py',170),
  ('procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON','procedure_declaration',6,'p_procedure_declaration','minipascal_parser.py',174),
  ('class_procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON','class_procedure_declaration',4,'p_class_procedure_declaration','minipascal_parser.py',179),
  ('simple_type -> subrange_type','simple_type',1,'p_simple_type','minipascal_parser.py',184),
  ('simple_type -> type_identifier','simple_type',1,'p_simple_type','minipascal_parser.py',185),
  ('subrange_type -> constant DOTDOT constant','subrange_type',3,'p_subrange_type','minipascal_parser.py',189),
  ('array_type -> ARRAY LBRACKET index_type RBRACKET OF type','array_type',6,'p_array_type','minipascal_parser.py',193),
  ('index_type -> simple_type','index_type',1,'p_index_type','minipascal_parser.py',197),
  ('record_type -> RECORD record_fields END','record_type',3,'p_record_type','minipascal_parser.py',201),
  ('record_fields -> field_list','record_fields',1,'p_record_fields','minipascal_parser.py',205),
  ('field_list -> field_list field_declaration SEMICOLON','field_list',3,'p_field_list','minipascal_parser.py',209),
  ('field_list -> field_declaration SEMICOLON','field_list',2,'p_field_list','minipascal_parser.py',210),
  ('field_declaration -> id_list COLON type','field_declaration',3,'p_field_declaration','minipascal_parser.py',214),
  ('type_identifier -> ID','type_identifier',1,'p_type_identifier','minipascal_parser.py',218),
  ('type_identifier -> predefined_type','type_identifier',1,'p_type_identifier','minipascal_parser.py',219),
  ('predefined_type -> INTEGER','predefined_type',1,'p_predefined_type','minipascal_parser.py',223),
  ('predefined_type -> REAL','predefined_type',1,'p_predefined_type','minipascal_parser.py',224),
  ('predefined_type -> BOOLEAN','predefined_type',1,'p_predefined_type','minipascal_parser.py',225),
  ('predefined_type -> STRING','predefined_type',1,'p_predefined_type','minipascal_parser.py',226),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','minipascal_parser.py',231),
  ('statement_list -> statement','statement_list',1,'p_statement_list','minipascal_parser.py',235),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','minipascal_parser.py',236),
  ('statement -> simple_statement','statement',1,'p_statement','minipascal_parser.py',240),
  ('statement -> structured_statement','statement',1,'p_statement','minipascal_parser.py',241),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','minipascal_parser.py',245),
  ('simple_statement -> procedure_call_statement','simple_statement',1,'p_simple_statement','minipascal_parser.py',246),
  ('simple_statement -> empty','simple_statement',1,'p_simple_statement','minipascal_parser.py',247),
  ('assignment_statement -> variable ASSIGN expression','assignment_statement',3,'p_assignment_statement','minipascal_parser.py',251),
  ('variable -> ID','variable',1,'p_variable','minipascal_parser.py',255),
  ('variable -> variable DOT ID','variable',3,'p_variable','minipascal_parser.py',256),
  ('variable -> variable LBRACKET expression_list RBRACKET','variable',4,'p_variable','minipascal_parser.py',257),
  ('expression_list -> expression','expression_list',1,'p_expression_list','minipascal_parser.py',261),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','minipascal_parser.py',262),
  ('procedure_call_statement -> procedure_call','procedure_call_statement',1,'p_procedure_call_statement','minipascal_parser.py',266),
  ('procedure_call -> ID LPAREN args_optional RPAREN','procedure_call',4,'p_procedure_call','minipascal_parser.py',270),
  ('args -> args COMMA expression','args',3,'p_args','minipascal_parser.py',274),
  ('args -> expression','args',1,'p_args','minipascal_parser.py',275),
  ('structured_statement -> compound_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',279),
  ('structured_statement -> if_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',280),
  ('structured_statement -> while_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',281),
  ('structured_statement -> repeat_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',282),
  ('structured_statement -> for_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',283),
  ('structured_statement -> case_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',284),
  ('structured_statement -> record_assignment','structured_statement',1,'p_structured_statement','minipascal_parser.py',285),
  ('if_statement -> IF expression THEN statement else_part','if_statement',5,'p_if_statement','minipascal_parser.py',289),
  ('else_part -> ELSE statement','else_part',2,'p_else_part','minipascal_parser.py',293),
  ('else_part -> empty','else_part',1,'p_else_part','minipascal_parser.py',294),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','minipascal_parser.py',298),
  ('repeat_statement -> REPEAT statement_list UNTIL expression','repeat_statement',4,'p_repeat_statement','minipascal_parser.py',302),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','minipascal_parser.py',306),
  ('for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','minipascal_parser.py',307),
  ('case_statement -> CASE expression OF case_element_list else_clause_optional END','case_statement',6,'p_case_statement','minipascal_parser.py',311),
  ('case_element_list -> case_element_list semicolon_optional case_element','case_element_list',3,'p_case_element_list','minipascal_parser.py',315),
  ('case_element_list -> case_element','case_element_list',1,'p_case_element_list','minipascal_parser.py',316),
  ('case_element -> case_label_list COLON statement','case_element',3,'p_case_element','minipascal_parser.py',320),
  ('case_label_list -> case_label_list COMMA case_label','case_label_list',3,'p_case_label_list','minipascal_parser.py',324),
  ('case_label_list -> case_label','case_label_list',1,'p_case_label_list','minipascal_parser.py',325),
  ('case_label -> constant','case_label',1,'p_case_label','minipascal_parser.py',329),
  ('else_clause_optional -> semicolon_optional ELSE statement semicolon_optional','else_clause_optional',4,'p_else_clause_optional','minipascal_parser.py',333),
  ('else_clause_optional -> empty','else_clause_optional',1,'p_else_clause_optional','minipascal_parser.py',334),
  ('semicolon_optional -> SEMICOLON','semicolon_optional',1,'p_semicolon_optional','minipascal_parser.py',338),
  ('semicolon_optional -> empty','semicolon_optional',1,'p_semicolon_optional','minipascal_parser.py',339),
  ('record_assignment -> ID DOT ID ASSIGN expression','record_assignment',5,'p_record_assignment','minipascal_parser.py',343),
  ('expression -> expression PLUS expression','expression',3,'p_expression','minipascal_parser.py',349),
  ('expression -> expression MINUS expression','expression',3,'p_expression','minipascal_parser.py',350),
  ('expression -> expression TIMES expression','expression',3,'p_expression','minipascal_parser.py',351),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','minipascal_parser.py',352),
  ('expression -> expression DIVIDE_INT expression','expression',3,'p_expression','minipascal_parser.py',353),
  ('expression -> expression MODULO expression','expression',3,'p_expression','minipascal_parser.py',354),
  ('expression -> expression SHL expression','expression',3,'p_expression','minipascal_parser.py',355),
  ('expression -> expression SHR expression','expression',3,'p_expression','minipascal_parser.py',356),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','minipascal_parser.py',357),
  ('expression -> expression NEQUAL expression','expression',3,'p_expression','minipascal_parser.py',358),
  ('expression -> expression LT expression','expression',3,'p_expression','minipascal_parser.py',359),
  ('expression -> expression GT expression','expression',3,'p_expression','minipascal_parser.py',360),
  ('expression -> expression LE expression','expression',3,'p_expression','minipascal_parser.py',361),
  ('expression -> expression GE expression','expression',3,'p_expression','minipascal_parser.py',362),
  ('expression -> expression AND expression','expression',3,'p_expression','minipascal_parser.py',363),
  ('expression -> expression OR expression','expression',3,'p_expression','minipascal_parser.py',364),
  ('expression -> expression XOR expression','expression',3,'p_expression','minipascal_parser.py',365),
  ('expression -> NOT expression','expression',2,'p_expression','minipascal_parser.py',366),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','minipascal_parser.py',367),
  ('expression -> function_call','expression',1,'p_expression','minipascal_parser.py',368),
  ('expression -> variable','expression',1,'p_expression','minipascal_parser.py',369),
  ('expression -> INTEGER_CONST','expression',1,'p_expression','minipascal_parser.py',370),
  ('expression -> REAL_CONST','expression',1,'p_expression','minipascal_parser.py',371),
  ('expression -> STRING_LITERAL','expression',1,'p_expression','minipascal_parser.py',372),
  ('function_call -> ID LPAREN args_optional RPAREN','function_call',4,'p_function_call','minipascal_parser.py',377),
  ('args_optional -> args','args_optional',1,'p_args_opt','minipascal_parser.py',382),
  ('args_optional -> empty','args_optional',1,'p_args_opt','minipascal_parser.py',383),
  ('constant -> UNSIGNED_NUMBER','constant',1,'p_constant','minipascal_parser.py',388),
  ('constant -> sign UNSIGNED_NUMBER','constant',2,'p_constant','minipascal_parser.py',389),
  ('constant -> STRING_LITERAL','constant',1,'p_constant','minipascal_parser.py',390),
  ('constant -> constant_identifier','constant',1,'p_constant','minipascal_parser.py',391),
  ('UNSIGNED_NUMBER -> INTEGER_CONST','UNSIGNED_NUMBER',1,'p_unsigned_number','minipascal_parser.py',395),
  ('UNSIGNED_NUMBER -> REAL_CONST','UNSIGNED_NUMBER',1,'p_unsigned_number','minipascal_parser.py',396),
  ('sign -> PLUS','sign',1,'p_sign','minipascal_parser.py',400),
  ('sign -> MINUS','sign',1,'p_sign','minipascal_parser.py',401),
  ('constant_identifier -> ID','constant_identifier',1,'p_constant_identifier','minipascal_parser.py',405),
  ('empty -> <empty>','empty',0,'p_empty','minipascal_parser.py',410),
]
