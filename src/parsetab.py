
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSOLUTE AND ARRAY ASM ASSIGN BEGIN BOOLEAN CASE COLON COMMA CONST CONSTRUCTOR DESTRUCTOR DIV DIVIDE DIVIDE_INT DO DOT DOTDOT DOWNTO ELSE END EQUAL EXTERNAL FILE FOR FORWARD FUNCTION GE GOTO GT ID IF IMPLEMENTATION IN INLINE INTEGER INTEGER_CONST INTERFACE INTERRUPT LABEL LBRACKET LE LPAREN LT MINUS MOD MODULO NEQUAL NIL NOT OBJECT OF OFF OR PACKED PLUS PRIVATE PROCEDURE PROGRAM RBRACKET REAL REAL_CONST RECORD REPEAT RPAREN SEMICOLON SET SHL SHR STRING STRING_LITERAL THEN TIMES TO TYPE UNIT UNTIL USES VAR VIRTUAL WHILE WITH XORprogram : PROGRAM ID SEMICOLON block DOTblock : declarations BEGIN statement_list ENDdeclarations : declarations declaration\n                    | emptydeclaration : var_declaration\n                   | const_declaration\n                   | procedure_declaration\n                   | type_declarationvar_declaration : VAR var_decl_list SEMICOLONvar_decl_list : var_decl_list var_decl\n                | var_declvar_decl : id_list COLON type SEMICOLONid_list : id_list COMMA ID\n               | IDconst_declaration : CONST const_list SEMICOLONconst_list : const_list COMMA ID EQUAL constant\n                  | ID EQUAL constantprocedure_declaration : PROCEDURE ID LPAREN param_list RPAREN SEMICOLON blocktype_declaration : TYPE ID EQUAL type SEMICOLONparam_list : param_list SEMICOLON param\n                  | param\n                  | emptyparam : ID COLON typetype : INTEGER\n            | REAL\n            | BOOLEAN\n            | STRING\n            | ARRAY LBRACKET INTEGER_CONST RBRACKET OF type\n            | RECORD record_fields END\n            | SET LBRACKET type RBRACKETrecord_fields : record_fields var_declaration\n                     | var_declarationstatement_list : statement_list statement\n                      | statementstatement : assignment_statement\n                 | if_statement\n                 | while_statement\n                 | repeat_statement\n                 | for_statement\n                 | procedure_call\n                 | record_assignment\n                 | emptyassignment_statement : ID ASSIGN expression SEMICOLONrecord_assignment : ID DOT ID ASSIGN expression SEMICOLONif_statement : IF expression THEN statement else_partelse_part : ELSE statement\n                 | emptywhile_statement : WHILE expression DO statementrepeat_statement : REPEAT statement_list UNTIL expression SEMICOLONfor_statement : FOR ID ASSIGN expression TO expression DO statementprocedure_call : ID LPAREN args RPAREN SEMICOLONargs : args COMMA expression\n            | expression\n            | emptyexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression DIVIDE_INT expression\n                  | expression MODULO expression\n                  | expression EQUAL expression\n                  | expression NEQUAL expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression XOR expressionexpression : LPAREN expression RPARENexpression : INTEGER_CONST\n                  | REAL_CONST\n                  | STRING_LITERAL\n                  | IDconstant : INTEGER_CONST\n                | REAL_CONST\n                | STRING_LITERAL\n                | NILempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,8,],[0,-1,]),'ID':([2,9,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,43,44,45,46,48,54,57,59,61,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,110,112,113,114,131,134,142,144,147,148,149,150,151,160,161,166,168,],[3,29,37,39,40,41,29,-34,-35,-36,-37,-38,-39,-40,-41,-42,52,52,29,55,37,-11,-33,52,52,69,52,29,-10,98,99,105,29,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,29,52,52,-43,52,52,-79,-48,-12,105,-51,-45,29,-47,-49,52,-44,-46,29,-50,]),'SEMICOLON':([3,34,35,38,49,50,51,52,57,63,65,90,91,92,93,94,100,101,102,103,104,106,107,108,109,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,134,141,146,153,156,157,159,164,169,],[4,56,-11,60,-71,-72,-73,-74,-10,-79,110,134,-24,-25,-26,-27,-17,-75,-76,-77,-78,142,-21,-22,143,144,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,150,-12,158,160,-29,-16,-23,-20,-30,-28,]),'BEGIN':([4,6,7,10,11,12,13,14,42,56,60,143,158,165,],[-79,9,-4,-3,-5,-6,-7,-8,-2,-9,-15,-19,-79,-18,]),'VAR':([4,6,7,10,11,12,13,14,42,56,60,96,136,137,143,154,158,165,],[-79,15,-4,-3,-5,-6,-7,-8,-2,-9,-15,15,15,-32,-19,-31,-79,-18,]),'CONST':([4,6,7,10,11,12,13,14,42,56,60,143,158,165,],[-79,16,-4,-3,-5,-6,-7,-8,-2,-9,-15,-19,-79,-18,]),'PROCEDURE':([4,6,7,10,11,12,13,14,42,56,60,143,158,165,],[-79,17,-4,-3,-5,-6,-7,-8,-2,-9,-15,-19,-79,-18,]),'TYPE':([4,6,7,10,11,12,13,14,42,56,60,143,158,165,],[-79,18,-4,-3,-5,-6,-7,-8,-2,-9,-15,-19,-79,-18,]),'DOT':([5,29,42,],[8,46,-2,]),'IF':([9,19,20,21,22,23,24,25,26,27,28,32,43,54,70,87,110,114,131,144,147,148,149,150,160,161,166,168,],[30,30,-34,-35,-36,-37,-38,-39,-40,-41,-42,30,-33,30,30,30,-43,-79,-48,-51,-45,30,-47,-49,-44,-46,30,-50,]),'WHILE':([9,19,20,21,22,23,24,25,26,27,28,32,43,54,70,87,110,114,131,144,147,148,149,150,160,161,166,168,],[31,31,-34,-35,-36,-37,-38,-39,-40,-41,-42,31,-33,31,31,31,-43,-79,-48,-51,-45,31,-47,-49,-44,-46,31,-50,]),'REPEAT':([9,19,20,21,22,23,24,25,26,27,28,32,43,54,70,87,110,114,131,144,147,148,149,150,160,161,166,168,],[32,32,-34,-35,-36,-37,-38,-39,-40,-41,-42,32,-33,32,32,32,-43,-79,-48,-51,-45,32,-47,-49,-44,-46,32,-50,]),'FOR':([9,19,20,21,22,23,24,25,26,27,28,32,43,54,70,87,110,114,131,144,147,148,149,150,160,161,166,168,],[33,33,-34,-35,-36,-37,-38,-39,-40,-41,-42,33,-33,33,33,33,-43,-79,-48,-51,-45,33,-47,-49,-44,-46,33,-50,]),'END':([9,19,20,21,22,23,24,25,26,27,28,43,56,70,87,110,114,131,136,137,144,147,148,149,150,154,160,161,166,168,],[-79,42,-34,-35,-36,-37,-38,-39,-40,-41,-42,-33,-9,-79,-79,-43,-79,-48,153,-32,-51,-45,-79,-47,-49,-31,-44,-46,-79,-50,]),'UNTIL':([20,21,22,23,24,25,26,27,28,32,43,54,70,87,110,114,131,144,147,148,149,150,160,161,166,168,],[-34,-35,-36,-37,-38,-39,-40,-41,-42,-79,-33,88,-79,-79,-43,-79,-48,-51,-45,-79,-47,-49,-44,-46,-79,-50,]),'ELSE':([21,22,23,24,25,26,27,28,70,87,110,114,131,144,147,148,149,150,160,161,166,168,],[-35,-36,-37,-38,-39,-40,-41,-42,-79,-79,-43,148,-48,-51,-45,-79,-47,-49,-44,-46,-79,-50,]),'ASSIGN':([29,55,69,],[44,89,113,]),'LPAREN':([29,30,31,40,44,45,48,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,89,112,113,151,],[45,48,48,63,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'INTEGER_CONST':([30,31,44,45,48,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,89,112,113,135,139,151,],[49,49,49,49,49,101,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,152,101,49,]),'REAL_CONST':([30,31,44,45,48,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,89,112,113,139,151,],[50,50,50,50,50,102,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,102,50,]),'STRING_LITERAL':([30,31,44,45,48,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,89,112,113,139,151,],[51,51,51,51,51,103,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,103,51,]),'COLON':([36,37,98,105,],[58,-14,-13,140,]),'COMMA':([36,37,38,45,49,50,51,52,66,67,68,98,100,101,102,103,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,145,156,],[59,-14,61,-79,-71,-72,-73,-74,112,-53,-54,-13,-17,-75,-76,-77,-78,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-52,-16,]),'EQUAL':([39,41,47,49,50,51,52,53,65,67,86,99,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,145,146,162,],[62,64,77,-71,-72,-73,-74,77,77,77,77,139,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-70,77,77,77,77,77,]),'RPAREN':([45,49,50,51,52,63,66,67,68,86,91,92,93,94,106,107,108,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,145,153,157,159,164,169,],[-79,-71,-72,-73,-74,-79,111,-53,-54,130,-24,-25,-26,-27,141,-21,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-52,-29,-23,-20,-30,-28,]),'THEN':([47,49,50,51,52,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,],[70,-71,-72,-73,-74,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,]),'PLUS':([47,49,50,51,52,53,65,67,86,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,145,146,162,],[71,-71,-72,-73,-74,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-70,71,71,71,71,71,]),'MINUS':([47,49,50,51,52,53,65,67,86,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,145,146,162,],[72,-71,-72,-73,-74,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-70,72,72,72,72,72,]),'TIMES':([47,49,50,51,52,53,65,67,86,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,145,146,162,],[73,-71,-72,-73,-74,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-70,73,73,73,73,73,]),'DIVIDE':([47,49,50,51,52,53,65,67,86,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,145,146,162,],[74,-71,-72,-73,-74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-70,74,74,74,74,74,]),'DIVIDE_INT':([47,49,50,51,52,53,65,67,86,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,145,146,162,],[75,-71,-72,-73,-74,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-70,75,75,75,75,75,]),'MODULO':([47,49,50,51,52,53,65,67,86,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,145,146,162,],[76,-71,-72,-73,-74,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-70,76,76,76,76,76,]),'NEQUAL':([47,49,50,51,52,53,65,67,86,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,145,146,162,],[78,-71,-72,-73,-74,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-70,78,78,78,78,78,]),'LT':([47,49,50,51,52,53,65,67,86,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,145,146,162,],[79,-71,-72,-73,-74,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-70,79,79,79,79,79,]),'GT':([47,49,50,51,52,53,65,67,86,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,145,146,162,],[80,-71,-72,-73,-74,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-70,80,80,80,80,80,]),'LE':([47,49,50,51,52,53,65,67,86,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,145,146,162,],[81,-71,-72,-73,-74,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-70,81,81,81,81,81,]),'GE':([47,49,50,51,52,53,65,67,86,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,145,146,162,],[82,-71,-72,-73,-74,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-70,82,82,82,82,82,]),'AND':([47,49,50,51,52,53,65,67,86,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,145,146,162,],[83,-71,-72,-73,-74,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-70,83,83,83,83,83,]),'OR':([47,49,50,51,52,53,65,67,86,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,145,146,162,],[84,-71,-72,-73,-74,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-70,84,84,84,84,84,]),'XOR':([47,49,50,51,52,53,65,67,86,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,145,146,162,],[85,-71,-72,-73,-74,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-70,85,85,85,85,85,]),'DO':([49,50,51,52,53,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,162,],[-71,-72,-73,-74,87,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,166,]),'TO':([49,50,51,52,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-71,-72,-73,-74,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,151,]),'INTEGER':([58,64,138,140,167,],[91,91,91,91,91,]),'REAL':([58,64,138,140,167,],[92,92,92,92,92,]),'BOOLEAN':([58,64,138,140,167,],[93,93,93,93,93,]),'STRING':([58,64,138,140,167,],[94,94,94,94,94,]),'ARRAY':([58,64,138,140,167,],[95,95,95,95,95,]),'RECORD':([58,64,138,140,167,],[96,96,96,96,96,]),'SET':([58,64,138,140,167,],[97,97,97,97,97,]),'NIL':([62,139,],[104,104,]),'RBRACKET':([91,92,93,94,152,153,155,164,169,],[-24,-25,-26,-27,163,-29,164,-30,-28,]),'LBRACKET':([95,97,],[135,138,]),'OF':([163,],[167,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,158,],[5,165,]),'declarations':([4,158,],[6,6,]),'empty':([4,9,19,32,45,54,63,70,87,114,148,158,166,],[7,28,28,28,68,28,108,28,28,149,28,7,28,]),'declaration':([6,],[10,]),'var_declaration':([6,96,136,],[11,137,154,]),'const_declaration':([6,],[12,]),'procedure_declaration':([6,],[13,]),'type_declaration':([6,],[14,]),'statement_list':([9,32,],[19,54,]),'statement':([9,19,32,54,70,87,148,166,],[20,43,20,43,114,131,161,168,]),'assignment_statement':([9,19,32,54,70,87,148,166,],[21,21,21,21,21,21,21,21,]),'if_statement':([9,19,32,54,70,87,148,166,],[22,22,22,22,22,22,22,22,]),'while_statement':([9,19,32,54,70,87,148,166,],[23,23,23,23,23,23,23,23,]),'repeat_statement':([9,19,32,54,70,87,148,166,],[24,24,24,24,24,24,24,24,]),'for_statement':([9,19,32,54,70,87,148,166,],[25,25,25,25,25,25,25,25,]),'procedure_call':([9,19,32,54,70,87,148,166,],[26,26,26,26,26,26,26,26,]),'record_assignment':([9,19,32,54,70,87,148,166,],[27,27,27,27,27,27,27,27,]),'var_decl_list':([15,],[34,]),'var_decl':([15,34,],[35,57,]),'id_list':([15,34,],[36,36,]),'const_list':([16,],[38,]),'expression':([30,31,44,45,48,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,89,112,113,151,],[47,53,65,67,86,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,133,145,146,162,]),'args':([45,],[66,]),'type':([58,64,138,140,167,],[90,109,155,157,169,]),'constant':([62,139,],[100,156,]),'param_list':([63,],[106,]),'param':([63,142,],[107,159,]),'record_fields':([96,],[136,]),'else_part':([114,],[147,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON block DOT','program',5,'p_program','minipascal_parser.py',10),
  ('block -> declarations BEGIN statement_list END','block',4,'p_block','minipascal_parser.py',15),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','minipascal_parser.py',20),
  ('declarations -> empty','declarations',1,'p_declarations','minipascal_parser.py',21),
  ('declaration -> var_declaration','declaration',1,'p_declaration','minipascal_parser.py',25),
  ('declaration -> const_declaration','declaration',1,'p_declaration','minipascal_parser.py',26),
  ('declaration -> procedure_declaration','declaration',1,'p_declaration','minipascal_parser.py',27),
  ('declaration -> type_declaration','declaration',1,'p_declaration','minipascal_parser.py',28),
  ('var_declaration -> VAR var_decl_list SEMICOLON','var_declaration',3,'p_var_declaration','minipascal_parser.py',32),
  ('var_decl_list -> var_decl_list var_decl','var_decl_list',2,'p_var_decl_list','minipascal_parser.py',36),
  ('var_decl_list -> var_decl','var_decl_list',1,'p_var_decl_list','minipascal_parser.py',37),
  ('var_decl -> id_list COLON type SEMICOLON','var_decl',4,'p_var_decl','minipascal_parser.py',41),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','minipascal_parser.py',45),
  ('id_list -> ID','id_list',1,'p_id_list','minipascal_parser.py',46),
  ('const_declaration -> CONST const_list SEMICOLON','const_declaration',3,'p_const_declaration','minipascal_parser.py',50),
  ('const_list -> const_list COMMA ID EQUAL constant','const_list',5,'p_const_list','minipascal_parser.py',54),
  ('const_list -> ID EQUAL constant','const_list',3,'p_const_list','minipascal_parser.py',55),
  ('procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block','procedure_declaration',7,'p_procedure_declaration','minipascal_parser.py',59),
  ('type_declaration -> TYPE ID EQUAL type SEMICOLON','type_declaration',5,'p_type_declaration','minipascal_parser.py',63),
  ('param_list -> param_list SEMICOLON param','param_list',3,'p_param_list','minipascal_parser.py',67),
  ('param_list -> param','param_list',1,'p_param_list','minipascal_parser.py',68),
  ('param_list -> empty','param_list',1,'p_param_list','minipascal_parser.py',69),
  ('param -> ID COLON type','param',3,'p_param','minipascal_parser.py',73),
  ('type -> INTEGER','type',1,'p_type','minipascal_parser.py',78),
  ('type -> REAL','type',1,'p_type','minipascal_parser.py',79),
  ('type -> BOOLEAN','type',1,'p_type','minipascal_parser.py',80),
  ('type -> STRING','type',1,'p_type','minipascal_parser.py',81),
  ('type -> ARRAY LBRACKET INTEGER_CONST RBRACKET OF type','type',6,'p_type','minipascal_parser.py',82),
  ('type -> RECORD record_fields END','type',3,'p_type','minipascal_parser.py',83),
  ('type -> SET LBRACKET type RBRACKET','type',4,'p_type','minipascal_parser.py',84),
  ('record_fields -> record_fields var_declaration','record_fields',2,'p_record_fields','minipascal_parser.py',88),
  ('record_fields -> var_declaration','record_fields',1,'p_record_fields','minipascal_parser.py',89),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','minipascal_parser.py',94),
  ('statement_list -> statement','statement_list',1,'p_statement_list','minipascal_parser.py',95),
  ('statement -> assignment_statement','statement',1,'p_statement','minipascal_parser.py',100),
  ('statement -> if_statement','statement',1,'p_statement','minipascal_parser.py',101),
  ('statement -> while_statement','statement',1,'p_statement','minipascal_parser.py',102),
  ('statement -> repeat_statement','statement',1,'p_statement','minipascal_parser.py',103),
  ('statement -> for_statement','statement',1,'p_statement','minipascal_parser.py',104),
  ('statement -> procedure_call','statement',1,'p_statement','minipascal_parser.py',105),
  ('statement -> record_assignment','statement',1,'p_statement','minipascal_parser.py',106),
  ('statement -> empty','statement',1,'p_statement','minipascal_parser.py',107),
  ('assignment_statement -> ID ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','minipascal_parser.py',111),
  ('record_assignment -> ID DOT ID ASSIGN expression SEMICOLON','record_assignment',6,'p_record_assignment','minipascal_parser.py',115),
  ('if_statement -> IF expression THEN statement else_part','if_statement',5,'p_if_statement','minipascal_parser.py',119),
  ('else_part -> ELSE statement','else_part',2,'p_else_part','minipascal_parser.py',123),
  ('else_part -> empty','else_part',1,'p_else_part','minipascal_parser.py',124),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','minipascal_parser.py',128),
  ('repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON','repeat_statement',5,'p_repeat_statement','minipascal_parser.py',132),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','minipascal_parser.py',136),
  ('procedure_call -> ID LPAREN args RPAREN SEMICOLON','procedure_call',5,'p_procedure_call','minipascal_parser.py',140),
  ('args -> args COMMA expression','args',3,'p_args','minipascal_parser.py',144),
  ('args -> expression','args',1,'p_args','minipascal_parser.py',145),
  ('args -> empty','args',1,'p_args','minipascal_parser.py',146),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','minipascal_parser.py',151),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','minipascal_parser.py',152),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','minipascal_parser.py',153),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','minipascal_parser.py',154),
  ('expression -> expression DIVIDE_INT expression','expression',3,'p_expression_binop','minipascal_parser.py',155),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','minipascal_parser.py',156),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_binop','minipascal_parser.py',157),
  ('expression -> expression NEQUAL expression','expression',3,'p_expression_binop','minipascal_parser.py',158),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','minipascal_parser.py',159),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','minipascal_parser.py',160),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','minipascal_parser.py',161),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','minipascal_parser.py',162),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','minipascal_parser.py',163),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','minipascal_parser.py',164),
  ('expression -> expression XOR expression','expression',3,'p_expression_binop','minipascal_parser.py',165),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','minipascal_parser.py',169),
  ('expression -> INTEGER_CONST','expression',1,'p_expression_literal','minipascal_parser.py',173),
  ('expression -> REAL_CONST','expression',1,'p_expression_literal','minipascal_parser.py',174),
  ('expression -> STRING_LITERAL','expression',1,'p_expression_literal','minipascal_parser.py',175),
  ('expression -> ID','expression',1,'p_expression_literal','minipascal_parser.py',176),
  ('constant -> INTEGER_CONST','constant',1,'p_constant','minipascal_parser.py',180),
  ('constant -> REAL_CONST','constant',1,'p_constant','minipascal_parser.py',181),
  ('constant -> STRING_LITERAL','constant',1,'p_constant','minipascal_parser.py',182),
  ('constant -> NIL','constant',1,'p_constant','minipascal_parser.py',183),
  ('empty -> <empty>','empty',0,'p_empty','minipascal_parser.py',188),
]
