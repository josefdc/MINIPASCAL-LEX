Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSOLUTE
    ASM
    CASE
    CONSTRUCTOR
    DESTRUCTOR
<<<<<<< HEAD
    DIV
=======
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d
    EXTERNAL
    FILE
    FORWARD
    GOTO
    IMPLEMENTATION
    INLINE
    INTERFACE
    INTERRUPT
    LABEL
<<<<<<< HEAD
    MOD
    NIL
=======
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d
    OBJECT
    PACKED
<<<<<<< HEAD
    PRIVATE
    SET
    SHL
    SHR
=======
    SET
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d
    UNIT
    VIRTUAL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON block DOT
Rule 2     block -> declarations compound_statement
Rule 3     declarations -> declaration_list
Rule 4     declarations -> empty
<<<<<<< HEAD
Rule 5     declaration_list -> declaration_list declaration
Rule 6     declaration_list -> declaration
Rule 7     declaration -> var_declaration
Rule 8     declaration -> const_declaration
Rule 9     declaration -> type_declaration
Rule 10    declaration -> procedure_declaration
Rule 11    var_declaration -> VAR var_declaration_list
Rule 12    var_declaration_list -> var_declaration_list var_decl
Rule 13    var_declaration_list -> var_decl
Rule 14    var_decl -> id_list COLON type SEMICOLON
Rule 15    id_list -> id_list COMMA ID
Rule 16    id_list -> ID
Rule 17    const_declaration -> CONST const_list
Rule 18    const_list -> const_list const_definition SEMICOLON
Rule 19    const_list -> const_definition SEMICOLON
Rule 20    const_definition -> ID EQUAL constant
Rule 21    procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block
Rule 22    param_list -> param_list SEMICOLON param
Rule 23    param_list -> param
Rule 24    param_list -> empty
Rule 25    param -> ID COLON type
Rule 26    type_declaration -> TYPE type_list
Rule 27    type_list -> type_list type_definition SEMICOLON
Rule 28    type_list -> type_definition SEMICOLON
Rule 29    type_definition -> ID EQUAL type
Rule 30    type -> simple_type
Rule 31    type -> array_type
Rule 32    type -> record_type
Rule 33    simple_type -> subrange_type
Rule 34    simple_type -> type_identifier
Rule 35    subrange_type -> constant DOTDOT constant
Rule 36    array_type -> ARRAY LBRACKET index_type RBRACKET OF type
Rule 37    index_type -> simple_type
Rule 38    record_type -> RECORD record_fields END
Rule 39    record_fields -> field_list
Rule 40    field_list -> field_list field_declaration SEMICOLON
Rule 41    field_list -> field_declaration SEMICOLON
Rule 42    field_declaration -> id_list COLON type
Rule 43    type_identifier -> ID
Rule 44    type_identifier -> predefined_type
Rule 45    predefined_type -> INTEGER
Rule 46    predefined_type -> REAL
Rule 47    predefined_type -> BOOLEAN
Rule 48    predefined_type -> STRING
Rule 49    compound_statement -> BEGIN statement_list END
Rule 50    statement_list -> statement
Rule 51    statement_list -> statement_list SEMICOLON statement
Rule 52    statement -> simple_statement
Rule 53    statement -> structured_statement
Rule 54    simple_statement -> assignment_statement
Rule 55    simple_statement -> procedure_call_statement
Rule 56    simple_statement -> empty
Rule 57    structured_statement -> compound_statement
Rule 58    structured_statement -> if_statement
Rule 59    structured_statement -> while_statement
Rule 60    structured_statement -> repeat_statement
Rule 61    structured_statement -> for_statement
Rule 62    structured_statement -> record_assignment
Rule 63    assignment_statement -> variable ASSIGN expression
Rule 64    variable -> ID
Rule 65    variable -> variable DOT ID
Rule 66    variable -> variable LBRACKET expression_list RBRACKET
Rule 67    expression_list -> expression
Rule 68    expression_list -> expression_list COMMA expression
Rule 69    record_assignment -> ID DOT ID ASSIGN expression
Rule 70    if_statement -> IF expression THEN statement else_part
Rule 71    else_part -> ELSE statement
Rule 72    else_part -> empty
Rule 73    while_statement -> WHILE expression DO statement
Rule 74    repeat_statement -> REPEAT statement_list UNTIL expression
Rule 75    for_statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 76    for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement
Rule 77    procedure_call_statement -> procedure_call
Rule 78    procedure_call -> ID LPAREN args RPAREN
Rule 79    procedure_call -> ID
Rule 80    args -> args COMMA expression
Rule 81    args -> expression
Rule 82    args -> empty
Rule 83    expression -> expression PLUS expression
Rule 84    expression -> expression MINUS expression
Rule 85    expression -> expression TIMES expression
Rule 86    expression -> expression DIVIDE expression
Rule 87    expression -> expression DIVIDE_INT expression
Rule 88    expression -> expression MODULO expression
Rule 89    expression -> expression EQUAL expression
Rule 90    expression -> expression NEQUAL expression
Rule 91    expression -> expression LT expression
Rule 92    expression -> expression GT expression
Rule 93    expression -> expression LE expression
Rule 94    expression -> expression GE expression
Rule 95    expression -> expression AND expression
Rule 96    expression -> expression OR expression
Rule 97    expression -> expression XOR expression
Rule 98    expression -> NOT expression
Rule 99    expression -> LPAREN expression RPAREN
Rule 100   expression -> variable
Rule 101   expression -> INTEGER_CONST
Rule 102   expression -> REAL_CONST
Rule 103   expression -> STRING_LITERAL
Rule 104   constant -> UNSIGNED_NUMBER
Rule 105   constant -> sign UNSIGNED_NUMBER
Rule 106   constant -> STRING_LITERAL
Rule 107   constant -> constant_identifier
Rule 108   UNSIGNED_NUMBER -> INTEGER_CONST
Rule 109   UNSIGNED_NUMBER -> REAL_CONST
Rule 110   sign -> PLUS
Rule 111   sign -> MINUS
Rule 112   constant_identifier -> ID
Rule 113   empty -> <empty>
=======
Rule 5     declaration -> var_declaration
Rule 6     declaration -> const_declaration
Rule 7     declaration -> type_declaration
Rule 8     declaration -> procedure_declaration
Rule 9     declaration -> function_declaration
Rule 10    declaration -> uses_clause
Rule 11    uses_clause -> USES identifier_list SEMICOLON
Rule 12    identifier_list -> identifier_list COMMA ID
Rule 13    identifier_list -> ID
Rule 14    var_declaration -> VAR var_decl_list
Rule 15    var_decl_list -> var_decl_list var_decl
Rule 16    var_decl_list -> var_decl
Rule 17    var_decl -> id_list COLON type SEMICOLON
Rule 18    id_list -> id_list COMMA ID
Rule 19    id_list -> ID
Rule 20    const_declaration -> CONST const_list
Rule 21    const_list -> const_list const_decl
Rule 22    const_list -> const_decl
Rule 23    const_decl -> ID EQUAL constant SEMICOLON
Rule 24    type_declaration -> TYPE type_decl_list
Rule 25    type_decl_list -> type_decl_list type_decl
Rule 26    type_decl_list -> type_decl
Rule 27    type_decl -> ID EQUAL type SEMICOLON
Rule 28    procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON
Rule 29    procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block SEMICOLON
Rule 30    function_declaration -> FUNCTION ID COLON type SEMICOLON block SEMICOLON
Rule 31    function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLON
Rule 32    param_list -> param_list SEMICOLON param
Rule 33    param_list -> param
Rule 34    param -> id_list COLON type
Rule 35    type -> INTEGER
Rule 36    type -> REAL
Rule 37    type -> BOOLEAN
Rule 38    type -> STRING
Rule 39    type -> ID
Rule 40    type -> ARRAY LBRACKET range RBRACKET OF type
Rule 41    type -> RECORD field_list END
Rule 42    range -> INTEGER_CONST DOTDOT INTEGER_CONST
Rule 43    field_list -> field_list field_decl SEMICOLON
Rule 44    field_list -> field_decl SEMICOLON
Rule 45    field_decl -> id_list COLON type
Rule 46    statement_list -> statement_list statement
Rule 47    statement_list -> statement
Rule 48    statement -> assignment_statement
Rule 49    statement -> procedure_call
Rule 50    statement -> compound_statement
Rule 51    statement -> if_statement
Rule 52    statement -> while_statement
Rule 53    statement -> repeat_statement
Rule 54    statement -> for_statement
Rule 55    statement -> empty
Rule 56    assignment_statement -> variable ASSIGN expression SEMICOLON
Rule 57    variable -> ID
Rule 58    variable -> ID LBRACKET expression_list RBRACKET
Rule 59    variable -> ID DOT ID
Rule 60    expression_list -> expression_list COMMA expression
Rule 61    expression_list -> expression
Rule 62    procedure_call -> ID LPAREN args RPAREN SEMICOLON
Rule 63    procedure_call -> ID SEMICOLON
Rule 64    args -> args COMMA expression
Rule 65    args -> expression
Rule 66    args -> empty
Rule 67    compound_statement -> BEGIN statement_list END
Rule 68    if_statement -> IF expression THEN statement else_part
Rule 69    else_part -> ELSE statement
Rule 70    else_part -> empty
Rule 71    while_statement -> WHILE expression DO statement
Rule 72    repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON
Rule 73    for_statement -> FOR ID ASSIGN expression direction expression DO statement
Rule 74    direction -> TO
Rule 75    direction -> DOWNTO
Rule 76    expression -> simple_expression relop_opt
Rule 77    relop_opt -> relop simple_expression
Rule 78    relop_opt -> empty
Rule 79    relop -> EQUAL
Rule 80    relop -> NEQUAL
Rule 81    relop -> LT
Rule 82    relop -> LE
Rule 83    relop -> GT
Rule 84    relop -> GE
Rule 85    relop -> IN
Rule 86    simple_expression -> term
Rule 87    simple_expression -> simple_expression addop term
Rule 88    addop -> PLUS
Rule 89    addop -> MINUS
Rule 90    addop -> OR
Rule 91    addop -> XOR
Rule 92    term -> factor
Rule 93    term -> term mulop factor
Rule 94    mulop -> TIMES
Rule 95    mulop -> DIVIDE
Rule 96    mulop -> DIVIDE_INT
Rule 97    mulop -> MODULO
Rule 98    mulop -> DIV
Rule 99    mulop -> MOD
Rule 100   mulop -> AND
Rule 101   mulop -> SHL
Rule 102   mulop -> SHR
Rule 103   factor -> variable
Rule 104   factor -> INTEGER_CONST
Rule 105   factor -> REAL_CONST
Rule 106   factor -> STRING_LITERAL
Rule 107   factor -> LPAREN expression RPAREN
Rule 108   factor -> NOT factor
Rule 109   factor -> MINUS factor
Rule 110   constant -> INTEGER_CONST
Rule 111   constant -> REAL_CONST
Rule 112   constant -> STRING_LITERAL
Rule 113   constant -> NIL
Rule 114   empty -> <empty>
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

Terminals, with rules where they appear

ABSOLUTE             : 
<<<<<<< HEAD
AND                  : 95
ARRAY                : 36
ASM                  : 
ASSIGN               : 63 69 75 76
BEGIN                : 49
BOOLEAN              : 47
CASE                 : 
COLON                : 14 25 42
COMMA                : 15 68 80
CONST                : 17
CONSTRUCTOR          : 
DESTRUCTOR           : 
DIV                  : 
DIVIDE               : 86
DIVIDE_INT           : 87
DO                   : 73 75 76
DOT                  : 1 65 69
DOTDOT               : 35
DOWNTO               : 76
ELSE                 : 71
END                  : 38 49
EQUAL                : 20 29 89
EXTERNAL             : 
FILE                 : 
FOR                  : 75 76
FORWARD              : 
FUNCTION             : 
GE                   : 94
GOTO                 : 
GT                   : 92
ID                   : 1 15 16 20 21 25 29 43 64 65 69 69 75 76 78 79 112
IF                   : 70
=======
AND                  : 100
ARRAY                : 40
ASM                  : 
ASSIGN               : 56 73
BEGIN                : 2 67
BOOLEAN              : 37
CASE                 : 
COLON                : 17 30 31 34 45
COMMA                : 12 18 60 64
CONST                : 20
CONSTRUCTOR          : 
DESTRUCTOR           : 
DIV                  : 98
DIVIDE               : 95
DIVIDE_INT           : 96
DO                   : 71 73
DOT                  : 1 59
DOTDOT               : 42
DOWNTO               : 75
ELSE                 : 69
END                  : 2 41 67
EQUAL                : 23 27 79
EXTERNAL             : 
FILE                 : 
FOR                  : 73
FORWARD              : 
FUNCTION             : 30 31
GE                   : 84
GOTO                 : 
GT                   : 83
ID                   : 1 12 13 18 19 23 27 28 29 30 31 39 57 58 59 59 62 63 73
IF                   : 68
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d
IMPLEMENTATION       : 
IN                   : 85
INLINE               : 
<<<<<<< HEAD
INTEGER              : 45
INTEGER_CONST        : 101 108
INTERFACE            : 
INTERRUPT            : 
LABEL                : 
LBRACKET             : 36 66
LE                   : 93
LPAREN               : 21 78 99
LT                   : 91
MINUS                : 84 111
MOD                  : 
MODULO               : 88
NEQUAL               : 90
NIL                  : 
NOT                  : 98
OBJECT               : 
OF                   : 36
OFF                  : 
OR                   : 96
PACKED               : 
PLUS                 : 83 110
PRIVATE              : 
PROCEDURE            : 21
PROGRAM              : 1
RBRACKET             : 36 66
REAL                 : 46
REAL_CONST           : 102 109
RECORD               : 38
REPEAT               : 74
RPAREN               : 21 78 99
SEMICOLON            : 1 14 18 19 21 22 27 28 40 41 51
SET                  : 
SHL                  : 
SHR                  : 
STRING               : 48
STRING_LITERAL       : 103 106
THEN                 : 70
TIMES                : 85
TO                   : 75
TYPE                 : 26
UNIT                 : 
UNTIL                : 74
USES                 : 
VAR                  : 11
VIRTUAL              : 
WHILE                : 73
WITH                 : 
XOR                  : 97
=======
INTEGER              : 35
INTEGER_CONST        : 42 42 104 110
INTERFACE            : 
INTERRUPT            : 
LABEL                : 
LBRACKET             : 40 58
LE                   : 82
LPAREN               : 29 31 62 107
LT                   : 81
MINUS                : 89 109
MOD                  : 99
MODULO               : 97
NEQUAL               : 80
NIL                  : 113
NOT                  : 108
OBJECT               : 
OF                   : 40
OR                   : 90
PACKED               : 
PLUS                 : 88
PROCEDURE            : 28 29
PROGRAM              : 1
RBRACKET             : 40 58
REAL                 : 36
REAL_CONST           : 105 111
RECORD               : 41
REPEAT               : 72
RPAREN               : 29 31 62 107
SEMICOLON            : 1 11 17 23 27 28 28 29 29 30 30 31 31 32 43 44 56 62 63 72
SET                  : 
SHL                  : 101
SHR                  : 102
STRING               : 38
STRING_LITERAL       : 106 112
THEN                 : 68
TIMES                : 94
TO                   : 74
TYPE                 : 24
UNIT                 : 
UNTIL                : 72
USES                 : 11
VAR                  : 14
VIRTUAL              : 
WHILE                : 71
WITH                 : 
XOR                  : 91
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d
error                : 

Nonterminals, with rules where they appear

<<<<<<< HEAD
UNSIGNED_NUMBER      : 104 105
args                 : 78 80
array_type           : 31
assignment_statement : 54
block                : 1 21
compound_statement   : 2 57
const_declaration    : 8
const_definition     : 18 19
const_list           : 17 18
constant             : 20 35 35
constant_identifier  : 107
declaration          : 5 6
declaration_list     : 3 5
declarations         : 2
else_part            : 70
empty                : 4 24 56 72 82
expression           : 63 67 68 69 70 73 74 75 75 76 76 80 81 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 99
expression_list      : 66 68
field_declaration    : 40 41
field_list           : 39 40
for_statement        : 61
id_list              : 14 15 42
if_statement         : 58
index_type           : 36
param                : 22 23
param_list           : 21 22
predefined_type      : 44
procedure_call       : 77
procedure_call_statement : 55
procedure_declaration : 10
program              : 0
record_assignment    : 62
record_fields        : 38
record_type          : 32
repeat_statement     : 60
sign                 : 105
simple_statement     : 52
simple_type          : 30 37
statement            : 50 51 70 71 73 75 76
statement_list       : 49 51 74
structured_statement : 53
subrange_type        : 33
type                 : 14 25 29 36 42
type_declaration     : 9
type_definition      : 27 28
type_identifier      : 34
type_list            : 26 27
var_decl             : 12 13
var_declaration      : 7
var_declaration_list : 11 12
variable             : 63 65 66 100
while_statement      : 59
=======
addop                : 87
args                 : 62 64
assignment_statement : 48
block                : 1 28 29 30 31
compound_statement   : 50
const_decl           : 21 22
const_declaration    : 6
const_list           : 20 21
constant             : 23
declaration          : 3
declarations         : 2 3
direction            : 73
else_part            : 68
empty                : 4 55 66 70 78
expression           : 56 60 61 64 65 68 71 72 73 73 107
expression_list      : 58 60
factor               : 92 93 108 109
field_decl           : 43 44
field_list           : 41 43
for_statement        : 54
function_declaration : 9
id_list              : 17 18 34 45
identifier_list      : 11 12
if_statement         : 51
mulop                : 93
param                : 32 33
param_list           : 29 31 32
procedure_call       : 49
procedure_declaration : 8
program              : 0
range                : 40
relop                : 77
relop_opt            : 76
repeat_statement     : 53
simple_expression    : 76 77 87
statement            : 46 47 68 69 71 73
statement_list       : 2 46 67 72
term                 : 86 87 93
type                 : 17 27 30 31 34 40 45
type_decl            : 25 26
type_decl_list       : 24 25
type_declaration     : 7
uses_clause          : 10
var_decl             : 15 16
var_decl_list        : 14 15
var_declaration      : 5
variable             : 56 103
while_statement      : 52
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . block DOT
    (2) block -> . declarations compound_statement
    (3) declarations -> . declaration_list
    (4) declarations -> . empty
<<<<<<< HEAD
    (5) declaration_list -> . declaration_list declaration
    (6) declaration_list -> . declaration
    (113) empty -> .
    (7) declaration -> . var_declaration
    (8) declaration -> . const_declaration
    (9) declaration -> . type_declaration
    (10) declaration -> . procedure_declaration
    (11) var_declaration -> . VAR var_declaration_list
    (17) const_declaration -> . CONST const_list
    (26) type_declaration -> . TYPE type_list
    (21) procedure_declaration -> . PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block

    BEGIN           reduce using rule 113 (empty -> .)
    VAR             shift and go to state 14
    CONST           shift and go to state 15
    TYPE            shift and go to state 16
    PROCEDURE       shift and go to state 17
=======
    (114) empty -> .

    BEGIN           reduce using rule 114 (empty -> .)
    VAR             reduce using rule 114 (empty -> .)
    CONST           reduce using rule 114 (empty -> .)
    TYPE            reduce using rule 114 (empty -> .)
    PROCEDURE       reduce using rule 114 (empty -> .)
    FUNCTION        reduce using rule 114 (empty -> .)
    USES            reduce using rule 114 (empty -> .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    block                          shift and go to state 5
    declarations                   shift and go to state 6
    declaration_list               shift and go to state 7
    empty                          shift and go to state 8
    declaration                    shift and go to state 9
    var_declaration                shift and go to state 10
    const_declaration              shift and go to state 11
    type_declaration               shift and go to state 12
    procedure_declaration          shift and go to state 13

state 5

    (1) program -> PROGRAM ID SEMICOLON block . DOT

    DOT             shift and go to state 18


state 6

<<<<<<< HEAD
    (2) block -> declarations . compound_statement
    (49) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 20

    compound_statement             shift and go to state 19
=======
    (2) block -> declarations . BEGIN statement_list END
    (3) declarations -> declarations . declaration
    (5) declaration -> . var_declaration
    (6) declaration -> . const_declaration
    (7) declaration -> . type_declaration
    (8) declaration -> . procedure_declaration
    (9) declaration -> . function_declaration
    (10) declaration -> . uses_clause
    (14) var_declaration -> . VAR var_decl_list
    (20) const_declaration -> . CONST const_list
    (24) type_declaration -> . TYPE type_decl_list
    (28) procedure_declaration -> . PROCEDURE ID SEMICOLON block SEMICOLON
    (29) procedure_declaration -> . PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block SEMICOLON
    (30) function_declaration -> . FUNCTION ID COLON type SEMICOLON block SEMICOLON
    (31) function_declaration -> . FUNCTION ID LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLON
    (11) uses_clause -> . USES identifier_list SEMICOLON

    BEGIN           shift and go to state 9
    VAR             shift and go to state 17
    CONST           shift and go to state 18
    TYPE            shift and go to state 19
    PROCEDURE       shift and go to state 20
    FUNCTION        shift and go to state 21
    USES            shift and go to state 22

    declaration                    shift and go to state 10
    var_declaration                shift and go to state 11
    const_declaration              shift and go to state 12
    type_declaration               shift and go to state 13
    procedure_declaration          shift and go to state 14
    function_declaration           shift and go to state 15
    uses_clause                    shift and go to state 16
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

state 7

    (3) declarations -> declaration_list .
    (5) declaration_list -> declaration_list . declaration
    (7) declaration -> . var_declaration
    (8) declaration -> . const_declaration
    (9) declaration -> . type_declaration
    (10) declaration -> . procedure_declaration
    (11) var_declaration -> . VAR var_declaration_list
    (17) const_declaration -> . CONST const_list
    (26) type_declaration -> . TYPE type_list
    (21) procedure_declaration -> . PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block

    BEGIN           reduce using rule 3 (declarations -> declaration_list .)
    VAR             shift and go to state 14
    CONST           shift and go to state 15
    TYPE            shift and go to state 16
    PROCEDURE       shift and go to state 17

    declaration                    shift and go to state 21
    var_declaration                shift and go to state 10
    const_declaration              shift and go to state 11
    type_declaration               shift and go to state 12
    procedure_declaration          shift and go to state 13

state 8

    (4) declarations -> empty .

    BEGIN           reduce using rule 4 (declarations -> empty .)
<<<<<<< HEAD
=======
    VAR             reduce using rule 4 (declarations -> empty .)
    CONST           reduce using rule 4 (declarations -> empty .)
    TYPE            reduce using rule 4 (declarations -> empty .)
    PROCEDURE       reduce using rule 4 (declarations -> empty .)
    FUNCTION        reduce using rule 4 (declarations -> empty .)
    USES            reduce using rule 4 (declarations -> empty .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 9

    (6) declaration_list -> declaration .

    VAR             reduce using rule 6 (declaration_list -> declaration .)
    CONST           reduce using rule 6 (declaration_list -> declaration .)
    TYPE            reduce using rule 6 (declaration_list -> declaration .)
    PROCEDURE       reduce using rule 6 (declaration_list -> declaration .)
    BEGIN           reduce using rule 6 (declaration_list -> declaration .)


state 10

    (7) declaration -> var_declaration .

    VAR             reduce using rule 7 (declaration -> var_declaration .)
    CONST           reduce using rule 7 (declaration -> var_declaration .)
    TYPE            reduce using rule 7 (declaration -> var_declaration .)
    PROCEDURE       reduce using rule 7 (declaration -> var_declaration .)
    BEGIN           reduce using rule 7 (declaration -> var_declaration .)


state 11

    (8) declaration -> const_declaration .

    VAR             reduce using rule 8 (declaration -> const_declaration .)
    CONST           reduce using rule 8 (declaration -> const_declaration .)
    TYPE            reduce using rule 8 (declaration -> const_declaration .)
    PROCEDURE       reduce using rule 8 (declaration -> const_declaration .)
    BEGIN           reduce using rule 8 (declaration -> const_declaration .)


state 12

    (9) declaration -> type_declaration .

    VAR             reduce using rule 9 (declaration -> type_declaration .)
    CONST           reduce using rule 9 (declaration -> type_declaration .)
    TYPE            reduce using rule 9 (declaration -> type_declaration .)
    PROCEDURE       reduce using rule 9 (declaration -> type_declaration .)
    BEGIN           reduce using rule 9 (declaration -> type_declaration .)


state 13

    (10) declaration -> procedure_declaration .

    VAR             reduce using rule 10 (declaration -> procedure_declaration .)
    CONST           reduce using rule 10 (declaration -> procedure_declaration .)
    TYPE            reduce using rule 10 (declaration -> procedure_declaration .)
    PROCEDURE       reduce using rule 10 (declaration -> procedure_declaration .)
    BEGIN           reduce using rule 10 (declaration -> procedure_declaration .)


state 14

    (11) var_declaration -> VAR . var_declaration_list
    (12) var_declaration_list -> . var_declaration_list var_decl
    (13) var_declaration_list -> . var_decl
    (14) var_decl -> . id_list COLON type SEMICOLON
    (15) id_list -> . id_list COMMA ID
    (16) id_list -> . ID

    ID              shift and go to state 25

    var_declaration_list           shift and go to state 22
    var_decl                       shift and go to state 23
    id_list                        shift and go to state 24

state 15

    (17) const_declaration -> CONST . const_list
    (18) const_list -> . const_list const_definition SEMICOLON
    (19) const_list -> . const_definition SEMICOLON
    (20) const_definition -> . ID EQUAL constant

    ID              shift and go to state 28

    const_list                     shift and go to state 26
    const_definition               shift and go to state 27

state 16

    (26) type_declaration -> TYPE . type_list
    (27) type_list -> . type_list type_definition SEMICOLON
    (28) type_list -> . type_definition SEMICOLON
    (29) type_definition -> . ID EQUAL type

    ID              shift and go to state 31

    type_list                      shift and go to state 29
    type_definition                shift and go to state 30

state 17

    (21) procedure_declaration -> PROCEDURE . ID LPAREN param_list RPAREN SEMICOLON block

    ID              shift and go to state 32


state 18

    (1) program -> PROGRAM ID SEMICOLON block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON block DOT .)


<<<<<<< HEAD
state 19

    (2) block -> declarations compound_statement .

    DOT             reduce using rule 2 (block -> declarations compound_statement .)
    VAR             reduce using rule 2 (block -> declarations compound_statement .)
    CONST           reduce using rule 2 (block -> declarations compound_statement .)
    TYPE            reduce using rule 2 (block -> declarations compound_statement .)
    PROCEDURE       reduce using rule 2 (block -> declarations compound_statement .)
    BEGIN           reduce using rule 2 (block -> declarations compound_statement .)


state 20

    (49) compound_statement -> BEGIN . statement_list END
    (50) statement_list -> . statement
    (51) statement_list -> . statement_list SEMICOLON statement
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52
=======
state 9

    (2) block -> declarations BEGIN . statement_list END
    (46) statement_list -> . statement_list statement
    (47) statement_list -> . statement
    (48) statement -> . assignment_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . variable ASSIGN expression SEMICOLON
    (62) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (63) procedure_call -> . ID SEMICOLON
    (67) compound_statement -> . BEGIN statement_list END
    (68) if_statement -> . IF expression THEN statement else_part
    (71) while_statement -> . WHILE expression DO statement
    (72) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (73) for_statement -> . FOR ID ASSIGN expression direction expression DO statement
    (114) empty -> .
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ID              shift and go to state 35
    BEGIN           shift and go to state 23
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    REPEAT          shift and go to state 38
    FOR             shift and go to state 39
    END             reduce using rule 114 (empty -> .)

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! BEGIN           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! REPEAT          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]

    statement_list                 shift and go to state 24
    statement                      shift and go to state 25
    assignment_statement           shift and go to state 26
    procedure_call                 shift and go to state 27
    compound_statement             shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    repeat_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    empty                          shift and go to state 33
    variable                       shift and go to state 34

state 10

    (3) declarations -> declarations declaration .

    BEGIN           reduce using rule 3 (declarations -> declarations declaration .)
    VAR             reduce using rule 3 (declarations -> declarations declaration .)
    CONST           reduce using rule 3 (declarations -> declarations declaration .)
    TYPE            reduce using rule 3 (declarations -> declarations declaration .)
    PROCEDURE       reduce using rule 3 (declarations -> declarations declaration .)
    FUNCTION        reduce using rule 3 (declarations -> declarations declaration .)
    USES            reduce using rule 3 (declarations -> declarations declaration .)


state 11

    (5) declaration -> var_declaration .

    BEGIN           reduce using rule 5 (declaration -> var_declaration .)
    VAR             reduce using rule 5 (declaration -> var_declaration .)
    CONST           reduce using rule 5 (declaration -> var_declaration .)
    TYPE            reduce using rule 5 (declaration -> var_declaration .)
    PROCEDURE       reduce using rule 5 (declaration -> var_declaration .)
    FUNCTION        reduce using rule 5 (declaration -> var_declaration .)
    USES            reduce using rule 5 (declaration -> var_declaration .)


state 12

    (6) declaration -> const_declaration .

    BEGIN           reduce using rule 6 (declaration -> const_declaration .)
    VAR             reduce using rule 6 (declaration -> const_declaration .)
    CONST           reduce using rule 6 (declaration -> const_declaration .)
    TYPE            reduce using rule 6 (declaration -> const_declaration .)
    PROCEDURE       reduce using rule 6 (declaration -> const_declaration .)
    FUNCTION        reduce using rule 6 (declaration -> const_declaration .)
    USES            reduce using rule 6 (declaration -> const_declaration .)


state 13

    (7) declaration -> type_declaration .

    BEGIN           reduce using rule 7 (declaration -> type_declaration .)
    VAR             reduce using rule 7 (declaration -> type_declaration .)
    CONST           reduce using rule 7 (declaration -> type_declaration .)
    TYPE            reduce using rule 7 (declaration -> type_declaration .)
    PROCEDURE       reduce using rule 7 (declaration -> type_declaration .)
    FUNCTION        reduce using rule 7 (declaration -> type_declaration .)
    USES            reduce using rule 7 (declaration -> type_declaration .)


state 14

    (8) declaration -> procedure_declaration .

    BEGIN           reduce using rule 8 (declaration -> procedure_declaration .)
    VAR             reduce using rule 8 (declaration -> procedure_declaration .)
    CONST           reduce using rule 8 (declaration -> procedure_declaration .)
    TYPE            reduce using rule 8 (declaration -> procedure_declaration .)
    PROCEDURE       reduce using rule 8 (declaration -> procedure_declaration .)
    FUNCTION        reduce using rule 8 (declaration -> procedure_declaration .)
    USES            reduce using rule 8 (declaration -> procedure_declaration .)


state 15

    (9) declaration -> function_declaration .

    BEGIN           reduce using rule 9 (declaration -> function_declaration .)
    VAR             reduce using rule 9 (declaration -> function_declaration .)
    CONST           reduce using rule 9 (declaration -> function_declaration .)
    TYPE            reduce using rule 9 (declaration -> function_declaration .)
    PROCEDURE       reduce using rule 9 (declaration -> function_declaration .)
    FUNCTION        reduce using rule 9 (declaration -> function_declaration .)
    USES            reduce using rule 9 (declaration -> function_declaration .)


state 16

    (10) declaration -> uses_clause .

    BEGIN           reduce using rule 10 (declaration -> uses_clause .)
    VAR             reduce using rule 10 (declaration -> uses_clause .)
    CONST           reduce using rule 10 (declaration -> uses_clause .)
    TYPE            reduce using rule 10 (declaration -> uses_clause .)
    PROCEDURE       reduce using rule 10 (declaration -> uses_clause .)
    FUNCTION        reduce using rule 10 (declaration -> uses_clause .)
    USES            reduce using rule 10 (declaration -> uses_clause .)


state 17

    (14) var_declaration -> VAR . var_decl_list
    (15) var_decl_list -> . var_decl_list var_decl
    (16) var_decl_list -> . var_decl
    (17) var_decl -> . id_list COLON type SEMICOLON
    (18) id_list -> . id_list COMMA ID
    (19) id_list -> . ID

    ID              shift and go to state 43

    var_decl_list                  shift and go to state 40
    var_decl                       shift and go to state 41
    id_list                        shift and go to state 42

state 18

    (20) const_declaration -> CONST . const_list
    (21) const_list -> . const_list const_decl
    (22) const_list -> . const_decl
    (23) const_decl -> . ID EQUAL constant SEMICOLON

    ID              shift and go to state 46

    const_list                     shift and go to state 44
    const_decl                     shift and go to state 45

state 19

    (24) type_declaration -> TYPE . type_decl_list
    (25) type_decl_list -> . type_decl_list type_decl
    (26) type_decl_list -> . type_decl
    (27) type_decl -> . ID EQUAL type SEMICOLON

    ID              shift and go to state 49

    type_decl_list                 shift and go to state 47
    type_decl                      shift and go to state 48

state 20

    (28) procedure_declaration -> PROCEDURE . ID SEMICOLON block SEMICOLON
    (29) procedure_declaration -> PROCEDURE . ID LPAREN param_list RPAREN SEMICOLON block SEMICOLON

    ID              shift and go to state 50
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    statement_list                 shift and go to state 33
    statement                      shift and go to state 34
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 21

<<<<<<< HEAD
    (5) declaration_list -> declaration_list declaration .

    VAR             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    TYPE            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    PROCEDURE       reduce using rule 5 (declaration_list -> declaration_list declaration .)
    BEGIN           reduce using rule 5 (declaration_list -> declaration_list declaration .)
=======
    (30) function_declaration -> FUNCTION . ID COLON type SEMICOLON block SEMICOLON
    (31) function_declaration -> FUNCTION . ID LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLON

    ID              shift and go to state 51
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 22

<<<<<<< HEAD
    (11) var_declaration -> VAR var_declaration_list .
    (12) var_declaration_list -> var_declaration_list . var_decl
    (14) var_decl -> . id_list COLON type SEMICOLON
    (15) id_list -> . id_list COMMA ID
    (16) id_list -> . ID

    VAR             reduce using rule 11 (var_declaration -> VAR var_declaration_list .)
    CONST           reduce using rule 11 (var_declaration -> VAR var_declaration_list .)
    TYPE            reduce using rule 11 (var_declaration -> VAR var_declaration_list .)
    PROCEDURE       reduce using rule 11 (var_declaration -> VAR var_declaration_list .)
    BEGIN           reduce using rule 11 (var_declaration -> VAR var_declaration_list .)
    ID              shift and go to state 25

    var_decl                       shift and go to state 53
    id_list                        shift and go to state 24

state 23

    (13) var_declaration_list -> var_decl .

    ID              reduce using rule 13 (var_declaration_list -> var_decl .)
    VAR             reduce using rule 13 (var_declaration_list -> var_decl .)
    CONST           reduce using rule 13 (var_declaration_list -> var_decl .)
    TYPE            reduce using rule 13 (var_declaration_list -> var_decl .)
    PROCEDURE       reduce using rule 13 (var_declaration_list -> var_decl .)
    BEGIN           reduce using rule 13 (var_declaration_list -> var_decl .)
=======
    (11) uses_clause -> USES . identifier_list SEMICOLON
    (12) identifier_list -> . identifier_list COMMA ID
    (13) identifier_list -> . ID

    ID              shift and go to state 53

    identifier_list                shift and go to state 52

state 23

    (67) compound_statement -> BEGIN . statement_list END
    (46) statement_list -> . statement_list statement
    (47) statement_list -> . statement
    (48) statement -> . assignment_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . variable ASSIGN expression SEMICOLON
    (62) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (63) procedure_call -> . ID SEMICOLON
    (67) compound_statement -> . BEGIN statement_list END
    (68) if_statement -> . IF expression THEN statement else_part
    (71) while_statement -> . WHILE expression DO statement
    (72) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (73) for_statement -> . FOR ID ASSIGN expression direction expression DO statement
    (114) empty -> .
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ID              shift and go to state 35
    BEGIN           shift and go to state 23
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    REPEAT          shift and go to state 38
    FOR             shift and go to state 39
    END             reduce using rule 114 (empty -> .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! BEGIN           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! REPEAT          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]

    statement_list                 shift and go to state 54
    statement                      shift and go to state 25
    assignment_statement           shift and go to state 26
    procedure_call                 shift and go to state 27
    compound_statement             shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    repeat_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    empty                          shift and go to state 33
    variable                       shift and go to state 34

state 24

<<<<<<< HEAD
    (14) var_decl -> id_list . COLON type SEMICOLON
    (15) id_list -> id_list . COMMA ID

    COLON           shift and go to state 54
    COMMA           shift and go to state 55
=======
    (2) block -> declarations BEGIN statement_list . END
    (46) statement_list -> statement_list . statement
    (48) statement -> . assignment_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . variable ASSIGN expression SEMICOLON
    (62) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (63) procedure_call -> . ID SEMICOLON
    (67) compound_statement -> . BEGIN statement_list END
    (68) if_statement -> . IF expression THEN statement else_part
    (71) while_statement -> . WHILE expression DO statement
    (72) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (73) for_statement -> . FOR ID ASSIGN expression direction expression DO statement
    (114) empty -> .
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    END             shift and go to state 55
    ID              shift and go to state 35
    BEGIN           shift and go to state 23
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    REPEAT          shift and go to state 38
    FOR             shift and go to state 39
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

  ! END             [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! BEGIN           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! REPEAT          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]

    statement                      shift and go to state 56
    assignment_statement           shift and go to state 26
    procedure_call                 shift and go to state 27
    compound_statement             shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    repeat_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    empty                          shift and go to state 33
    variable                       shift and go to state 34

state 25

<<<<<<< HEAD
    (16) id_list -> ID .

    COLON           reduce using rule 16 (id_list -> ID .)
    COMMA           reduce using rule 16 (id_list -> ID .)
=======
    (47) statement_list -> statement .

    END             reduce using rule 47 (statement_list -> statement .)
    ID              reduce using rule 47 (statement_list -> statement .)
    BEGIN           reduce using rule 47 (statement_list -> statement .)
    IF              reduce using rule 47 (statement_list -> statement .)
    WHILE           reduce using rule 47 (statement_list -> statement .)
    REPEAT          reduce using rule 47 (statement_list -> statement .)
    FOR             reduce using rule 47 (statement_list -> statement .)
    UNTIL           reduce using rule 47 (statement_list -> statement .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 26

<<<<<<< HEAD
    (17) const_declaration -> CONST const_list .
    (18) const_list -> const_list . const_definition SEMICOLON
    (20) const_definition -> . ID EQUAL constant

    VAR             reduce using rule 17 (const_declaration -> CONST const_list .)
    CONST           reduce using rule 17 (const_declaration -> CONST const_list .)
    TYPE            reduce using rule 17 (const_declaration -> CONST const_list .)
    PROCEDURE       reduce using rule 17 (const_declaration -> CONST const_list .)
    BEGIN           reduce using rule 17 (const_declaration -> CONST const_list .)
    ID              shift and go to state 28
=======
    (48) statement -> assignment_statement .

    END             reduce using rule 48 (statement -> assignment_statement .)
    ID              reduce using rule 48 (statement -> assignment_statement .)
    BEGIN           reduce using rule 48 (statement -> assignment_statement .)
    IF              reduce using rule 48 (statement -> assignment_statement .)
    WHILE           reduce using rule 48 (statement -> assignment_statement .)
    REPEAT          reduce using rule 48 (statement -> assignment_statement .)
    FOR             reduce using rule 48 (statement -> assignment_statement .)
    UNTIL           reduce using rule 48 (statement -> assignment_statement .)
    ELSE            reduce using rule 48 (statement -> assignment_statement .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    const_definition               shift and go to state 56

state 27

<<<<<<< HEAD
    (19) const_list -> const_definition . SEMICOLON

    SEMICOLON       shift and go to state 57
=======
    (49) statement -> procedure_call .

    END             reduce using rule 49 (statement -> procedure_call .)
    ID              reduce using rule 49 (statement -> procedure_call .)
    BEGIN           reduce using rule 49 (statement -> procedure_call .)
    IF              reduce using rule 49 (statement -> procedure_call .)
    WHILE           reduce using rule 49 (statement -> procedure_call .)
    REPEAT          reduce using rule 49 (statement -> procedure_call .)
    FOR             reduce using rule 49 (statement -> procedure_call .)
    UNTIL           reduce using rule 49 (statement -> procedure_call .)
    ELSE            reduce using rule 49 (statement -> procedure_call .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 28

<<<<<<< HEAD
    (20) const_definition -> ID . EQUAL constant

    EQUAL           shift and go to state 58
=======
    (50) statement -> compound_statement .

    END             reduce using rule 50 (statement -> compound_statement .)
    ID              reduce using rule 50 (statement -> compound_statement .)
    BEGIN           reduce using rule 50 (statement -> compound_statement .)
    IF              reduce using rule 50 (statement -> compound_statement .)
    WHILE           reduce using rule 50 (statement -> compound_statement .)
    REPEAT          reduce using rule 50 (statement -> compound_statement .)
    FOR             reduce using rule 50 (statement -> compound_statement .)
    UNTIL           reduce using rule 50 (statement -> compound_statement .)
    ELSE            reduce using rule 50 (statement -> compound_statement .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 29

<<<<<<< HEAD
    (26) type_declaration -> TYPE type_list .
    (27) type_list -> type_list . type_definition SEMICOLON
    (29) type_definition -> . ID EQUAL type

    VAR             reduce using rule 26 (type_declaration -> TYPE type_list .)
    CONST           reduce using rule 26 (type_declaration -> TYPE type_list .)
    TYPE            reduce using rule 26 (type_declaration -> TYPE type_list .)
    PROCEDURE       reduce using rule 26 (type_declaration -> TYPE type_list .)
    BEGIN           reduce using rule 26 (type_declaration -> TYPE type_list .)
    ID              shift and go to state 31
=======
    (51) statement -> if_statement .

    END             reduce using rule 51 (statement -> if_statement .)
    ID              reduce using rule 51 (statement -> if_statement .)
    BEGIN           reduce using rule 51 (statement -> if_statement .)
    IF              reduce using rule 51 (statement -> if_statement .)
    WHILE           reduce using rule 51 (statement -> if_statement .)
    REPEAT          reduce using rule 51 (statement -> if_statement .)
    FOR             reduce using rule 51 (statement -> if_statement .)
    UNTIL           reduce using rule 51 (statement -> if_statement .)
    ELSE            reduce using rule 51 (statement -> if_statement .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    type_definition                shift and go to state 59

state 30

<<<<<<< HEAD
    (28) type_list -> type_definition . SEMICOLON

    SEMICOLON       shift and go to state 60
=======
    (52) statement -> while_statement .

    END             reduce using rule 52 (statement -> while_statement .)
    ID              reduce using rule 52 (statement -> while_statement .)
    BEGIN           reduce using rule 52 (statement -> while_statement .)
    IF              reduce using rule 52 (statement -> while_statement .)
    WHILE           reduce using rule 52 (statement -> while_statement .)
    REPEAT          reduce using rule 52 (statement -> while_statement .)
    FOR             reduce using rule 52 (statement -> while_statement .)
    UNTIL           reduce using rule 52 (statement -> while_statement .)
    ELSE            reduce using rule 52 (statement -> while_statement .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 31

<<<<<<< HEAD
    (29) type_definition -> ID . EQUAL type

    EQUAL           shift and go to state 61
=======
    (53) statement -> repeat_statement .

    END             reduce using rule 53 (statement -> repeat_statement .)
    ID              reduce using rule 53 (statement -> repeat_statement .)
    BEGIN           reduce using rule 53 (statement -> repeat_statement .)
    IF              reduce using rule 53 (statement -> repeat_statement .)
    WHILE           reduce using rule 53 (statement -> repeat_statement .)
    REPEAT          reduce using rule 53 (statement -> repeat_statement .)
    FOR             reduce using rule 53 (statement -> repeat_statement .)
    UNTIL           reduce using rule 53 (statement -> repeat_statement .)
    ELSE            reduce using rule 53 (statement -> repeat_statement .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 32

<<<<<<< HEAD
    (21) procedure_declaration -> PROCEDURE ID . LPAREN param_list RPAREN SEMICOLON block

    LPAREN          shift and go to state 62
=======
    (54) statement -> for_statement .

    END             reduce using rule 54 (statement -> for_statement .)
    ID              reduce using rule 54 (statement -> for_statement .)
    BEGIN           reduce using rule 54 (statement -> for_statement .)
    IF              reduce using rule 54 (statement -> for_statement .)
    WHILE           reduce using rule 54 (statement -> for_statement .)
    REPEAT          reduce using rule 54 (statement -> for_statement .)
    FOR             reduce using rule 54 (statement -> for_statement .)
    UNTIL           reduce using rule 54 (statement -> for_statement .)
    ELSE            reduce using rule 54 (statement -> for_statement .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 33

<<<<<<< HEAD
    (49) compound_statement -> BEGIN statement_list . END
    (51) statement_list -> statement_list . SEMICOLON statement

    END             shift and go to state 63
    SEMICOLON       shift and go to state 64
=======
    (55) statement -> empty .

    END             reduce using rule 55 (statement -> empty .)
    ID              reduce using rule 55 (statement -> empty .)
    BEGIN           reduce using rule 55 (statement -> empty .)
    IF              reduce using rule 55 (statement -> empty .)
    WHILE           reduce using rule 55 (statement -> empty .)
    REPEAT          reduce using rule 55 (statement -> empty .)
    FOR             reduce using rule 55 (statement -> empty .)
    UNTIL           reduce using rule 55 (statement -> empty .)
    ELSE            reduce using rule 55 (statement -> empty .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 34

<<<<<<< HEAD
    (50) statement_list -> statement .

    END             reduce using rule 50 (statement_list -> statement .)
    SEMICOLON       reduce using rule 50 (statement_list -> statement .)
    UNTIL           reduce using rule 50 (statement_list -> statement .)
=======
    (56) assignment_statement -> variable . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 57
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 35

<<<<<<< HEAD
    (52) statement -> simple_statement .

    END             reduce using rule 52 (statement -> simple_statement .)
    SEMICOLON       reduce using rule 52 (statement -> simple_statement .)
    UNTIL           reduce using rule 52 (statement -> simple_statement .)
    ELSE            reduce using rule 52 (statement -> simple_statement .)
=======
    (62) procedure_call -> ID . LPAREN args RPAREN SEMICOLON
    (63) procedure_call -> ID . SEMICOLON
    (57) variable -> ID .
    (58) variable -> ID . LBRACKET expression_list RBRACKET
    (59) variable -> ID . DOT ID

    LPAREN          shift and go to state 58
    SEMICOLON       shift and go to state 59
    ASSIGN          reduce using rule 57 (variable -> ID .)
    LBRACKET        shift and go to state 60
    DOT             shift and go to state 61
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 36

<<<<<<< HEAD
    (53) statement -> structured_statement .

    END             reduce using rule 53 (statement -> structured_statement .)
    SEMICOLON       reduce using rule 53 (statement -> structured_statement .)
    UNTIL           reduce using rule 53 (statement -> structured_statement .)
    ELSE            reduce using rule 53 (statement -> structured_statement .)
=======
    (68) if_statement -> IF . expression THEN statement else_part
    (76) expression -> . simple_expression relop_opt
    (86) simple_expression -> . term
    (87) simple_expression -> . simple_expression addop term
    (92) term -> . factor
    (93) term -> . term mulop factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 62
    simple_expression              shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    variable                       shift and go to state 66

state 37

<<<<<<< HEAD
    (54) simple_statement -> assignment_statement .

    END             reduce using rule 54 (simple_statement -> assignment_statement .)
    SEMICOLON       reduce using rule 54 (simple_statement -> assignment_statement .)
    UNTIL           reduce using rule 54 (simple_statement -> assignment_statement .)
    ELSE            reduce using rule 54 (simple_statement -> assignment_statement .)
=======
    (71) while_statement -> WHILE . expression DO statement
    (76) expression -> . simple_expression relop_opt
    (86) simple_expression -> . term
    (87) simple_expression -> . simple_expression addop term
    (92) term -> . factor
    (93) term -> . term mulop factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 74
    simple_expression              shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    variable                       shift and go to state 66

state 38

<<<<<<< HEAD
    (55) simple_statement -> procedure_call_statement .

    END             reduce using rule 55 (simple_statement -> procedure_call_statement .)
    SEMICOLON       reduce using rule 55 (simple_statement -> procedure_call_statement .)
    UNTIL           reduce using rule 55 (simple_statement -> procedure_call_statement .)
    ELSE            reduce using rule 55 (simple_statement -> procedure_call_statement .)
=======
    (72) repeat_statement -> REPEAT . statement_list UNTIL expression SEMICOLON
    (46) statement_list -> . statement_list statement
    (47) statement_list -> . statement
    (48) statement -> . assignment_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . variable ASSIGN expression SEMICOLON
    (62) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (63) procedure_call -> . ID SEMICOLON
    (67) compound_statement -> . BEGIN statement_list END
    (68) if_statement -> . IF expression THEN statement else_part
    (71) while_statement -> . WHILE expression DO statement
    (72) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (73) for_statement -> . FOR ID ASSIGN expression direction expression DO statement
    (114) empty -> .
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ID              shift and go to state 35
    BEGIN           shift and go to state 23
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    REPEAT          shift and go to state 38
    FOR             shift and go to state 39
    UNTIL           reduce using rule 114 (empty -> .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! BEGIN           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! REPEAT          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]

    statement_list                 shift and go to state 75
    statement                      shift and go to state 25
    assignment_statement           shift and go to state 26
    procedure_call                 shift and go to state 27
    compound_statement             shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    repeat_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    empty                          shift and go to state 33
    variable                       shift and go to state 34

state 39

<<<<<<< HEAD
    (56) simple_statement -> empty .

    END             reduce using rule 56 (simple_statement -> empty .)
    SEMICOLON       reduce using rule 56 (simple_statement -> empty .)
    UNTIL           reduce using rule 56 (simple_statement -> empty .)
    ELSE            reduce using rule 56 (simple_statement -> empty .)
=======
    (73) for_statement -> FOR . ID ASSIGN expression direction expression DO statement

    ID              shift and go to state 76
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 40

<<<<<<< HEAD
    (57) structured_statement -> compound_statement .

    END             reduce using rule 57 (structured_statement -> compound_statement .)
    SEMICOLON       reduce using rule 57 (structured_statement -> compound_statement .)
    UNTIL           reduce using rule 57 (structured_statement -> compound_statement .)
    ELSE            reduce using rule 57 (structured_statement -> compound_statement .)
=======
    (14) var_declaration -> VAR var_decl_list .
    (15) var_decl_list -> var_decl_list . var_decl
    (17) var_decl -> . id_list COLON type SEMICOLON
    (18) id_list -> . id_list COMMA ID
    (19) id_list -> . ID

    BEGIN           reduce using rule 14 (var_declaration -> VAR var_decl_list .)
    VAR             reduce using rule 14 (var_declaration -> VAR var_decl_list .)
    CONST           reduce using rule 14 (var_declaration -> VAR var_decl_list .)
    TYPE            reduce using rule 14 (var_declaration -> VAR var_decl_list .)
    PROCEDURE       reduce using rule 14 (var_declaration -> VAR var_decl_list .)
    FUNCTION        reduce using rule 14 (var_declaration -> VAR var_decl_list .)
    USES            reduce using rule 14 (var_declaration -> VAR var_decl_list .)
    ID              shift and go to state 43
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    var_decl                       shift and go to state 77
    id_list                        shift and go to state 42

state 41

<<<<<<< HEAD
    (58) structured_statement -> if_statement .

    END             reduce using rule 58 (structured_statement -> if_statement .)
    SEMICOLON       reduce using rule 58 (structured_statement -> if_statement .)
    UNTIL           reduce using rule 58 (structured_statement -> if_statement .)
    ELSE            reduce using rule 58 (structured_statement -> if_statement .)
=======
    (16) var_decl_list -> var_decl .

    ID              reduce using rule 16 (var_decl_list -> var_decl .)
    BEGIN           reduce using rule 16 (var_decl_list -> var_decl .)
    VAR             reduce using rule 16 (var_decl_list -> var_decl .)
    CONST           reduce using rule 16 (var_decl_list -> var_decl .)
    TYPE            reduce using rule 16 (var_decl_list -> var_decl .)
    PROCEDURE       reduce using rule 16 (var_decl_list -> var_decl .)
    FUNCTION        reduce using rule 16 (var_decl_list -> var_decl .)
    USES            reduce using rule 16 (var_decl_list -> var_decl .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 42

<<<<<<< HEAD
    (59) structured_statement -> while_statement .

    END             reduce using rule 59 (structured_statement -> while_statement .)
    SEMICOLON       reduce using rule 59 (structured_statement -> while_statement .)
    UNTIL           reduce using rule 59 (structured_statement -> while_statement .)
    ELSE            reduce using rule 59 (structured_statement -> while_statement .)
=======
    (17) var_decl -> id_list . COLON type SEMICOLON
    (18) id_list -> id_list . COMMA ID

    COLON           shift and go to state 78
    COMMA           shift and go to state 79
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 43

<<<<<<< HEAD
    (60) structured_statement -> repeat_statement .

    END             reduce using rule 60 (structured_statement -> repeat_statement .)
    SEMICOLON       reduce using rule 60 (structured_statement -> repeat_statement .)
    UNTIL           reduce using rule 60 (structured_statement -> repeat_statement .)
    ELSE            reduce using rule 60 (structured_statement -> repeat_statement .)
=======
    (19) id_list -> ID .

    COLON           reduce using rule 19 (id_list -> ID .)
    COMMA           reduce using rule 19 (id_list -> ID .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 44

<<<<<<< HEAD
    (61) structured_statement -> for_statement .

    END             reduce using rule 61 (structured_statement -> for_statement .)
    SEMICOLON       reduce using rule 61 (structured_statement -> for_statement .)
    UNTIL           reduce using rule 61 (structured_statement -> for_statement .)
    ELSE            reduce using rule 61 (structured_statement -> for_statement .)


state 45

    (62) structured_statement -> record_assignment .

    END             reduce using rule 62 (structured_statement -> record_assignment .)
    SEMICOLON       reduce using rule 62 (structured_statement -> record_assignment .)
    UNTIL           reduce using rule 62 (structured_statement -> record_assignment .)
    ELSE            reduce using rule 62 (structured_statement -> record_assignment .)
=======
    (20) const_declaration -> CONST const_list .
    (21) const_list -> const_list . const_decl
    (23) const_decl -> . ID EQUAL constant SEMICOLON

    BEGIN           reduce using rule 20 (const_declaration -> CONST const_list .)
    VAR             reduce using rule 20 (const_declaration -> CONST const_list .)
    CONST           reduce using rule 20 (const_declaration -> CONST const_list .)
    TYPE            reduce using rule 20 (const_declaration -> CONST const_list .)
    PROCEDURE       reduce using rule 20 (const_declaration -> CONST const_list .)
    FUNCTION        reduce using rule 20 (const_declaration -> CONST const_list .)
    USES            reduce using rule 20 (const_declaration -> CONST const_list .)
    ID              shift and go to state 46

    const_decl                     shift and go to state 80

state 45

    (22) const_list -> const_decl .

    ID              reduce using rule 22 (const_list -> const_decl .)
    BEGIN           reduce using rule 22 (const_list -> const_decl .)
    VAR             reduce using rule 22 (const_list -> const_decl .)
    CONST           reduce using rule 22 (const_list -> const_decl .)
    TYPE            reduce using rule 22 (const_list -> const_decl .)
    PROCEDURE       reduce using rule 22 (const_list -> const_decl .)
    FUNCTION        reduce using rule 22 (const_list -> const_decl .)
    USES            reduce using rule 22 (const_list -> const_decl .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 46

<<<<<<< HEAD
    (63) assignment_statement -> variable . ASSIGN expression
    (65) variable -> variable . DOT ID
    (66) variable -> variable . LBRACKET expression_list RBRACKET

    ASSIGN          shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
=======
    (23) const_decl -> ID . EQUAL constant SEMICOLON

    EQUAL           shift and go to state 81
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 47

<<<<<<< HEAD
    (77) procedure_call_statement -> procedure_call .

    END             reduce using rule 77 (procedure_call_statement -> procedure_call .)
    SEMICOLON       reduce using rule 77 (procedure_call_statement -> procedure_call .)
    UNTIL           reduce using rule 77 (procedure_call_statement -> procedure_call .)
    ELSE            reduce using rule 77 (procedure_call_statement -> procedure_call .)
=======
    (24) type_declaration -> TYPE type_decl_list .
    (25) type_decl_list -> type_decl_list . type_decl
    (27) type_decl -> . ID EQUAL type SEMICOLON

    BEGIN           reduce using rule 24 (type_declaration -> TYPE type_decl_list .)
    VAR             reduce using rule 24 (type_declaration -> TYPE type_decl_list .)
    CONST           reduce using rule 24 (type_declaration -> TYPE type_decl_list .)
    TYPE            reduce using rule 24 (type_declaration -> TYPE type_decl_list .)
    PROCEDURE       reduce using rule 24 (type_declaration -> TYPE type_decl_list .)
    FUNCTION        reduce using rule 24 (type_declaration -> TYPE type_decl_list .)
    USES            reduce using rule 24 (type_declaration -> TYPE type_decl_list .)
    ID              shift and go to state 49
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    type_decl                      shift and go to state 82

state 48

<<<<<<< HEAD
    (70) if_statement -> IF . expression THEN statement else_part
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 68
    variable                       shift and go to state 71

state 49

    (73) while_statement -> WHILE . expression DO statement
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (26) type_decl_list -> type_decl .

    ID              reduce using rule 26 (type_decl_list -> type_decl .)
    BEGIN           reduce using rule 26 (type_decl_list -> type_decl .)
    VAR             reduce using rule 26 (type_decl_list -> type_decl .)
    CONST           reduce using rule 26 (type_decl_list -> type_decl .)
    TYPE            reduce using rule 26 (type_decl_list -> type_decl .)
    PROCEDURE       reduce using rule 26 (type_decl_list -> type_decl .)
    FUNCTION        reduce using rule 26 (type_decl_list -> type_decl .)
    USES            reduce using rule 26 (type_decl_list -> type_decl .)


state 49

    (27) type_decl -> ID . EQUAL type SEMICOLON

    EQUAL           shift and go to state 83
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 76
    variable                       shift and go to state 71

state 50

<<<<<<< HEAD
    (74) repeat_statement -> REPEAT . statement_list UNTIL expression
    (50) statement_list -> . statement
    (51) statement_list -> . statement_list SEMICOLON statement
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    UNTIL           reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52
=======
    (28) procedure_declaration -> PROCEDURE ID . SEMICOLON block SEMICOLON
    (29) procedure_declaration -> PROCEDURE ID . LPAREN param_list RPAREN SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 84
    LPAREN          shift and go to state 85
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    statement_list                 shift and go to state 77
    statement                      shift and go to state 34
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 51

<<<<<<< HEAD
    (75) for_statement -> FOR . ID ASSIGN expression TO expression DO statement
    (76) for_statement -> FOR . ID ASSIGN expression DOWNTO expression DO statement

    ID              shift and go to state 78
=======
    (30) function_declaration -> FUNCTION ID . COLON type SEMICOLON block SEMICOLON
    (31) function_declaration -> FUNCTION ID . LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLON

    COLON           shift and go to state 86
    LPAREN          shift and go to state 87
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 52

<<<<<<< HEAD
    (69) record_assignment -> ID . DOT ID ASSIGN expression
    (64) variable -> ID .
    (78) procedure_call -> ID . LPAREN args RPAREN
    (79) procedure_call -> ID .

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 79
    ASSIGN          reduce using rule 64 (variable -> ID .)
    LBRACKET        reduce using rule 64 (variable -> ID .)
    LPAREN          shift and go to state 80
    END             reduce using rule 79 (procedure_call -> ID .)
    SEMICOLON       reduce using rule 79 (procedure_call -> ID .)
    UNTIL           reduce using rule 79 (procedure_call -> ID .)
    ELSE            reduce using rule 79 (procedure_call -> ID .)

  ! DOT             [ reduce using rule 64 (variable -> ID .) ]
=======
    (11) uses_clause -> USES identifier_list . SEMICOLON
    (12) identifier_list -> identifier_list . COMMA ID

    SEMICOLON       shift and go to state 88
    COMMA           shift and go to state 89
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 53

<<<<<<< HEAD
    (12) var_declaration_list -> var_declaration_list var_decl .

    ID              reduce using rule 12 (var_declaration_list -> var_declaration_list var_decl .)
    VAR             reduce using rule 12 (var_declaration_list -> var_declaration_list var_decl .)
    CONST           reduce using rule 12 (var_declaration_list -> var_declaration_list var_decl .)
    TYPE            reduce using rule 12 (var_declaration_list -> var_declaration_list var_decl .)
    PROCEDURE       reduce using rule 12 (var_declaration_list -> var_declaration_list var_decl .)
    BEGIN           reduce using rule 12 (var_declaration_list -> var_declaration_list var_decl .)
=======
    (13) identifier_list -> ID .

    SEMICOLON       reduce using rule 13 (identifier_list -> ID .)
    COMMA           reduce using rule 13 (identifier_list -> ID .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 54

<<<<<<< HEAD
    (14) var_decl -> id_list COLON . type SEMICOLON
    (30) type -> . simple_type
    (31) type -> . array_type
    (32) type -> . record_type
    (33) simple_type -> . subrange_type
    (34) simple_type -> . type_identifier
    (36) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (38) record_type -> . RECORD record_fields END
    (35) subrange_type -> . constant DOTDOT constant
    (43) type_identifier -> . ID
    (44) type_identifier -> . predefined_type
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (45) predefined_type -> . INTEGER
    (46) predefined_type -> . REAL
    (47) predefined_type -> . BOOLEAN
    (48) predefined_type -> . STRING
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    ARRAY           shift and go to state 87
    RECORD          shift and go to state 88
    ID              shift and go to state 90
    STRING_LITERAL  shift and go to state 94
    INTEGER         shift and go to state 96
    REAL            shift and go to state 97
    BOOLEAN         shift and go to state 98
    STRING          shift and go to state 99
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103

    type                           shift and go to state 81
    simple_type                    shift and go to state 82
    array_type                     shift and go to state 83
    record_type                    shift and go to state 84
    subrange_type                  shift and go to state 85
    type_identifier                shift and go to state 86
    constant                       shift and go to state 89
    predefined_type                shift and go to state 91
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 55

    (15) id_list -> id_list COMMA . ID

    ID              shift and go to state 104
=======
    (67) compound_statement -> BEGIN statement_list . END
    (46) statement_list -> statement_list . statement
    (48) statement -> . assignment_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . variable ASSIGN expression SEMICOLON
    (62) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (63) procedure_call -> . ID SEMICOLON
    (67) compound_statement -> . BEGIN statement_list END
    (68) if_statement -> . IF expression THEN statement else_part
    (71) while_statement -> . WHILE expression DO statement
    (72) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (73) for_statement -> . FOR ID ASSIGN expression direction expression DO statement
    (114) empty -> .
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    END             shift and go to state 90
    ID              shift and go to state 35
    BEGIN           shift and go to state 23
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    REPEAT          shift and go to state 38
    FOR             shift and go to state 39

  ! END             [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! BEGIN           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! REPEAT          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]

    statement                      shift and go to state 56
    assignment_statement           shift and go to state 26
    procedure_call                 shift and go to state 27
    compound_statement             shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    repeat_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    empty                          shift and go to state 33
    variable                       shift and go to state 34

state 55

    (2) block -> declarations BEGIN statement_list END .

    DOT             reduce using rule 2 (block -> declarations BEGIN statement_list END .)
    SEMICOLON       reduce using rule 2 (block -> declarations BEGIN statement_list END .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 56

<<<<<<< HEAD
    (18) const_list -> const_list const_definition . SEMICOLON

    SEMICOLON       shift and go to state 105
=======
    (46) statement_list -> statement_list statement .

    END             reduce using rule 46 (statement_list -> statement_list statement .)
    ID              reduce using rule 46 (statement_list -> statement_list statement .)
    BEGIN           reduce using rule 46 (statement_list -> statement_list statement .)
    IF              reduce using rule 46 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 46 (statement_list -> statement_list statement .)
    REPEAT          reduce using rule 46 (statement_list -> statement_list statement .)
    FOR             reduce using rule 46 (statement_list -> statement_list statement .)
    UNTIL           reduce using rule 46 (statement_list -> statement_list statement .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 57

<<<<<<< HEAD
    (19) const_list -> const_definition SEMICOLON .

    ID              reduce using rule 19 (const_list -> const_definition SEMICOLON .)
    VAR             reduce using rule 19 (const_list -> const_definition SEMICOLON .)
    CONST           reduce using rule 19 (const_list -> const_definition SEMICOLON .)
    TYPE            reduce using rule 19 (const_list -> const_definition SEMICOLON .)
    PROCEDURE       reduce using rule 19 (const_list -> const_definition SEMICOLON .)
    BEGIN           reduce using rule 19 (const_list -> const_definition SEMICOLON .)
=======
    (56) assignment_statement -> variable ASSIGN . expression SEMICOLON
    (76) expression -> . simple_expression relop_opt
    (86) simple_expression -> . term
    (87) simple_expression -> . simple_expression addop term
    (92) term -> . factor
    (93) term -> . term mulop factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    variable                       shift and go to state 66
    expression                     shift and go to state 91
    simple_expression              shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65

state 58

<<<<<<< HEAD
    (20) const_definition -> ID EQUAL . constant
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    STRING_LITERAL  shift and go to state 94
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    ID              shift and go to state 106

    constant                       shift and go to state 107
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 59

    (27) type_list -> type_list type_definition . SEMICOLON

    SEMICOLON       shift and go to state 108
=======
    (62) procedure_call -> ID LPAREN . args RPAREN SEMICOLON
    (64) args -> . args COMMA expression
    (65) args -> . expression
    (66) args -> . empty
    (76) expression -> . simple_expression relop_opt
    (114) empty -> .
    (86) simple_expression -> . term
    (87) simple_expression -> . simple_expression addop term
    (92) term -> . factor
    (93) term -> . term mulop factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    RPAREN          reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)
    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    args                           shift and go to state 92
    expression                     shift and go to state 93
    empty                          shift and go to state 94
    simple_expression              shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    variable                       shift and go to state 66

state 59

    (63) procedure_call -> ID SEMICOLON .

    END             reduce using rule 63 (procedure_call -> ID SEMICOLON .)
    ID              reduce using rule 63 (procedure_call -> ID SEMICOLON .)
    BEGIN           reduce using rule 63 (procedure_call -> ID SEMICOLON .)
    IF              reduce using rule 63 (procedure_call -> ID SEMICOLON .)
    WHILE           reduce using rule 63 (procedure_call -> ID SEMICOLON .)
    REPEAT          reduce using rule 63 (procedure_call -> ID SEMICOLON .)
    FOR             reduce using rule 63 (procedure_call -> ID SEMICOLON .)
    UNTIL           reduce using rule 63 (procedure_call -> ID SEMICOLON .)
    ELSE            reduce using rule 63 (procedure_call -> ID SEMICOLON .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 60

<<<<<<< HEAD
    (28) type_list -> type_definition SEMICOLON .

    ID              reduce using rule 28 (type_list -> type_definition SEMICOLON .)
    VAR             reduce using rule 28 (type_list -> type_definition SEMICOLON .)
    CONST           reduce using rule 28 (type_list -> type_definition SEMICOLON .)
    TYPE            reduce using rule 28 (type_list -> type_definition SEMICOLON .)
    PROCEDURE       reduce using rule 28 (type_list -> type_definition SEMICOLON .)
    BEGIN           reduce using rule 28 (type_list -> type_definition SEMICOLON .)
=======
    (58) variable -> ID LBRACKET . expression_list RBRACKET
    (60) expression_list -> . expression_list COMMA expression
    (61) expression_list -> . expression
    (76) expression -> . simple_expression relop_opt
    (86) simple_expression -> . term
    (87) simple_expression -> . simple_expression addop term
    (92) term -> . factor
    (93) term -> . term mulop factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression_list                shift and go to state 95
    expression                     shift and go to state 96
    simple_expression              shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    variable                       shift and go to state 66

state 61

<<<<<<< HEAD
    (29) type_definition -> ID EQUAL . type
    (30) type -> . simple_type
    (31) type -> . array_type
    (32) type -> . record_type
    (33) simple_type -> . subrange_type
    (34) simple_type -> . type_identifier
    (36) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (38) record_type -> . RECORD record_fields END
    (35) subrange_type -> . constant DOTDOT constant
    (43) type_identifier -> . ID
    (44) type_identifier -> . predefined_type
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (45) predefined_type -> . INTEGER
    (46) predefined_type -> . REAL
    (47) predefined_type -> . BOOLEAN
    (48) predefined_type -> . STRING
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    ARRAY           shift and go to state 87
    RECORD          shift and go to state 88
    ID              shift and go to state 90
    STRING_LITERAL  shift and go to state 94
    INTEGER         shift and go to state 96
    REAL            shift and go to state 97
    BOOLEAN         shift and go to state 98
    STRING          shift and go to state 99
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
=======
    (59) variable -> ID DOT . ID

    ID              shift and go to state 97
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    type                           shift and go to state 109
    simple_type                    shift and go to state 82
    array_type                     shift and go to state 83
    record_type                    shift and go to state 84
    subrange_type                  shift and go to state 85
    type_identifier                shift and go to state 86
    constant                       shift and go to state 89
    predefined_type                shift and go to state 91
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 62

<<<<<<< HEAD
    (21) procedure_declaration -> PROCEDURE ID LPAREN . param_list RPAREN SEMICOLON block
    (22) param_list -> . param_list SEMICOLON param
    (23) param_list -> . param
    (24) param_list -> . empty
    (25) param -> . ID COLON type
    (113) empty -> .

    ID              shift and go to state 110
    RPAREN          reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)

    param_list                     shift and go to state 111
    param                          shift and go to state 112
    empty                          shift and go to state 113

state 63

    (49) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    VAR             reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    CONST           reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    TYPE            reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    PROCEDURE       reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    BEGIN           reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    UNTIL           reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 49 (compound_statement -> BEGIN statement_list END .)


state 64

    (51) statement_list -> statement_list SEMICOLON . statement
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    UNTIL           reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52

    statement                      shift and go to state 114
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 65

    (63) assignment_statement -> variable ASSIGN . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (68) if_statement -> IF expression . THEN statement else_part

    THEN            shift and go to state 98


state 63

    (76) expression -> simple_expression . relop_opt
    (87) simple_expression -> simple_expression . addop term
    (77) relop_opt -> . relop simple_expression
    (78) relop_opt -> . empty
    (88) addop -> . PLUS
    (89) addop -> . MINUS
    (90) addop -> . OR
    (91) addop -> . XOR
    (79) relop -> . EQUAL
    (80) relop -> . NEQUAL
    (81) relop -> . LT
    (82) relop -> . LE
    (83) relop -> . GT
    (84) relop -> . GE
    (85) relop -> . IN
    (114) empty -> .

    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    OR              shift and go to state 105
    XOR             shift and go to state 106
    EQUAL           shift and go to state 107
    NEQUAL          shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    IN              shift and go to state 113
    THEN            reduce using rule 114 (empty -> .)
    DO              reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    RPAREN          reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)
    RBRACKET        reduce using rule 114 (empty -> .)
    TO              reduce using rule 114 (empty -> .)
    DOWNTO          reduce using rule 114 (empty -> .)

    relop_opt                      shift and go to state 99
    addop                          shift and go to state 100
    relop                          shift and go to state 101
    empty                          shift and go to state 102

state 64

    (86) simple_expression -> term .
    (93) term -> term . mulop factor
    (94) mulop -> . TIMES
    (95) mulop -> . DIVIDE
    (96) mulop -> . DIVIDE_INT
    (97) mulop -> . MODULO
    (98) mulop -> . DIV
    (99) mulop -> . MOD
    (100) mulop -> . AND
    (101) mulop -> . SHL
    (102) mulop -> . SHR

    PLUS            reduce using rule 86 (simple_expression -> term .)
    MINUS           reduce using rule 86 (simple_expression -> term .)
    OR              reduce using rule 86 (simple_expression -> term .)
    XOR             reduce using rule 86 (simple_expression -> term .)
    EQUAL           reduce using rule 86 (simple_expression -> term .)
    NEQUAL          reduce using rule 86 (simple_expression -> term .)
    LT              reduce using rule 86 (simple_expression -> term .)
    LE              reduce using rule 86 (simple_expression -> term .)
    GT              reduce using rule 86 (simple_expression -> term .)
    GE              reduce using rule 86 (simple_expression -> term .)
    IN              reduce using rule 86 (simple_expression -> term .)
    THEN            reduce using rule 86 (simple_expression -> term .)
    DO              reduce using rule 86 (simple_expression -> term .)
    SEMICOLON       reduce using rule 86 (simple_expression -> term .)
    RPAREN          reduce using rule 86 (simple_expression -> term .)
    COMMA           reduce using rule 86 (simple_expression -> term .)
    RBRACKET        reduce using rule 86 (simple_expression -> term .)
    TO              reduce using rule 86 (simple_expression -> term .)
    DOWNTO          reduce using rule 86 (simple_expression -> term .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116
    DIVIDE_INT      shift and go to state 117
    MODULO          shift and go to state 118
    DIV             shift and go to state 119
    MOD             shift and go to state 120
    AND             shift and go to state 121
    SHL             shift and go to state 122
    SHR             shift and go to state 123

    mulop                          shift and go to state 114

state 65

    (92) term -> factor .

    TIMES           reduce using rule 92 (term -> factor .)
    DIVIDE          reduce using rule 92 (term -> factor .)
    DIVIDE_INT      reduce using rule 92 (term -> factor .)
    MODULO          reduce using rule 92 (term -> factor .)
    DIV             reduce using rule 92 (term -> factor .)
    MOD             reduce using rule 92 (term -> factor .)
    AND             reduce using rule 92 (term -> factor .)
    SHL             reduce using rule 92 (term -> factor .)
    SHR             reduce using rule 92 (term -> factor .)
    PLUS            reduce using rule 92 (term -> factor .)
    MINUS           reduce using rule 92 (term -> factor .)
    OR              reduce using rule 92 (term -> factor .)
    XOR             reduce using rule 92 (term -> factor .)
    EQUAL           reduce using rule 92 (term -> factor .)
    NEQUAL          reduce using rule 92 (term -> factor .)
    LT              reduce using rule 92 (term -> factor .)
    LE              reduce using rule 92 (term -> factor .)
    GT              reduce using rule 92 (term -> factor .)
    GE              reduce using rule 92 (term -> factor .)
    IN              reduce using rule 92 (term -> factor .)
    THEN            reduce using rule 92 (term -> factor .)
    DO              reduce using rule 92 (term -> factor .)
    SEMICOLON       reduce using rule 92 (term -> factor .)
    RPAREN          reduce using rule 92 (term -> factor .)
    COMMA           reduce using rule 92 (term -> factor .)
    RBRACKET        reduce using rule 92 (term -> factor .)
    TO              reduce using rule 92 (term -> factor .)
    DOWNTO          reduce using rule 92 (term -> factor .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    variable                       shift and go to state 71
    expression                     shift and go to state 115

state 66

<<<<<<< HEAD
    (65) variable -> variable DOT . ID

    ID              shift and go to state 116
=======
    (103) factor -> variable .

    TIMES           reduce using rule 103 (factor -> variable .)
    DIVIDE          reduce using rule 103 (factor -> variable .)
    DIVIDE_INT      reduce using rule 103 (factor -> variable .)
    MODULO          reduce using rule 103 (factor -> variable .)
    DIV             reduce using rule 103 (factor -> variable .)
    MOD             reduce using rule 103 (factor -> variable .)
    AND             reduce using rule 103 (factor -> variable .)
    SHL             reduce using rule 103 (factor -> variable .)
    SHR             reduce using rule 103 (factor -> variable .)
    PLUS            reduce using rule 103 (factor -> variable .)
    MINUS           reduce using rule 103 (factor -> variable .)
    OR              reduce using rule 103 (factor -> variable .)
    XOR             reduce using rule 103 (factor -> variable .)
    EQUAL           reduce using rule 103 (factor -> variable .)
    NEQUAL          reduce using rule 103 (factor -> variable .)
    LT              reduce using rule 103 (factor -> variable .)
    LE              reduce using rule 103 (factor -> variable .)
    GT              reduce using rule 103 (factor -> variable .)
    GE              reduce using rule 103 (factor -> variable .)
    IN              reduce using rule 103 (factor -> variable .)
    THEN            reduce using rule 103 (factor -> variable .)
    DO              reduce using rule 103 (factor -> variable .)
    SEMICOLON       reduce using rule 103 (factor -> variable .)
    RPAREN          reduce using rule 103 (factor -> variable .)
    COMMA           reduce using rule 103 (factor -> variable .)
    RBRACKET        reduce using rule 103 (factor -> variable .)
    TO              reduce using rule 103 (factor -> variable .)
    DOWNTO          reduce using rule 103 (factor -> variable .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 67

<<<<<<< HEAD
    (66) variable -> variable LBRACKET . expression_list RBRACKET
    (67) expression_list -> . expression
    (68) expression_list -> . expression_list COMMA expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (104) factor -> INTEGER_CONST .

    TIMES           reduce using rule 104 (factor -> INTEGER_CONST .)
    DIVIDE          reduce using rule 104 (factor -> INTEGER_CONST .)
    DIVIDE_INT      reduce using rule 104 (factor -> INTEGER_CONST .)
    MODULO          reduce using rule 104 (factor -> INTEGER_CONST .)
    DIV             reduce using rule 104 (factor -> INTEGER_CONST .)
    MOD             reduce using rule 104 (factor -> INTEGER_CONST .)
    AND             reduce using rule 104 (factor -> INTEGER_CONST .)
    SHL             reduce using rule 104 (factor -> INTEGER_CONST .)
    SHR             reduce using rule 104 (factor -> INTEGER_CONST .)
    PLUS            reduce using rule 104 (factor -> INTEGER_CONST .)
    MINUS           reduce using rule 104 (factor -> INTEGER_CONST .)
    OR              reduce using rule 104 (factor -> INTEGER_CONST .)
    XOR             reduce using rule 104 (factor -> INTEGER_CONST .)
    EQUAL           reduce using rule 104 (factor -> INTEGER_CONST .)
    NEQUAL          reduce using rule 104 (factor -> INTEGER_CONST .)
    LT              reduce using rule 104 (factor -> INTEGER_CONST .)
    LE              reduce using rule 104 (factor -> INTEGER_CONST .)
    GT              reduce using rule 104 (factor -> INTEGER_CONST .)
    GE              reduce using rule 104 (factor -> INTEGER_CONST .)
    IN              reduce using rule 104 (factor -> INTEGER_CONST .)
    THEN            reduce using rule 104 (factor -> INTEGER_CONST .)
    DO              reduce using rule 104 (factor -> INTEGER_CONST .)
    SEMICOLON       reduce using rule 104 (factor -> INTEGER_CONST .)
    RPAREN          reduce using rule 104 (factor -> INTEGER_CONST .)
    COMMA           reduce using rule 104 (factor -> INTEGER_CONST .)
    RBRACKET        reduce using rule 104 (factor -> INTEGER_CONST .)
    TO              reduce using rule 104 (factor -> INTEGER_CONST .)
    DOWNTO          reduce using rule 104 (factor -> INTEGER_CONST .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    variable                       shift and go to state 71
    expression_list                shift and go to state 117
    expression                     shift and go to state 118

state 68

<<<<<<< HEAD
    (70) if_statement -> IF expression . THEN statement else_part
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            shift and go to state 119
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134
=======
    (105) factor -> REAL_CONST .

    TIMES           reduce using rule 105 (factor -> REAL_CONST .)
    DIVIDE          reduce using rule 105 (factor -> REAL_CONST .)
    DIVIDE_INT      reduce using rule 105 (factor -> REAL_CONST .)
    MODULO          reduce using rule 105 (factor -> REAL_CONST .)
    DIV             reduce using rule 105 (factor -> REAL_CONST .)
    MOD             reduce using rule 105 (factor -> REAL_CONST .)
    AND             reduce using rule 105 (factor -> REAL_CONST .)
    SHL             reduce using rule 105 (factor -> REAL_CONST .)
    SHR             reduce using rule 105 (factor -> REAL_CONST .)
    PLUS            reduce using rule 105 (factor -> REAL_CONST .)
    MINUS           reduce using rule 105 (factor -> REAL_CONST .)
    OR              reduce using rule 105 (factor -> REAL_CONST .)
    XOR             reduce using rule 105 (factor -> REAL_CONST .)
    EQUAL           reduce using rule 105 (factor -> REAL_CONST .)
    NEQUAL          reduce using rule 105 (factor -> REAL_CONST .)
    LT              reduce using rule 105 (factor -> REAL_CONST .)
    LE              reduce using rule 105 (factor -> REAL_CONST .)
    GT              reduce using rule 105 (factor -> REAL_CONST .)
    GE              reduce using rule 105 (factor -> REAL_CONST .)
    IN              reduce using rule 105 (factor -> REAL_CONST .)
    THEN            reduce using rule 105 (factor -> REAL_CONST .)
    DO              reduce using rule 105 (factor -> REAL_CONST .)
    SEMICOLON       reduce using rule 105 (factor -> REAL_CONST .)
    RPAREN          reduce using rule 105 (factor -> REAL_CONST .)
    COMMA           reduce using rule 105 (factor -> REAL_CONST .)
    RBRACKET        reduce using rule 105 (factor -> REAL_CONST .)
    TO              reduce using rule 105 (factor -> REAL_CONST .)
    DOWNTO          reduce using rule 105 (factor -> REAL_CONST .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 69

<<<<<<< HEAD
    (98) expression -> NOT . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (106) factor -> STRING_LITERAL .

    TIMES           reduce using rule 106 (factor -> STRING_LITERAL .)
    DIVIDE          reduce using rule 106 (factor -> STRING_LITERAL .)
    DIVIDE_INT      reduce using rule 106 (factor -> STRING_LITERAL .)
    MODULO          reduce using rule 106 (factor -> STRING_LITERAL .)
    DIV             reduce using rule 106 (factor -> STRING_LITERAL .)
    MOD             reduce using rule 106 (factor -> STRING_LITERAL .)
    AND             reduce using rule 106 (factor -> STRING_LITERAL .)
    SHL             reduce using rule 106 (factor -> STRING_LITERAL .)
    SHR             reduce using rule 106 (factor -> STRING_LITERAL .)
    PLUS            reduce using rule 106 (factor -> STRING_LITERAL .)
    MINUS           reduce using rule 106 (factor -> STRING_LITERAL .)
    OR              reduce using rule 106 (factor -> STRING_LITERAL .)
    XOR             reduce using rule 106 (factor -> STRING_LITERAL .)
    EQUAL           reduce using rule 106 (factor -> STRING_LITERAL .)
    NEQUAL          reduce using rule 106 (factor -> STRING_LITERAL .)
    LT              reduce using rule 106 (factor -> STRING_LITERAL .)
    LE              reduce using rule 106 (factor -> STRING_LITERAL .)
    GT              reduce using rule 106 (factor -> STRING_LITERAL .)
    GE              reduce using rule 106 (factor -> STRING_LITERAL .)
    IN              reduce using rule 106 (factor -> STRING_LITERAL .)
    THEN            reduce using rule 106 (factor -> STRING_LITERAL .)
    DO              reduce using rule 106 (factor -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 106 (factor -> STRING_LITERAL .)
    RPAREN          reduce using rule 106 (factor -> STRING_LITERAL .)
    COMMA           reduce using rule 106 (factor -> STRING_LITERAL .)
    RBRACKET        reduce using rule 106 (factor -> STRING_LITERAL .)
    TO              reduce using rule 106 (factor -> STRING_LITERAL .)
    DOWNTO          reduce using rule 106 (factor -> STRING_LITERAL .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 135
    variable                       shift and go to state 71

state 70

<<<<<<< HEAD
    (99) expression -> LPAREN . expression RPAREN
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 136
    variable                       shift and go to state 71

state 71

    (100) expression -> variable .
    (65) variable -> variable . DOT ID
    (66) variable -> variable . LBRACKET expression_list RBRACKET

    THEN            reduce using rule 100 (expression -> variable .)
    PLUS            reduce using rule 100 (expression -> variable .)
    MINUS           reduce using rule 100 (expression -> variable .)
    TIMES           reduce using rule 100 (expression -> variable .)
    DIVIDE          reduce using rule 100 (expression -> variable .)
    DIVIDE_INT      reduce using rule 100 (expression -> variable .)
    MODULO          reduce using rule 100 (expression -> variable .)
    EQUAL           reduce using rule 100 (expression -> variable .)
    NEQUAL          reduce using rule 100 (expression -> variable .)
    LT              reduce using rule 100 (expression -> variable .)
    GT              reduce using rule 100 (expression -> variable .)
    LE              reduce using rule 100 (expression -> variable .)
    GE              reduce using rule 100 (expression -> variable .)
    AND             reduce using rule 100 (expression -> variable .)
    OR              reduce using rule 100 (expression -> variable .)
    XOR             reduce using rule 100 (expression -> variable .)
    DO              reduce using rule 100 (expression -> variable .)
    END             reduce using rule 100 (expression -> variable .)
    SEMICOLON       reduce using rule 100 (expression -> variable .)
    UNTIL           reduce using rule 100 (expression -> variable .)
    ELSE            reduce using rule 100 (expression -> variable .)
    RBRACKET        reduce using rule 100 (expression -> variable .)
    COMMA           reduce using rule 100 (expression -> variable .)
    RPAREN          reduce using rule 100 (expression -> variable .)
    TO              reduce using rule 100 (expression -> variable .)
    DOWNTO          reduce using rule 100 (expression -> variable .)
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67


state 72

    (101) expression -> INTEGER_CONST .

    THEN            reduce using rule 101 (expression -> INTEGER_CONST .)
    PLUS            reduce using rule 101 (expression -> INTEGER_CONST .)
    MINUS           reduce using rule 101 (expression -> INTEGER_CONST .)
    TIMES           reduce using rule 101 (expression -> INTEGER_CONST .)
    DIVIDE          reduce using rule 101 (expression -> INTEGER_CONST .)
    DIVIDE_INT      reduce using rule 101 (expression -> INTEGER_CONST .)
    MODULO          reduce using rule 101 (expression -> INTEGER_CONST .)
    EQUAL           reduce using rule 101 (expression -> INTEGER_CONST .)
    NEQUAL          reduce using rule 101 (expression -> INTEGER_CONST .)
    LT              reduce using rule 101 (expression -> INTEGER_CONST .)
    GT              reduce using rule 101 (expression -> INTEGER_CONST .)
    LE              reduce using rule 101 (expression -> INTEGER_CONST .)
    GE              reduce using rule 101 (expression -> INTEGER_CONST .)
    AND             reduce using rule 101 (expression -> INTEGER_CONST .)
    OR              reduce using rule 101 (expression -> INTEGER_CONST .)
    XOR             reduce using rule 101 (expression -> INTEGER_CONST .)
    DO              reduce using rule 101 (expression -> INTEGER_CONST .)
    END             reduce using rule 101 (expression -> INTEGER_CONST .)
    SEMICOLON       reduce using rule 101 (expression -> INTEGER_CONST .)
    UNTIL           reduce using rule 101 (expression -> INTEGER_CONST .)
    ELSE            reduce using rule 101 (expression -> INTEGER_CONST .)
    RBRACKET        reduce using rule 101 (expression -> INTEGER_CONST .)
    COMMA           reduce using rule 101 (expression -> INTEGER_CONST .)
    RPAREN          reduce using rule 101 (expression -> INTEGER_CONST .)
    TO              reduce using rule 101 (expression -> INTEGER_CONST .)
    DOWNTO          reduce using rule 101 (expression -> INTEGER_CONST .)


state 73

    (102) expression -> REAL_CONST .

    THEN            reduce using rule 102 (expression -> REAL_CONST .)
    PLUS            reduce using rule 102 (expression -> REAL_CONST .)
    MINUS           reduce using rule 102 (expression -> REAL_CONST .)
    TIMES           reduce using rule 102 (expression -> REAL_CONST .)
    DIVIDE          reduce using rule 102 (expression -> REAL_CONST .)
    DIVIDE_INT      reduce using rule 102 (expression -> REAL_CONST .)
    MODULO          reduce using rule 102 (expression -> REAL_CONST .)
    EQUAL           reduce using rule 102 (expression -> REAL_CONST .)
    NEQUAL          reduce using rule 102 (expression -> REAL_CONST .)
    LT              reduce using rule 102 (expression -> REAL_CONST .)
    GT              reduce using rule 102 (expression -> REAL_CONST .)
    LE              reduce using rule 102 (expression -> REAL_CONST .)
    GE              reduce using rule 102 (expression -> REAL_CONST .)
    AND             reduce using rule 102 (expression -> REAL_CONST .)
    OR              reduce using rule 102 (expression -> REAL_CONST .)
    XOR             reduce using rule 102 (expression -> REAL_CONST .)
    DO              reduce using rule 102 (expression -> REAL_CONST .)
    END             reduce using rule 102 (expression -> REAL_CONST .)
    SEMICOLON       reduce using rule 102 (expression -> REAL_CONST .)
    UNTIL           reduce using rule 102 (expression -> REAL_CONST .)
    ELSE            reduce using rule 102 (expression -> REAL_CONST .)
    RBRACKET        reduce using rule 102 (expression -> REAL_CONST .)
    COMMA           reduce using rule 102 (expression -> REAL_CONST .)
    RPAREN          reduce using rule 102 (expression -> REAL_CONST .)
    TO              reduce using rule 102 (expression -> REAL_CONST .)
    DOWNTO          reduce using rule 102 (expression -> REAL_CONST .)
=======
    (107) factor -> LPAREN . expression RPAREN
    (76) expression -> . simple_expression relop_opt
    (86) simple_expression -> . term
    (87) simple_expression -> . simple_expression addop term
    (92) term -> . factor
    (93) term -> . term mulop factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    expression                     shift and go to state 124
    simple_expression              shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    variable                       shift and go to state 66

state 71

    (108) factor -> NOT . factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    factor                         shift and go to state 125
    variable                       shift and go to state 66

state 72

    (109) factor -> MINUS . factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    factor                         shift and go to state 126
    variable                       shift and go to state 66

state 73

    (57) variable -> ID .
    (58) variable -> ID . LBRACKET expression_list RBRACKET
    (59) variable -> ID . DOT ID

    TIMES           reduce using rule 57 (variable -> ID .)
    DIVIDE          reduce using rule 57 (variable -> ID .)
    DIVIDE_INT      reduce using rule 57 (variable -> ID .)
    MODULO          reduce using rule 57 (variable -> ID .)
    DIV             reduce using rule 57 (variable -> ID .)
    MOD             reduce using rule 57 (variable -> ID .)
    AND             reduce using rule 57 (variable -> ID .)
    SHL             reduce using rule 57 (variable -> ID .)
    SHR             reduce using rule 57 (variable -> ID .)
    PLUS            reduce using rule 57 (variable -> ID .)
    MINUS           reduce using rule 57 (variable -> ID .)
    OR              reduce using rule 57 (variable -> ID .)
    XOR             reduce using rule 57 (variable -> ID .)
    EQUAL           reduce using rule 57 (variable -> ID .)
    NEQUAL          reduce using rule 57 (variable -> ID .)
    LT              reduce using rule 57 (variable -> ID .)
    LE              reduce using rule 57 (variable -> ID .)
    GT              reduce using rule 57 (variable -> ID .)
    GE              reduce using rule 57 (variable -> ID .)
    IN              reduce using rule 57 (variable -> ID .)
    THEN            reduce using rule 57 (variable -> ID .)
    DO              reduce using rule 57 (variable -> ID .)
    SEMICOLON       reduce using rule 57 (variable -> ID .)
    RPAREN          reduce using rule 57 (variable -> ID .)
    COMMA           reduce using rule 57 (variable -> ID .)
    RBRACKET        reduce using rule 57 (variable -> ID .)
    TO              reduce using rule 57 (variable -> ID .)
    DOWNTO          reduce using rule 57 (variable -> ID .)
    LBRACKET        shift and go to state 60
    DOT             shift and go to state 61
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 74

<<<<<<< HEAD
    (103) expression -> STRING_LITERAL .

    THEN            reduce using rule 103 (expression -> STRING_LITERAL .)
    PLUS            reduce using rule 103 (expression -> STRING_LITERAL .)
    MINUS           reduce using rule 103 (expression -> STRING_LITERAL .)
    TIMES           reduce using rule 103 (expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 103 (expression -> STRING_LITERAL .)
    DIVIDE_INT      reduce using rule 103 (expression -> STRING_LITERAL .)
    MODULO          reduce using rule 103 (expression -> STRING_LITERAL .)
    EQUAL           reduce using rule 103 (expression -> STRING_LITERAL .)
    NEQUAL          reduce using rule 103 (expression -> STRING_LITERAL .)
    LT              reduce using rule 103 (expression -> STRING_LITERAL .)
    GT              reduce using rule 103 (expression -> STRING_LITERAL .)
    LE              reduce using rule 103 (expression -> STRING_LITERAL .)
    GE              reduce using rule 103 (expression -> STRING_LITERAL .)
    AND             reduce using rule 103 (expression -> STRING_LITERAL .)
    OR              reduce using rule 103 (expression -> STRING_LITERAL .)
    XOR             reduce using rule 103 (expression -> STRING_LITERAL .)
    DO              reduce using rule 103 (expression -> STRING_LITERAL .)
    END             reduce using rule 103 (expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 103 (expression -> STRING_LITERAL .)
    UNTIL           reduce using rule 103 (expression -> STRING_LITERAL .)
    ELSE            reduce using rule 103 (expression -> STRING_LITERAL .)
    RBRACKET        reduce using rule 103 (expression -> STRING_LITERAL .)
    COMMA           reduce using rule 103 (expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 103 (expression -> STRING_LITERAL .)
    TO              reduce using rule 103 (expression -> STRING_LITERAL .)
    DOWNTO          reduce using rule 103 (expression -> STRING_LITERAL .)
=======
    (71) while_statement -> WHILE expression . DO statement

    DO              shift and go to state 127
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 75

<<<<<<< HEAD
    (64) variable -> ID .

    DOT             reduce using rule 64 (variable -> ID .)
    LBRACKET        reduce using rule 64 (variable -> ID .)
    THEN            reduce using rule 64 (variable -> ID .)
    PLUS            reduce using rule 64 (variable -> ID .)
    MINUS           reduce using rule 64 (variable -> ID .)
    TIMES           reduce using rule 64 (variable -> ID .)
    DIVIDE          reduce using rule 64 (variable -> ID .)
    DIVIDE_INT      reduce using rule 64 (variable -> ID .)
    MODULO          reduce using rule 64 (variable -> ID .)
    EQUAL           reduce using rule 64 (variable -> ID .)
    NEQUAL          reduce using rule 64 (variable -> ID .)
    LT              reduce using rule 64 (variable -> ID .)
    GT              reduce using rule 64 (variable -> ID .)
    LE              reduce using rule 64 (variable -> ID .)
    GE              reduce using rule 64 (variable -> ID .)
    AND             reduce using rule 64 (variable -> ID .)
    OR              reduce using rule 64 (variable -> ID .)
    XOR             reduce using rule 64 (variable -> ID .)
    DO              reduce using rule 64 (variable -> ID .)
    END             reduce using rule 64 (variable -> ID .)
    SEMICOLON       reduce using rule 64 (variable -> ID .)
    UNTIL           reduce using rule 64 (variable -> ID .)
    ELSE            reduce using rule 64 (variable -> ID .)
    RBRACKET        reduce using rule 64 (variable -> ID .)
    COMMA           reduce using rule 64 (variable -> ID .)
    RPAREN          reduce using rule 64 (variable -> ID .)
    TO              reduce using rule 64 (variable -> ID .)
    DOWNTO          reduce using rule 64 (variable -> ID .)


state 76

    (73) while_statement -> WHILE expression . DO statement
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    DO              shift and go to state 137
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134
=======
    (72) repeat_statement -> REPEAT statement_list . UNTIL expression SEMICOLON
    (46) statement_list -> statement_list . statement
    (48) statement -> . assignment_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . variable ASSIGN expression SEMICOLON
    (62) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (63) procedure_call -> . ID SEMICOLON
    (67) compound_statement -> . BEGIN statement_list END
    (68) if_statement -> . IF expression THEN statement else_part
    (71) while_statement -> . WHILE expression DO statement
    (72) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (73) for_statement -> . FOR ID ASSIGN expression direction expression DO statement
    (114) empty -> .
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    UNTIL           shift and go to state 128
    ID              shift and go to state 35
    BEGIN           shift and go to state 23
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    REPEAT          shift and go to state 38
    FOR             shift and go to state 39

  ! UNTIL           [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! BEGIN           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! REPEAT          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]

    statement                      shift and go to state 56
    assignment_statement           shift and go to state 26
    procedure_call                 shift and go to state 27
    compound_statement             shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    repeat_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    empty                          shift and go to state 33
    variable                       shift and go to state 34

state 76

    (73) for_statement -> FOR ID . ASSIGN expression direction expression DO statement

    ASSIGN          shift and go to state 129
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 77

<<<<<<< HEAD
    (74) repeat_statement -> REPEAT statement_list . UNTIL expression
    (51) statement_list -> statement_list . SEMICOLON statement

    UNTIL           shift and go to state 138
    SEMICOLON       shift and go to state 64
=======
    (15) var_decl_list -> var_decl_list var_decl .

    ID              reduce using rule 15 (var_decl_list -> var_decl_list var_decl .)
    BEGIN           reduce using rule 15 (var_decl_list -> var_decl_list var_decl .)
    VAR             reduce using rule 15 (var_decl_list -> var_decl_list var_decl .)
    CONST           reduce using rule 15 (var_decl_list -> var_decl_list var_decl .)
    TYPE            reduce using rule 15 (var_decl_list -> var_decl_list var_decl .)
    PROCEDURE       reduce using rule 15 (var_decl_list -> var_decl_list var_decl .)
    FUNCTION        reduce using rule 15 (var_decl_list -> var_decl_list var_decl .)
    USES            reduce using rule 15 (var_decl_list -> var_decl_list var_decl .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 78

<<<<<<< HEAD
    (75) for_statement -> FOR ID . ASSIGN expression TO expression DO statement
    (76) for_statement -> FOR ID . ASSIGN expression DOWNTO expression DO statement

    ASSIGN          shift and go to state 139


state 79

    (69) record_assignment -> ID DOT . ID ASSIGN expression

    ID              shift and go to state 140
=======
    (17) var_decl -> id_list COLON . type SEMICOLON
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . BOOLEAN
    (38) type -> . STRING
    (39) type -> . ID
    (40) type -> . ARRAY LBRACKET range RBRACKET OF type
    (41) type -> . RECORD field_list END

    INTEGER         shift and go to state 131
    REAL            shift and go to state 132
    BOOLEAN         shift and go to state 133
    STRING          shift and go to state 134
    ID              shift and go to state 135
    ARRAY           shift and go to state 136
    RECORD          shift and go to state 137

    type                           shift and go to state 130

state 79

    (18) id_list -> id_list COMMA . ID

    ID              shift and go to state 138
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 80

<<<<<<< HEAD
    (78) procedure_call -> ID LPAREN . args RPAREN
    (80) args -> . args COMMA expression
    (81) args -> . expression
    (82) args -> . empty
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (113) empty -> .
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    RPAREN          reduce using rule 113 (empty -> .)
    COMMA           reduce using rule 113 (empty -> .)
    ID              shift and go to state 75

    args                           shift and go to state 141
    expression                     shift and go to state 142
    empty                          shift and go to state 143
    variable                       shift and go to state 71

state 81

    (14) var_decl -> id_list COLON type . SEMICOLON
=======
    (21) const_list -> const_list const_decl .

    ID              reduce using rule 21 (const_list -> const_list const_decl .)
    BEGIN           reduce using rule 21 (const_list -> const_list const_decl .)
    VAR             reduce using rule 21 (const_list -> const_list const_decl .)
    CONST           reduce using rule 21 (const_list -> const_list const_decl .)
    TYPE            reduce using rule 21 (const_list -> const_list const_decl .)
    PROCEDURE       reduce using rule 21 (const_list -> const_list const_decl .)
    FUNCTION        reduce using rule 21 (const_list -> const_list const_decl .)
    USES            reduce using rule 21 (const_list -> const_list const_decl .)


state 81

    (23) const_decl -> ID EQUAL . constant SEMICOLON
    (110) constant -> . INTEGER_CONST
    (111) constant -> . REAL_CONST
    (112) constant -> . STRING_LITERAL
    (113) constant -> . NIL

    INTEGER_CONST   shift and go to state 140
    REAL_CONST      shift and go to state 141
    STRING_LITERAL  shift and go to state 142
    NIL             shift and go to state 143

    constant                       shift and go to state 139

state 82

    (25) type_decl_list -> type_decl_list type_decl .

    ID              reduce using rule 25 (type_decl_list -> type_decl_list type_decl .)
    BEGIN           reduce using rule 25 (type_decl_list -> type_decl_list type_decl .)
    VAR             reduce using rule 25 (type_decl_list -> type_decl_list type_decl .)
    CONST           reduce using rule 25 (type_decl_list -> type_decl_list type_decl .)
    TYPE            reduce using rule 25 (type_decl_list -> type_decl_list type_decl .)
    PROCEDURE       reduce using rule 25 (type_decl_list -> type_decl_list type_decl .)
    FUNCTION        reduce using rule 25 (type_decl_list -> type_decl_list type_decl .)
    USES            reduce using rule 25 (type_decl_list -> type_decl_list type_decl .)


state 83

    (27) type_decl -> ID EQUAL . type SEMICOLON
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . BOOLEAN
    (38) type -> . STRING
    (39) type -> . ID
    (40) type -> . ARRAY LBRACKET range RBRACKET OF type
    (41) type -> . RECORD field_list END

    INTEGER         shift and go to state 131
    REAL            shift and go to state 132
    BOOLEAN         shift and go to state 133
    STRING          shift and go to state 134
    ID              shift and go to state 135
    ARRAY           shift and go to state 136
    RECORD          shift and go to state 137

    type                           shift and go to state 144

state 84

    (28) procedure_declaration -> PROCEDURE ID SEMICOLON . block SEMICOLON
    (2) block -> . declarations BEGIN statement_list END
    (3) declarations -> . declarations declaration
    (4) declarations -> . empty
    (114) empty -> .

    BEGIN           reduce using rule 114 (empty -> .)
    VAR             reduce using rule 114 (empty -> .)
    CONST           reduce using rule 114 (empty -> .)
    TYPE            reduce using rule 114 (empty -> .)
    PROCEDURE       reduce using rule 114 (empty -> .)
    FUNCTION        reduce using rule 114 (empty -> .)
    USES            reduce using rule 114 (empty -> .)

    block                          shift and go to state 145
    declarations                   shift and go to state 6
    empty                          shift and go to state 7

state 85

    (29) procedure_declaration -> PROCEDURE ID LPAREN . param_list RPAREN SEMICOLON block SEMICOLON
    (32) param_list -> . param_list SEMICOLON param
    (33) param_list -> . param
    (34) param -> . id_list COLON type
    (18) id_list -> . id_list COMMA ID
    (19) id_list -> . ID

    ID              shift and go to state 43

    param_list                     shift and go to state 146
    param                          shift and go to state 147
    id_list                        shift and go to state 148

state 86

    (30) function_declaration -> FUNCTION ID COLON . type SEMICOLON block SEMICOLON
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . BOOLEAN
    (38) type -> . STRING
    (39) type -> . ID
    (40) type -> . ARRAY LBRACKET range RBRACKET OF type
    (41) type -> . RECORD field_list END

    INTEGER         shift and go to state 131
    REAL            shift and go to state 132
    BOOLEAN         shift and go to state 133
    STRING          shift and go to state 134
    ID              shift and go to state 135
    ARRAY           shift and go to state 136
    RECORD          shift and go to state 137

    type                           shift and go to state 149

state 87

    (31) function_declaration -> FUNCTION ID LPAREN . param_list RPAREN COLON type SEMICOLON block SEMICOLON
    (32) param_list -> . param_list SEMICOLON param
    (33) param_list -> . param
    (34) param -> . id_list COLON type
    (18) id_list -> . id_list COMMA ID
    (19) id_list -> . ID

    ID              shift and go to state 43

    param_list                     shift and go to state 150
    param                          shift and go to state 147
    id_list                        shift and go to state 148

state 88

    (11) uses_clause -> USES identifier_list SEMICOLON .

    BEGIN           reduce using rule 11 (uses_clause -> USES identifier_list SEMICOLON .)
    VAR             reduce using rule 11 (uses_clause -> USES identifier_list SEMICOLON .)
    CONST           reduce using rule 11 (uses_clause -> USES identifier_list SEMICOLON .)
    TYPE            reduce using rule 11 (uses_clause -> USES identifier_list SEMICOLON .)
    PROCEDURE       reduce using rule 11 (uses_clause -> USES identifier_list SEMICOLON .)
    FUNCTION        reduce using rule 11 (uses_clause -> USES identifier_list SEMICOLON .)
    USES            reduce using rule 11 (uses_clause -> USES identifier_list SEMICOLON .)


state 89

    (12) identifier_list -> identifier_list COMMA . ID

    ID              shift and go to state 151


state 90

    (67) compound_statement -> BEGIN statement_list END .

    END             reduce using rule 67 (compound_statement -> BEGIN statement_list END .)
    ID              reduce using rule 67 (compound_statement -> BEGIN statement_list END .)
    BEGIN           reduce using rule 67 (compound_statement -> BEGIN statement_list END .)
    IF              reduce using rule 67 (compound_statement -> BEGIN statement_list END .)
    WHILE           reduce using rule 67 (compound_statement -> BEGIN statement_list END .)
    REPEAT          reduce using rule 67 (compound_statement -> BEGIN statement_list END .)
    FOR             reduce using rule 67 (compound_statement -> BEGIN statement_list END .)
    UNTIL           reduce using rule 67 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 67 (compound_statement -> BEGIN statement_list END .)


state 91

    (56) assignment_statement -> variable ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 152


state 92

    (62) procedure_call -> ID LPAREN args . RPAREN SEMICOLON
    (64) args -> args . COMMA expression

    RPAREN          shift and go to state 153
    COMMA           shift and go to state 154


state 93

    (65) args -> expression .

    RPAREN          reduce using rule 65 (args -> expression .)
    COMMA           reduce using rule 65 (args -> expression .)


state 94

    (66) args -> empty .

    RPAREN          reduce using rule 66 (args -> empty .)
    COMMA           reduce using rule 66 (args -> empty .)


state 95

    (58) variable -> ID LBRACKET expression_list . RBRACKET
    (60) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 155
    COMMA           shift and go to state 156


state 96

    (61) expression_list -> expression .

    RBRACKET        reduce using rule 61 (expression_list -> expression .)
    COMMA           reduce using rule 61 (expression_list -> expression .)


state 97

    (59) variable -> ID DOT ID .

    ASSIGN          reduce using rule 59 (variable -> ID DOT ID .)
    TIMES           reduce using rule 59 (variable -> ID DOT ID .)
    DIVIDE          reduce using rule 59 (variable -> ID DOT ID .)
    DIVIDE_INT      reduce using rule 59 (variable -> ID DOT ID .)
    MODULO          reduce using rule 59 (variable -> ID DOT ID .)
    DIV             reduce using rule 59 (variable -> ID DOT ID .)
    MOD             reduce using rule 59 (variable -> ID DOT ID .)
    AND             reduce using rule 59 (variable -> ID DOT ID .)
    SHL             reduce using rule 59 (variable -> ID DOT ID .)
    SHR             reduce using rule 59 (variable -> ID DOT ID .)
    PLUS            reduce using rule 59 (variable -> ID DOT ID .)
    MINUS           reduce using rule 59 (variable -> ID DOT ID .)
    OR              reduce using rule 59 (variable -> ID DOT ID .)
    XOR             reduce using rule 59 (variable -> ID DOT ID .)
    EQUAL           reduce using rule 59 (variable -> ID DOT ID .)
    NEQUAL          reduce using rule 59 (variable -> ID DOT ID .)
    LT              reduce using rule 59 (variable -> ID DOT ID .)
    LE              reduce using rule 59 (variable -> ID DOT ID .)
    GT              reduce using rule 59 (variable -> ID DOT ID .)
    GE              reduce using rule 59 (variable -> ID DOT ID .)
    IN              reduce using rule 59 (variable -> ID DOT ID .)
    THEN            reduce using rule 59 (variable -> ID DOT ID .)
    DO              reduce using rule 59 (variable -> ID DOT ID .)
    SEMICOLON       reduce using rule 59 (variable -> ID DOT ID .)
    RPAREN          reduce using rule 59 (variable -> ID DOT ID .)
    COMMA           reduce using rule 59 (variable -> ID DOT ID .)
    RBRACKET        reduce using rule 59 (variable -> ID DOT ID .)
    TO              reduce using rule 59 (variable -> ID DOT ID .)
    DOWNTO          reduce using rule 59 (variable -> ID DOT ID .)


state 98

    (68) if_statement -> IF expression THEN . statement else_part
    (48) statement -> . assignment_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . variable ASSIGN expression SEMICOLON
    (62) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (63) procedure_call -> . ID SEMICOLON
    (67) compound_statement -> . BEGIN statement_list END
    (68) if_statement -> . IF expression THEN statement else_part
    (71) while_statement -> . WHILE expression DO statement
    (72) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (73) for_statement -> . FOR ID ASSIGN expression direction expression DO statement
    (114) empty -> .
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ID              shift and go to state 35
    BEGIN           shift and go to state 23
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    REPEAT          shift and go to state 38
    FOR             shift and go to state 39
    ELSE            reduce using rule 114 (empty -> .)
    END             reduce using rule 114 (empty -> .)
    UNTIL           reduce using rule 114 (empty -> .)

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! BEGIN           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! REPEAT          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]

    statement                      shift and go to state 157
    assignment_statement           shift and go to state 26
    procedure_call                 shift and go to state 27
    compound_statement             shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    repeat_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    empty                          shift and go to state 33
    variable                       shift and go to state 34

state 99

    (76) expression -> simple_expression relop_opt .

    THEN            reduce using rule 76 (expression -> simple_expression relop_opt .)
    DO              reduce using rule 76 (expression -> simple_expression relop_opt .)
    SEMICOLON       reduce using rule 76 (expression -> simple_expression relop_opt .)
    RPAREN          reduce using rule 76 (expression -> simple_expression relop_opt .)
    COMMA           reduce using rule 76 (expression -> simple_expression relop_opt .)
    RBRACKET        reduce using rule 76 (expression -> simple_expression relop_opt .)
    TO              reduce using rule 76 (expression -> simple_expression relop_opt .)
    DOWNTO          reduce using rule 76 (expression -> simple_expression relop_opt .)


state 100

    (87) simple_expression -> simple_expression addop . term
    (92) term -> . factor
    (93) term -> . term mulop factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    term                           shift and go to state 158
    factor                         shift and go to state 65
    variable                       shift and go to state 66

state 101

    (77) relop_opt -> relop . simple_expression
    (86) simple_expression -> . term
    (87) simple_expression -> . simple_expression addop term
    (92) term -> . factor
    (93) term -> . term mulop factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    simple_expression              shift and go to state 159
    term                           shift and go to state 64
    factor                         shift and go to state 65
    variable                       shift and go to state 66

state 102

    (78) relop_opt -> empty .

    THEN            reduce using rule 78 (relop_opt -> empty .)
    DO              reduce using rule 78 (relop_opt -> empty .)
    SEMICOLON       reduce using rule 78 (relop_opt -> empty .)
    RPAREN          reduce using rule 78 (relop_opt -> empty .)
    COMMA           reduce using rule 78 (relop_opt -> empty .)
    RBRACKET        reduce using rule 78 (relop_opt -> empty .)
    TO              reduce using rule 78 (relop_opt -> empty .)
    DOWNTO          reduce using rule 78 (relop_opt -> empty .)


state 103

    (88) addop -> PLUS .

    INTEGER_CONST   reduce using rule 88 (addop -> PLUS .)
    REAL_CONST      reduce using rule 88 (addop -> PLUS .)
    STRING_LITERAL  reduce using rule 88 (addop -> PLUS .)
    LPAREN          reduce using rule 88 (addop -> PLUS .)
    NOT             reduce using rule 88 (addop -> PLUS .)
    MINUS           reduce using rule 88 (addop -> PLUS .)
    ID              reduce using rule 88 (addop -> PLUS .)


state 104

    (89) addop -> MINUS .

    INTEGER_CONST   reduce using rule 89 (addop -> MINUS .)
    REAL_CONST      reduce using rule 89 (addop -> MINUS .)
    STRING_LITERAL  reduce using rule 89 (addop -> MINUS .)
    LPAREN          reduce using rule 89 (addop -> MINUS .)
    NOT             reduce using rule 89 (addop -> MINUS .)
    MINUS           reduce using rule 89 (addop -> MINUS .)
    ID              reduce using rule 89 (addop -> MINUS .)


state 105

    (90) addop -> OR .

    INTEGER_CONST   reduce using rule 90 (addop -> OR .)
    REAL_CONST      reduce using rule 90 (addop -> OR .)
    STRING_LITERAL  reduce using rule 90 (addop -> OR .)
    LPAREN          reduce using rule 90 (addop -> OR .)
    NOT             reduce using rule 90 (addop -> OR .)
    MINUS           reduce using rule 90 (addop -> OR .)
    ID              reduce using rule 90 (addop -> OR .)


state 106

    (91) addop -> XOR .

    INTEGER_CONST   reduce using rule 91 (addop -> XOR .)
    REAL_CONST      reduce using rule 91 (addop -> XOR .)
    STRING_LITERAL  reduce using rule 91 (addop -> XOR .)
    LPAREN          reduce using rule 91 (addop -> XOR .)
    NOT             reduce using rule 91 (addop -> XOR .)
    MINUS           reduce using rule 91 (addop -> XOR .)
    ID              reduce using rule 91 (addop -> XOR .)


state 107

    (79) relop -> EQUAL .

    INTEGER_CONST   reduce using rule 79 (relop -> EQUAL .)
    REAL_CONST      reduce using rule 79 (relop -> EQUAL .)
    STRING_LITERAL  reduce using rule 79 (relop -> EQUAL .)
    LPAREN          reduce using rule 79 (relop -> EQUAL .)
    NOT             reduce using rule 79 (relop -> EQUAL .)
    MINUS           reduce using rule 79 (relop -> EQUAL .)
    ID              reduce using rule 79 (relop -> EQUAL .)


state 108

    (80) relop -> NEQUAL .

    INTEGER_CONST   reduce using rule 80 (relop -> NEQUAL .)
    REAL_CONST      reduce using rule 80 (relop -> NEQUAL .)
    STRING_LITERAL  reduce using rule 80 (relop -> NEQUAL .)
    LPAREN          reduce using rule 80 (relop -> NEQUAL .)
    NOT             reduce using rule 80 (relop -> NEQUAL .)
    MINUS           reduce using rule 80 (relop -> NEQUAL .)
    ID              reduce using rule 80 (relop -> NEQUAL .)


state 109

    (81) relop -> LT .

    INTEGER_CONST   reduce using rule 81 (relop -> LT .)
    REAL_CONST      reduce using rule 81 (relop -> LT .)
    STRING_LITERAL  reduce using rule 81 (relop -> LT .)
    LPAREN          reduce using rule 81 (relop -> LT .)
    NOT             reduce using rule 81 (relop -> LT .)
    MINUS           reduce using rule 81 (relop -> LT .)
    ID              reduce using rule 81 (relop -> LT .)


state 110

    (82) relop -> LE .

    INTEGER_CONST   reduce using rule 82 (relop -> LE .)
    REAL_CONST      reduce using rule 82 (relop -> LE .)
    STRING_LITERAL  reduce using rule 82 (relop -> LE .)
    LPAREN          reduce using rule 82 (relop -> LE .)
    NOT             reduce using rule 82 (relop -> LE .)
    MINUS           reduce using rule 82 (relop -> LE .)
    ID              reduce using rule 82 (relop -> LE .)


state 111

    (83) relop -> GT .
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    INTEGER_CONST   reduce using rule 83 (relop -> GT .)
    REAL_CONST      reduce using rule 83 (relop -> GT .)
    STRING_LITERAL  reduce using rule 83 (relop -> GT .)
    LPAREN          reduce using rule 83 (relop -> GT .)
    NOT             reduce using rule 83 (relop -> GT .)
    MINUS           reduce using rule 83 (relop -> GT .)
    ID              reduce using rule 83 (relop -> GT .)


state 82

    (30) type -> simple_type .

    SEMICOLON       reduce using rule 30 (type -> simple_type .)
    RPAREN          reduce using rule 30 (type -> simple_type .)


state 83

    (31) type -> array_type .

    SEMICOLON       reduce using rule 31 (type -> array_type .)
    RPAREN          reduce using rule 31 (type -> array_type .)


state 84

    (32) type -> record_type .

    SEMICOLON       reduce using rule 32 (type -> record_type .)
    RPAREN          reduce using rule 32 (type -> record_type .)


state 85

    (33) simple_type -> subrange_type .

    SEMICOLON       reduce using rule 33 (simple_type -> subrange_type .)
    RBRACKET        reduce using rule 33 (simple_type -> subrange_type .)
    RPAREN          reduce using rule 33 (simple_type -> subrange_type .)


state 86

    (34) simple_type -> type_identifier .

    SEMICOLON       reduce using rule 34 (simple_type -> type_identifier .)
    RBRACKET        reduce using rule 34 (simple_type -> type_identifier .)
    RPAREN          reduce using rule 34 (simple_type -> type_identifier .)


state 87

    (36) array_type -> ARRAY . LBRACKET index_type RBRACKET OF type

    LBRACKET        shift and go to state 145


state 88

    (38) record_type -> RECORD . record_fields END
    (39) record_fields -> . field_list
    (40) field_list -> . field_list field_declaration SEMICOLON
    (41) field_list -> . field_declaration SEMICOLON
    (42) field_declaration -> . id_list COLON type
    (15) id_list -> . id_list COMMA ID
    (16) id_list -> . ID

    ID              shift and go to state 25

    record_fields                  shift and go to state 146
    field_list                     shift and go to state 147
    field_declaration              shift and go to state 148
    id_list                        shift and go to state 149

state 89

    (35) subrange_type -> constant . DOTDOT constant

    DOTDOT          shift and go to state 150


state 90

    (43) type_identifier -> ID .
    (112) constant_identifier -> ID .

    SEMICOLON       reduce using rule 43 (type_identifier -> ID .)
    RBRACKET        reduce using rule 43 (type_identifier -> ID .)
    RPAREN          reduce using rule 43 (type_identifier -> ID .)
    DOTDOT          reduce using rule 112 (constant_identifier -> ID .)


state 91

    (44) type_identifier -> predefined_type .

    SEMICOLON       reduce using rule 44 (type_identifier -> predefined_type .)
    RBRACKET        reduce using rule 44 (type_identifier -> predefined_type .)
    RPAREN          reduce using rule 44 (type_identifier -> predefined_type .)


state 92

    (104) constant -> UNSIGNED_NUMBER .

    DOTDOT          reduce using rule 104 (constant -> UNSIGNED_NUMBER .)
    SEMICOLON       reduce using rule 104 (constant -> UNSIGNED_NUMBER .)
    RBRACKET        reduce using rule 104 (constant -> UNSIGNED_NUMBER .)
    RPAREN          reduce using rule 104 (constant -> UNSIGNED_NUMBER .)


state 93

    (105) constant -> sign . UNSIGNED_NUMBER
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST

    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101

    UNSIGNED_NUMBER                shift and go to state 151

state 94

    (106) constant -> STRING_LITERAL .

    DOTDOT          reduce using rule 106 (constant -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 106 (constant -> STRING_LITERAL .)
    RBRACKET        reduce using rule 106 (constant -> STRING_LITERAL .)
    RPAREN          reduce using rule 106 (constant -> STRING_LITERAL .)


state 95

    (107) constant -> constant_identifier .

    DOTDOT          reduce using rule 107 (constant -> constant_identifier .)
    SEMICOLON       reduce using rule 107 (constant -> constant_identifier .)
    RBRACKET        reduce using rule 107 (constant -> constant_identifier .)
    RPAREN          reduce using rule 107 (constant -> constant_identifier .)


state 96

    (45) predefined_type -> INTEGER .

    SEMICOLON       reduce using rule 45 (predefined_type -> INTEGER .)
    RBRACKET        reduce using rule 45 (predefined_type -> INTEGER .)
    RPAREN          reduce using rule 45 (predefined_type -> INTEGER .)


state 97

    (46) predefined_type -> REAL .

    SEMICOLON       reduce using rule 46 (predefined_type -> REAL .)
    RBRACKET        reduce using rule 46 (predefined_type -> REAL .)
    RPAREN          reduce using rule 46 (predefined_type -> REAL .)


state 98

    (47) predefined_type -> BOOLEAN .

    SEMICOLON       reduce using rule 47 (predefined_type -> BOOLEAN .)
    RBRACKET        reduce using rule 47 (predefined_type -> BOOLEAN .)
    RPAREN          reduce using rule 47 (predefined_type -> BOOLEAN .)


state 99

    (48) predefined_type -> STRING .

    SEMICOLON       reduce using rule 48 (predefined_type -> STRING .)
    RBRACKET        reduce using rule 48 (predefined_type -> STRING .)
    RPAREN          reduce using rule 48 (predefined_type -> STRING .)


state 100

    (108) UNSIGNED_NUMBER -> INTEGER_CONST .

    DOTDOT          reduce using rule 108 (UNSIGNED_NUMBER -> INTEGER_CONST .)
    SEMICOLON       reduce using rule 108 (UNSIGNED_NUMBER -> INTEGER_CONST .)
    RBRACKET        reduce using rule 108 (UNSIGNED_NUMBER -> INTEGER_CONST .)
    RPAREN          reduce using rule 108 (UNSIGNED_NUMBER -> INTEGER_CONST .)


state 101

    (109) UNSIGNED_NUMBER -> REAL_CONST .

    DOTDOT          reduce using rule 109 (UNSIGNED_NUMBER -> REAL_CONST .)
    SEMICOLON       reduce using rule 109 (UNSIGNED_NUMBER -> REAL_CONST .)
    RBRACKET        reduce using rule 109 (UNSIGNED_NUMBER -> REAL_CONST .)
    RPAREN          reduce using rule 109 (UNSIGNED_NUMBER -> REAL_CONST .)


state 102

    (110) sign -> PLUS .

    INTEGER_CONST   reduce using rule 110 (sign -> PLUS .)
    REAL_CONST      reduce using rule 110 (sign -> PLUS .)


state 103

    (111) sign -> MINUS .

    INTEGER_CONST   reduce using rule 111 (sign -> MINUS .)
    REAL_CONST      reduce using rule 111 (sign -> MINUS .)


state 104

    (15) id_list -> id_list COMMA ID .

    COLON           reduce using rule 15 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 15 (id_list -> id_list COMMA ID .)


state 105

    (18) const_list -> const_list const_definition SEMICOLON .

    ID              reduce using rule 18 (const_list -> const_list const_definition SEMICOLON .)
    VAR             reduce using rule 18 (const_list -> const_list const_definition SEMICOLON .)
    CONST           reduce using rule 18 (const_list -> const_list const_definition SEMICOLON .)
    TYPE            reduce using rule 18 (const_list -> const_list const_definition SEMICOLON .)
    PROCEDURE       reduce using rule 18 (const_list -> const_list const_definition SEMICOLON .)
    BEGIN           reduce using rule 18 (const_list -> const_list const_definition SEMICOLON .)


state 106

    (112) constant_identifier -> ID .

    SEMICOLON       reduce using rule 112 (constant_identifier -> ID .)
    RBRACKET        reduce using rule 112 (constant_identifier -> ID .)
    RPAREN          reduce using rule 112 (constant_identifier -> ID .)


state 107

    (20) const_definition -> ID EQUAL constant .

    SEMICOLON       reduce using rule 20 (const_definition -> ID EQUAL constant .)


state 108

    (27) type_list -> type_list type_definition SEMICOLON .

    ID              reduce using rule 27 (type_list -> type_list type_definition SEMICOLON .)
    VAR             reduce using rule 27 (type_list -> type_list type_definition SEMICOLON .)
    CONST           reduce using rule 27 (type_list -> type_list type_definition SEMICOLON .)
    TYPE            reduce using rule 27 (type_list -> type_list type_definition SEMICOLON .)
    PROCEDURE       reduce using rule 27 (type_list -> type_list type_definition SEMICOLON .)
    BEGIN           reduce using rule 27 (type_list -> type_list type_definition SEMICOLON .)


state 109

    (29) type_definition -> ID EQUAL type .

    SEMICOLON       reduce using rule 29 (type_definition -> ID EQUAL type .)


state 110

    (25) param -> ID . COLON type

    COLON           shift and go to state 152


state 111

    (21) procedure_declaration -> PROCEDURE ID LPAREN param_list . RPAREN SEMICOLON block
    (22) param_list -> param_list . SEMICOLON param

    RPAREN          shift and go to state 153
    SEMICOLON       shift and go to state 154


state 112

<<<<<<< HEAD
    (23) param_list -> param .

    RPAREN          reduce using rule 23 (param_list -> param .)
    SEMICOLON       reduce using rule 23 (param_list -> param .)
=======
    (84) relop -> GE .

    INTEGER_CONST   reduce using rule 84 (relop -> GE .)
    REAL_CONST      reduce using rule 84 (relop -> GE .)
    STRING_LITERAL  reduce using rule 84 (relop -> GE .)
    LPAREN          reduce using rule 84 (relop -> GE .)
    NOT             reduce using rule 84 (relop -> GE .)
    MINUS           reduce using rule 84 (relop -> GE .)
    ID              reduce using rule 84 (relop -> GE .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 113

<<<<<<< HEAD
    (24) param_list -> empty .

    RPAREN          reduce using rule 24 (param_list -> empty .)
    SEMICOLON       reduce using rule 24 (param_list -> empty .)
=======
    (85) relop -> IN .

    INTEGER_CONST   reduce using rule 85 (relop -> IN .)
    REAL_CONST      reduce using rule 85 (relop -> IN .)
    STRING_LITERAL  reduce using rule 85 (relop -> IN .)
    LPAREN          reduce using rule 85 (relop -> IN .)
    NOT             reduce using rule 85 (relop -> IN .)
    MINUS           reduce using rule 85 (relop -> IN .)
    ID              reduce using rule 85 (relop -> IN .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 114

<<<<<<< HEAD
    (51) statement_list -> statement_list SEMICOLON statement .

    END             reduce using rule 51 (statement_list -> statement_list SEMICOLON statement .)
    SEMICOLON       reduce using rule 51 (statement_list -> statement_list SEMICOLON statement .)
    UNTIL           reduce using rule 51 (statement_list -> statement_list SEMICOLON statement .)


state 115

    (63) assignment_statement -> variable ASSIGN expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    END             reduce using rule 63 (assignment_statement -> variable ASSIGN expression .)
    SEMICOLON       reduce using rule 63 (assignment_statement -> variable ASSIGN expression .)
    UNTIL           reduce using rule 63 (assignment_statement -> variable ASSIGN expression .)
    ELSE            reduce using rule 63 (assignment_statement -> variable ASSIGN expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134
=======
    (93) term -> term mulop . factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    factor                         shift and go to state 160
    variable                       shift and go to state 66

state 115

    (94) mulop -> TIMES .

    INTEGER_CONST   reduce using rule 94 (mulop -> TIMES .)
    REAL_CONST      reduce using rule 94 (mulop -> TIMES .)
    STRING_LITERAL  reduce using rule 94 (mulop -> TIMES .)
    LPAREN          reduce using rule 94 (mulop -> TIMES .)
    NOT             reduce using rule 94 (mulop -> TIMES .)
    MINUS           reduce using rule 94 (mulop -> TIMES .)
    ID              reduce using rule 94 (mulop -> TIMES .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 116

<<<<<<< HEAD
    (65) variable -> variable DOT ID .

    ASSIGN          reduce using rule 65 (variable -> variable DOT ID .)
    DOT             reduce using rule 65 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 65 (variable -> variable DOT ID .)
    THEN            reduce using rule 65 (variable -> variable DOT ID .)
    PLUS            reduce using rule 65 (variable -> variable DOT ID .)
    MINUS           reduce using rule 65 (variable -> variable DOT ID .)
    TIMES           reduce using rule 65 (variable -> variable DOT ID .)
    DIVIDE          reduce using rule 65 (variable -> variable DOT ID .)
    DIVIDE_INT      reduce using rule 65 (variable -> variable DOT ID .)
    MODULO          reduce using rule 65 (variable -> variable DOT ID .)
    EQUAL           reduce using rule 65 (variable -> variable DOT ID .)
    NEQUAL          reduce using rule 65 (variable -> variable DOT ID .)
    LT              reduce using rule 65 (variable -> variable DOT ID .)
    GT              reduce using rule 65 (variable -> variable DOT ID .)
    LE              reduce using rule 65 (variable -> variable DOT ID .)
    GE              reduce using rule 65 (variable -> variable DOT ID .)
    AND             reduce using rule 65 (variable -> variable DOT ID .)
    OR              reduce using rule 65 (variable -> variable DOT ID .)
    XOR             reduce using rule 65 (variable -> variable DOT ID .)
    DO              reduce using rule 65 (variable -> variable DOT ID .)
    END             reduce using rule 65 (variable -> variable DOT ID .)
    SEMICOLON       reduce using rule 65 (variable -> variable DOT ID .)
    UNTIL           reduce using rule 65 (variable -> variable DOT ID .)
    ELSE            reduce using rule 65 (variable -> variable DOT ID .)
    RBRACKET        reduce using rule 65 (variable -> variable DOT ID .)
    COMMA           reduce using rule 65 (variable -> variable DOT ID .)
    RPAREN          reduce using rule 65 (variable -> variable DOT ID .)
    TO              reduce using rule 65 (variable -> variable DOT ID .)
    DOWNTO          reduce using rule 65 (variable -> variable DOT ID .)
=======
    (95) mulop -> DIVIDE .

    INTEGER_CONST   reduce using rule 95 (mulop -> DIVIDE .)
    REAL_CONST      reduce using rule 95 (mulop -> DIVIDE .)
    STRING_LITERAL  reduce using rule 95 (mulop -> DIVIDE .)
    LPAREN          reduce using rule 95 (mulop -> DIVIDE .)
    NOT             reduce using rule 95 (mulop -> DIVIDE .)
    MINUS           reduce using rule 95 (mulop -> DIVIDE .)
    ID              reduce using rule 95 (mulop -> DIVIDE .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 117

<<<<<<< HEAD
    (66) variable -> variable LBRACKET expression_list . RBRACKET
    (68) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 155
    COMMA           shift and go to state 156
=======
    (96) mulop -> DIVIDE_INT .

    INTEGER_CONST   reduce using rule 96 (mulop -> DIVIDE_INT .)
    REAL_CONST      reduce using rule 96 (mulop -> DIVIDE_INT .)
    STRING_LITERAL  reduce using rule 96 (mulop -> DIVIDE_INT .)
    LPAREN          reduce using rule 96 (mulop -> DIVIDE_INT .)
    NOT             reduce using rule 96 (mulop -> DIVIDE_INT .)
    MINUS           reduce using rule 96 (mulop -> DIVIDE_INT .)
    ID              reduce using rule 96 (mulop -> DIVIDE_INT .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 118

<<<<<<< HEAD
    (67) expression_list -> expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    RBRACKET        reduce using rule 67 (expression_list -> expression .)
    COMMA           reduce using rule 67 (expression_list -> expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134
=======
    (97) mulop -> MODULO .

    INTEGER_CONST   reduce using rule 97 (mulop -> MODULO .)
    REAL_CONST      reduce using rule 97 (mulop -> MODULO .)
    STRING_LITERAL  reduce using rule 97 (mulop -> MODULO .)
    LPAREN          reduce using rule 97 (mulop -> MODULO .)
    NOT             reduce using rule 97 (mulop -> MODULO .)
    MINUS           reduce using rule 97 (mulop -> MODULO .)
    ID              reduce using rule 97 (mulop -> MODULO .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 119

<<<<<<< HEAD
    (70) if_statement -> IF expression THEN . statement else_part
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    ELSE            reduce using rule 113 (empty -> .)
    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    UNTIL           reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52
=======
    (98) mulop -> DIV .

    INTEGER_CONST   reduce using rule 98 (mulop -> DIV .)
    REAL_CONST      reduce using rule 98 (mulop -> DIV .)
    STRING_LITERAL  reduce using rule 98 (mulop -> DIV .)
    LPAREN          reduce using rule 98 (mulop -> DIV .)
    NOT             reduce using rule 98 (mulop -> DIV .)
    MINUS           reduce using rule 98 (mulop -> DIV .)
    ID              reduce using rule 98 (mulop -> DIV .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    statement                      shift and go to state 157
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 120

<<<<<<< HEAD
    (83) expression -> expression PLUS . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (99) mulop -> MOD .

    INTEGER_CONST   reduce using rule 99 (mulop -> MOD .)
    REAL_CONST      reduce using rule 99 (mulop -> MOD .)
    STRING_LITERAL  reduce using rule 99 (mulop -> MOD .)
    LPAREN          reduce using rule 99 (mulop -> MOD .)
    NOT             reduce using rule 99 (mulop -> MOD .)
    MINUS           reduce using rule 99 (mulop -> MOD .)
    ID              reduce using rule 99 (mulop -> MOD .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 158
    variable                       shift and go to state 71

state 121

<<<<<<< HEAD
    (84) expression -> expression MINUS . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (100) mulop -> AND .

    INTEGER_CONST   reduce using rule 100 (mulop -> AND .)
    REAL_CONST      reduce using rule 100 (mulop -> AND .)
    STRING_LITERAL  reduce using rule 100 (mulop -> AND .)
    LPAREN          reduce using rule 100 (mulop -> AND .)
    NOT             reduce using rule 100 (mulop -> AND .)
    MINUS           reduce using rule 100 (mulop -> AND .)
    ID              reduce using rule 100 (mulop -> AND .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 159
    variable                       shift and go to state 71

state 122

<<<<<<< HEAD
    (85) expression -> expression TIMES . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (101) mulop -> SHL .

    INTEGER_CONST   reduce using rule 101 (mulop -> SHL .)
    REAL_CONST      reduce using rule 101 (mulop -> SHL .)
    STRING_LITERAL  reduce using rule 101 (mulop -> SHL .)
    LPAREN          reduce using rule 101 (mulop -> SHL .)
    NOT             reduce using rule 101 (mulop -> SHL .)
    MINUS           reduce using rule 101 (mulop -> SHL .)
    ID              reduce using rule 101 (mulop -> SHL .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 160
    variable                       shift and go to state 71

state 123

<<<<<<< HEAD
    (86) expression -> expression DIVIDE . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (102) mulop -> SHR .

    INTEGER_CONST   reduce using rule 102 (mulop -> SHR .)
    REAL_CONST      reduce using rule 102 (mulop -> SHR .)
    STRING_LITERAL  reduce using rule 102 (mulop -> SHR .)
    LPAREN          reduce using rule 102 (mulop -> SHR .)
    NOT             reduce using rule 102 (mulop -> SHR .)
    MINUS           reduce using rule 102 (mulop -> SHR .)
    ID              reduce using rule 102 (mulop -> SHR .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 161
    variable                       shift and go to state 71

state 124

<<<<<<< HEAD
    (87) expression -> expression DIVIDE_INT . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (107) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 161
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 162
    variable                       shift and go to state 71

state 125

<<<<<<< HEAD
    (88) expression -> expression MODULO . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (108) factor -> NOT factor .

    TIMES           reduce using rule 108 (factor -> NOT factor .)
    DIVIDE          reduce using rule 108 (factor -> NOT factor .)
    DIVIDE_INT      reduce using rule 108 (factor -> NOT factor .)
    MODULO          reduce using rule 108 (factor -> NOT factor .)
    DIV             reduce using rule 108 (factor -> NOT factor .)
    MOD             reduce using rule 108 (factor -> NOT factor .)
    AND             reduce using rule 108 (factor -> NOT factor .)
    SHL             reduce using rule 108 (factor -> NOT factor .)
    SHR             reduce using rule 108 (factor -> NOT factor .)
    PLUS            reduce using rule 108 (factor -> NOT factor .)
    MINUS           reduce using rule 108 (factor -> NOT factor .)
    OR              reduce using rule 108 (factor -> NOT factor .)
    XOR             reduce using rule 108 (factor -> NOT factor .)
    EQUAL           reduce using rule 108 (factor -> NOT factor .)
    NEQUAL          reduce using rule 108 (factor -> NOT factor .)
    LT              reduce using rule 108 (factor -> NOT factor .)
    LE              reduce using rule 108 (factor -> NOT factor .)
    GT              reduce using rule 108 (factor -> NOT factor .)
    GE              reduce using rule 108 (factor -> NOT factor .)
    IN              reduce using rule 108 (factor -> NOT factor .)
    THEN            reduce using rule 108 (factor -> NOT factor .)
    DO              reduce using rule 108 (factor -> NOT factor .)
    SEMICOLON       reduce using rule 108 (factor -> NOT factor .)
    RPAREN          reduce using rule 108 (factor -> NOT factor .)
    COMMA           reduce using rule 108 (factor -> NOT factor .)
    RBRACKET        reduce using rule 108 (factor -> NOT factor .)
    TO              reduce using rule 108 (factor -> NOT factor .)
    DOWNTO          reduce using rule 108 (factor -> NOT factor .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 163
    variable                       shift and go to state 71

state 126

<<<<<<< HEAD
    (89) expression -> expression EQUAL . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (109) factor -> MINUS factor .

    TIMES           reduce using rule 109 (factor -> MINUS factor .)
    DIVIDE          reduce using rule 109 (factor -> MINUS factor .)
    DIVIDE_INT      reduce using rule 109 (factor -> MINUS factor .)
    MODULO          reduce using rule 109 (factor -> MINUS factor .)
    DIV             reduce using rule 109 (factor -> MINUS factor .)
    MOD             reduce using rule 109 (factor -> MINUS factor .)
    AND             reduce using rule 109 (factor -> MINUS factor .)
    SHL             reduce using rule 109 (factor -> MINUS factor .)
    SHR             reduce using rule 109 (factor -> MINUS factor .)
    PLUS            reduce using rule 109 (factor -> MINUS factor .)
    MINUS           reduce using rule 109 (factor -> MINUS factor .)
    OR              reduce using rule 109 (factor -> MINUS factor .)
    XOR             reduce using rule 109 (factor -> MINUS factor .)
    EQUAL           reduce using rule 109 (factor -> MINUS factor .)
    NEQUAL          reduce using rule 109 (factor -> MINUS factor .)
    LT              reduce using rule 109 (factor -> MINUS factor .)
    LE              reduce using rule 109 (factor -> MINUS factor .)
    GT              reduce using rule 109 (factor -> MINUS factor .)
    GE              reduce using rule 109 (factor -> MINUS factor .)
    IN              reduce using rule 109 (factor -> MINUS factor .)
    THEN            reduce using rule 109 (factor -> MINUS factor .)
    DO              reduce using rule 109 (factor -> MINUS factor .)
    SEMICOLON       reduce using rule 109 (factor -> MINUS factor .)
    RPAREN          reduce using rule 109 (factor -> MINUS factor .)
    COMMA           reduce using rule 109 (factor -> MINUS factor .)
    RBRACKET        reduce using rule 109 (factor -> MINUS factor .)
    TO              reduce using rule 109 (factor -> MINUS factor .)
    DOWNTO          reduce using rule 109 (factor -> MINUS factor .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 164
    variable                       shift and go to state 71

state 127

<<<<<<< HEAD
    (90) expression -> expression NEQUAL . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 165
    variable                       shift and go to state 71

state 128

    (91) expression -> expression LT . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 166
    variable                       shift and go to state 71

state 129

    (92) expression -> expression GT . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 167
    variable                       shift and go to state 71

state 130

    (93) expression -> expression LE . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (71) while_statement -> WHILE expression DO . statement
    (48) statement -> . assignment_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . variable ASSIGN expression SEMICOLON
    (62) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (63) procedure_call -> . ID SEMICOLON
    (67) compound_statement -> . BEGIN statement_list END
    (68) if_statement -> . IF expression THEN statement else_part
    (71) while_statement -> . WHILE expression DO statement
    (72) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (73) for_statement -> . FOR ID ASSIGN expression direction expression DO statement
    (114) empty -> .
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ID              shift and go to state 35
    BEGIN           shift and go to state 23
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    REPEAT          shift and go to state 38
    FOR             shift and go to state 39
    ELSE            reduce using rule 114 (empty -> .)
    END             reduce using rule 114 (empty -> .)
    UNTIL           reduce using rule 114 (empty -> .)

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! BEGIN           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! REPEAT          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]

    statement                      shift and go to state 162
    assignment_statement           shift and go to state 26
    procedure_call                 shift and go to state 27
    compound_statement             shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    repeat_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    empty                          shift and go to state 33
    variable                       shift and go to state 34

state 128

    (72) repeat_statement -> REPEAT statement_list UNTIL . expression SEMICOLON
    (76) expression -> . simple_expression relop_opt
    (86) simple_expression -> . term
    (87) simple_expression -> . simple_expression addop term
    (92) term -> . factor
    (93) term -> . term mulop factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    expression                     shift and go to state 163
    simple_expression              shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    variable                       shift and go to state 66

state 129

    (73) for_statement -> FOR ID ASSIGN . expression direction expression DO statement
    (76) expression -> . simple_expression relop_opt
    (86) simple_expression -> . term
    (87) simple_expression -> . simple_expression addop term
    (92) term -> . factor
    (93) term -> . term mulop factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    expression                     shift and go to state 164
    simple_expression              shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    variable                       shift and go to state 66

state 130

    (17) var_decl -> id_list COLON type . SEMICOLON

    SEMICOLON       shift and go to state 165
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 168
    variable                       shift and go to state 71

state 131

<<<<<<< HEAD
    (94) expression -> expression GE . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (35) type -> INTEGER .

    SEMICOLON       reduce using rule 35 (type -> INTEGER .)
    RPAREN          reduce using rule 35 (type -> INTEGER .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 169
    variable                       shift and go to state 71

state 132

<<<<<<< HEAD
    (95) expression -> expression AND . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (36) type -> REAL .

    SEMICOLON       reduce using rule 36 (type -> REAL .)
    RPAREN          reduce using rule 36 (type -> REAL .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 170
    variable                       shift and go to state 71

state 133

<<<<<<< HEAD
    (96) expression -> expression OR . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (37) type -> BOOLEAN .

    SEMICOLON       reduce using rule 37 (type -> BOOLEAN .)
    RPAREN          reduce using rule 37 (type -> BOOLEAN .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 171
    variable                       shift and go to state 71

state 134

<<<<<<< HEAD
    (97) expression -> expression XOR . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75
=======
    (38) type -> STRING .

    SEMICOLON       reduce using rule 38 (type -> STRING .)
    RPAREN          reduce using rule 38 (type -> STRING .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    expression                     shift and go to state 172
    variable                       shift and go to state 71

state 135

<<<<<<< HEAD
    (98) expression -> NOT expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 98 (expression -> NOT expression .)
    PLUS            reduce using rule 98 (expression -> NOT expression .)
    MINUS           reduce using rule 98 (expression -> NOT expression .)
    TIMES           reduce using rule 98 (expression -> NOT expression .)
    DIVIDE          reduce using rule 98 (expression -> NOT expression .)
    DIVIDE_INT      reduce using rule 98 (expression -> NOT expression .)
    MODULO          reduce using rule 98 (expression -> NOT expression .)
    EQUAL           reduce using rule 98 (expression -> NOT expression .)
    NEQUAL          reduce using rule 98 (expression -> NOT expression .)
    LT              reduce using rule 98 (expression -> NOT expression .)
    GT              reduce using rule 98 (expression -> NOT expression .)
    LE              reduce using rule 98 (expression -> NOT expression .)
    GE              reduce using rule 98 (expression -> NOT expression .)
    AND             reduce using rule 98 (expression -> NOT expression .)
    OR              reduce using rule 98 (expression -> NOT expression .)
    XOR             reduce using rule 98 (expression -> NOT expression .)
    DO              reduce using rule 98 (expression -> NOT expression .)
    END             reduce using rule 98 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 98 (expression -> NOT expression .)
    UNTIL           reduce using rule 98 (expression -> NOT expression .)
    ELSE            reduce using rule 98 (expression -> NOT expression .)
    RBRACKET        reduce using rule 98 (expression -> NOT expression .)
    COMMA           reduce using rule 98 (expression -> NOT expression .)
    RPAREN          reduce using rule 98 (expression -> NOT expression .)
    TO              reduce using rule 98 (expression -> NOT expression .)
    DOWNTO          reduce using rule 98 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 121 ]
  ! TIMES           [ shift and go to state 122 ]
  ! DIVIDE          [ shift and go to state 123 ]
  ! DIVIDE_INT      [ shift and go to state 124 ]
  ! MODULO          [ shift and go to state 125 ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]
=======
    (39) type -> ID .

    SEMICOLON       reduce using rule 39 (type -> ID .)
    RPAREN          reduce using rule 39 (type -> ID .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 136

<<<<<<< HEAD
    (99) expression -> LPAREN expression . RPAREN
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    RPAREN          shift and go to state 173
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134
=======
    (40) type -> ARRAY . LBRACKET range RBRACKET OF type

    LBRACKET        shift and go to state 166
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 137

<<<<<<< HEAD
    (73) while_statement -> WHILE expression DO . statement
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    ELSE            reduce using rule 113 (empty -> .)
    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    UNTIL           reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52

    statement                      shift and go to state 174
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 138

    (74) repeat_statement -> REPEAT statement_list UNTIL . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 175
    variable                       shift and go to state 71

state 139

    (75) for_statement -> FOR ID ASSIGN . expression TO expression DO statement
    (76) for_statement -> FOR ID ASSIGN . expression DOWNTO expression DO statement
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 176
    variable                       shift and go to state 71

state 140

    (69) record_assignment -> ID DOT ID . ASSIGN expression

    ASSIGN          shift and go to state 177
=======
    (41) type -> RECORD . field_list END
    (43) field_list -> . field_list field_decl SEMICOLON
    (44) field_list -> . field_decl SEMICOLON
    (45) field_decl -> . id_list COLON type
    (18) id_list -> . id_list COMMA ID
    (19) id_list -> . ID

    ID              shift and go to state 43

    field_list                     shift and go to state 167
    field_decl                     shift and go to state 168
    id_list                        shift and go to state 169

state 138

    (18) id_list -> id_list COMMA ID .

    COLON           reduce using rule 18 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 18 (id_list -> id_list COMMA ID .)


state 139

    (23) const_decl -> ID EQUAL constant . SEMICOLON

    SEMICOLON       shift and go to state 170


state 140

    (110) constant -> INTEGER_CONST .

    SEMICOLON       reduce using rule 110 (constant -> INTEGER_CONST .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 141

<<<<<<< HEAD
    (78) procedure_call -> ID LPAREN args . RPAREN
    (80) args -> args . COMMA expression

    RPAREN          shift and go to state 178
    COMMA           shift and go to state 179
=======
    (111) constant -> REAL_CONST .

    SEMICOLON       reduce using rule 111 (constant -> REAL_CONST .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 142

<<<<<<< HEAD
    (81) args -> expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    RPAREN          reduce using rule 81 (args -> expression .)
    COMMA           reduce using rule 81 (args -> expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134
=======
    (112) constant -> STRING_LITERAL .

    SEMICOLON       reduce using rule 112 (constant -> STRING_LITERAL .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 143

<<<<<<< HEAD
    (82) args -> empty .

    RPAREN          reduce using rule 82 (args -> empty .)
    COMMA           reduce using rule 82 (args -> empty .)
=======
    (113) constant -> NIL .

    SEMICOLON       reduce using rule 113 (constant -> NIL .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 144

<<<<<<< HEAD
    (14) var_decl -> id_list COLON type SEMICOLON .

    ID              reduce using rule 14 (var_decl -> id_list COLON type SEMICOLON .)
    VAR             reduce using rule 14 (var_decl -> id_list COLON type SEMICOLON .)
    CONST           reduce using rule 14 (var_decl -> id_list COLON type SEMICOLON .)
    TYPE            reduce using rule 14 (var_decl -> id_list COLON type SEMICOLON .)
    PROCEDURE       reduce using rule 14 (var_decl -> id_list COLON type SEMICOLON .)
    BEGIN           reduce using rule 14 (var_decl -> id_list COLON type SEMICOLON .)
=======
    (27) type_decl -> ID EQUAL type . SEMICOLON

    SEMICOLON       shift and go to state 171
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 145

<<<<<<< HEAD
    (36) array_type -> ARRAY LBRACKET . index_type RBRACKET OF type
    (37) index_type -> . simple_type
    (33) simple_type -> . subrange_type
    (34) simple_type -> . type_identifier
    (35) subrange_type -> . constant DOTDOT constant
    (43) type_identifier -> . ID
    (44) type_identifier -> . predefined_type
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (45) predefined_type -> . INTEGER
    (46) predefined_type -> . REAL
    (47) predefined_type -> . BOOLEAN
    (48) predefined_type -> . STRING
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    ID              shift and go to state 90
    STRING_LITERAL  shift and go to state 94
    INTEGER         shift and go to state 96
    REAL            shift and go to state 97
    BOOLEAN         shift and go to state 98
    STRING          shift and go to state 99
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
=======
    (28) procedure_declaration -> PROCEDURE ID SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 172
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    index_type                     shift and go to state 180
    simple_type                    shift and go to state 181
    subrange_type                  shift and go to state 85
    type_identifier                shift and go to state 86
    constant                       shift and go to state 89
    predefined_type                shift and go to state 91
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 146

<<<<<<< HEAD
    (38) record_type -> RECORD record_fields . END

    END             shift and go to state 182
=======
    (29) procedure_declaration -> PROCEDURE ID LPAREN param_list . RPAREN SEMICOLON block SEMICOLON
    (32) param_list -> param_list . SEMICOLON param

    RPAREN          shift and go to state 173
    SEMICOLON       shift and go to state 174
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 147

<<<<<<< HEAD
    (39) record_fields -> field_list .
    (40) field_list -> field_list . field_declaration SEMICOLON
    (42) field_declaration -> . id_list COLON type
    (15) id_list -> . id_list COMMA ID
    (16) id_list -> . ID

    END             reduce using rule 39 (record_fields -> field_list .)
    ID              shift and go to state 25
=======
    (33) param_list -> param .

    RPAREN          reduce using rule 33 (param_list -> param .)
    SEMICOLON       reduce using rule 33 (param_list -> param .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    field_declaration              shift and go to state 183
    id_list                        shift and go to state 149

state 148

<<<<<<< HEAD
    (41) field_list -> field_declaration . SEMICOLON

    SEMICOLON       shift and go to state 184
=======
    (34) param -> id_list . COLON type
    (18) id_list -> id_list . COMMA ID

    COLON           shift and go to state 175
    COMMA           shift and go to state 79
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 149

<<<<<<< HEAD
    (42) field_declaration -> id_list . COLON type
    (15) id_list -> id_list . COMMA ID

    COLON           shift and go to state 185
    COMMA           shift and go to state 55
=======
    (30) function_declaration -> FUNCTION ID COLON type . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 176
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 150

<<<<<<< HEAD
    (35) subrange_type -> constant DOTDOT . constant
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    STRING_LITERAL  shift and go to state 94
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    ID              shift and go to state 106
=======
    (31) function_declaration -> FUNCTION ID LPAREN param_list . RPAREN COLON type SEMICOLON block SEMICOLON
    (32) param_list -> param_list . SEMICOLON param

    RPAREN          shift and go to state 177
    SEMICOLON       shift and go to state 174
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    constant                       shift and go to state 186
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 151

<<<<<<< HEAD
    (105) constant -> sign UNSIGNED_NUMBER .

    DOTDOT          reduce using rule 105 (constant -> sign UNSIGNED_NUMBER .)
    SEMICOLON       reduce using rule 105 (constant -> sign UNSIGNED_NUMBER .)
    RBRACKET        reduce using rule 105 (constant -> sign UNSIGNED_NUMBER .)
    RPAREN          reduce using rule 105 (constant -> sign UNSIGNED_NUMBER .)
=======
    (12) identifier_list -> identifier_list COMMA ID .

    SEMICOLON       reduce using rule 12 (identifier_list -> identifier_list COMMA ID .)
    COMMA           reduce using rule 12 (identifier_list -> identifier_list COMMA ID .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 152

<<<<<<< HEAD
    (25) param -> ID COLON . type
    (30) type -> . simple_type
    (31) type -> . array_type
    (32) type -> . record_type
    (33) simple_type -> . subrange_type
    (34) simple_type -> . type_identifier
    (36) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (38) record_type -> . RECORD record_fields END
    (35) subrange_type -> . constant DOTDOT constant
    (43) type_identifier -> . ID
    (44) type_identifier -> . predefined_type
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (45) predefined_type -> . INTEGER
    (46) predefined_type -> . REAL
    (47) predefined_type -> . BOOLEAN
    (48) predefined_type -> . STRING
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    ARRAY           shift and go to state 87
    RECORD          shift and go to state 88
    ID              shift and go to state 90
    STRING_LITERAL  shift and go to state 94
    INTEGER         shift and go to state 96
    REAL            shift and go to state 97
    BOOLEAN         shift and go to state 98
    STRING          shift and go to state 99
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
=======
    (56) assignment_statement -> variable ASSIGN expression SEMICOLON .

    END             reduce using rule 56 (assignment_statement -> variable ASSIGN expression SEMICOLON .)
    ID              reduce using rule 56 (assignment_statement -> variable ASSIGN expression SEMICOLON .)
    BEGIN           reduce using rule 56 (assignment_statement -> variable ASSIGN expression SEMICOLON .)
    IF              reduce using rule 56 (assignment_statement -> variable ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 56 (assignment_statement -> variable ASSIGN expression SEMICOLON .)
    REPEAT          reduce using rule 56 (assignment_statement -> variable ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 56 (assignment_statement -> variable ASSIGN expression SEMICOLON .)
    UNTIL           reduce using rule 56 (assignment_statement -> variable ASSIGN expression SEMICOLON .)
    ELSE            reduce using rule 56 (assignment_statement -> variable ASSIGN expression SEMICOLON .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    type                           shift and go to state 187
    simple_type                    shift and go to state 82
    array_type                     shift and go to state 83
    record_type                    shift and go to state 84
    subrange_type                  shift and go to state 85
    type_identifier                shift and go to state 86
    constant                       shift and go to state 89
    predefined_type                shift and go to state 91
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 153

<<<<<<< HEAD
    (21) procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN . SEMICOLON block

    SEMICOLON       shift and go to state 188
=======
    (62) procedure_call -> ID LPAREN args RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 178
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 154

<<<<<<< HEAD
    (22) param_list -> param_list SEMICOLON . param
    (25) param -> . ID COLON type

    ID              shift and go to state 110

    param                          shift and go to state 189

state 155

    (66) variable -> variable LBRACKET expression_list RBRACKET .

    ASSIGN          reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOT             reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIVIDE_INT      reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    NEQUAL          reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    LT              reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    GT              reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    LE              reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    GE              reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    XOR             reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    END             reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    SEMICOLON       reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    UNTIL           reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOWNTO          reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
=======
    (64) args -> args COMMA . expression
    (76) expression -> . simple_expression relop_opt
    (86) simple_expression -> . term
    (87) simple_expression -> . simple_expression addop term
    (92) term -> . factor
    (93) term -> . term mulop factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    expression                     shift and go to state 179
    simple_expression              shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    variable                       shift and go to state 66

state 155

    (58) variable -> ID LBRACKET expression_list RBRACKET .

    ASSIGN          reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    DIVIDE_INT      reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    DIV             reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    MOD             reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    SHL             reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    SHR             reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    XOR             reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    NEQUAL          reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    LT              reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    LE              reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    GT              reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    GE              reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    SEMICOLON       reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
    DOWNTO          reduce using rule 58 (variable -> ID LBRACKET expression_list RBRACKET .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 156

<<<<<<< HEAD
    (68) expression_list -> expression_list COMMA . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 190
    variable                       shift and go to state 71

state 157

    (70) if_statement -> IF expression THEN statement . else_part
    (71) else_part -> . ELSE statement
    (72) else_part -> . empty
    (113) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 192
    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    UNTIL           reduce using rule 113 (empty -> .)

  ! ELSE            [ reduce using rule 113 (empty -> .) ]

    else_part                      shift and go to state 191
    empty                          shift and go to state 193

state 158

    (83) expression -> expression PLUS expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 83 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 83 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 83 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 83 (expression -> expression PLUS expression .)
    NEQUAL          reduce using rule 83 (expression -> expression PLUS expression .)
    LT              reduce using rule 83 (expression -> expression PLUS expression .)
    GT              reduce using rule 83 (expression -> expression PLUS expression .)
    LE              reduce using rule 83 (expression -> expression PLUS expression .)
    GE              reduce using rule 83 (expression -> expression PLUS expression .)
    AND             reduce using rule 83 (expression -> expression PLUS expression .)
    OR              reduce using rule 83 (expression -> expression PLUS expression .)
    XOR             reduce using rule 83 (expression -> expression PLUS expression .)
    DO              reduce using rule 83 (expression -> expression PLUS expression .)
    END             reduce using rule 83 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 83 (expression -> expression PLUS expression .)
    UNTIL           reduce using rule 83 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 83 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 83 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 83 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 83 (expression -> expression PLUS expression .)
    TO              reduce using rule 83 (expression -> expression PLUS expression .)
    DOWNTO          reduce using rule 83 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! TIMES           [ reduce using rule 83 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 83 (expression -> expression PLUS expression .) ]
  ! DIVIDE_INT      [ reduce using rule 83 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 83 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 121 ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 159

    (84) expression -> expression MINUS expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 84 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 84 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 84 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 84 (expression -> expression MINUS expression .)
    NEQUAL          reduce using rule 84 (expression -> expression MINUS expression .)
    LT              reduce using rule 84 (expression -> expression MINUS expression .)
    GT              reduce using rule 84 (expression -> expression MINUS expression .)
    LE              reduce using rule 84 (expression -> expression MINUS expression .)
    GE              reduce using rule 84 (expression -> expression MINUS expression .)
    AND             reduce using rule 84 (expression -> expression MINUS expression .)
    OR              reduce using rule 84 (expression -> expression MINUS expression .)
    XOR             reduce using rule 84 (expression -> expression MINUS expression .)
    DO              reduce using rule 84 (expression -> expression MINUS expression .)
    END             reduce using rule 84 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 84 (expression -> expression MINUS expression .)
    UNTIL           reduce using rule 84 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 84 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 84 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 84 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 84 (expression -> expression MINUS expression .)
    TO              reduce using rule 84 (expression -> expression MINUS expression .)
    DOWNTO          reduce using rule 84 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! TIMES           [ reduce using rule 84 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 84 (expression -> expression MINUS expression .) ]
  ! DIVIDE_INT      [ reduce using rule 84 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 84 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 121 ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]
=======
    (60) expression_list -> expression_list COMMA . expression
    (76) expression -> . simple_expression relop_opt
    (86) simple_expression -> . term
    (87) simple_expression -> . simple_expression addop term
    (92) term -> . factor
    (93) term -> . term mulop factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    expression                     shift and go to state 180
    simple_expression              shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    variable                       shift and go to state 66

state 157

    (68) if_statement -> IF expression THEN statement . else_part
    (69) else_part -> . ELSE statement
    (70) else_part -> . empty
    (114) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 182
    END             reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    BEGIN           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    REPEAT          reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    UNTIL           reduce using rule 114 (empty -> .)

  ! ELSE            [ reduce using rule 114 (empty -> .) ]

    else_part                      shift and go to state 181
    empty                          shift and go to state 183

state 158

    (87) simple_expression -> simple_expression addop term .
    (93) term -> term . mulop factor
    (94) mulop -> . TIMES
    (95) mulop -> . DIVIDE
    (96) mulop -> . DIVIDE_INT
    (97) mulop -> . MODULO
    (98) mulop -> . DIV
    (99) mulop -> . MOD
    (100) mulop -> . AND
    (101) mulop -> . SHL
    (102) mulop -> . SHR

    PLUS            reduce using rule 87 (simple_expression -> simple_expression addop term .)
    MINUS           reduce using rule 87 (simple_expression -> simple_expression addop term .)
    OR              reduce using rule 87 (simple_expression -> simple_expression addop term .)
    XOR             reduce using rule 87 (simple_expression -> simple_expression addop term .)
    EQUAL           reduce using rule 87 (simple_expression -> simple_expression addop term .)
    NEQUAL          reduce using rule 87 (simple_expression -> simple_expression addop term .)
    LT              reduce using rule 87 (simple_expression -> simple_expression addop term .)
    LE              reduce using rule 87 (simple_expression -> simple_expression addop term .)
    GT              reduce using rule 87 (simple_expression -> simple_expression addop term .)
    GE              reduce using rule 87 (simple_expression -> simple_expression addop term .)
    IN              reduce using rule 87 (simple_expression -> simple_expression addop term .)
    THEN            reduce using rule 87 (simple_expression -> simple_expression addop term .)
    DO              reduce using rule 87 (simple_expression -> simple_expression addop term .)
    SEMICOLON       reduce using rule 87 (simple_expression -> simple_expression addop term .)
    RPAREN          reduce using rule 87 (simple_expression -> simple_expression addop term .)
    COMMA           reduce using rule 87 (simple_expression -> simple_expression addop term .)
    RBRACKET        reduce using rule 87 (simple_expression -> simple_expression addop term .)
    TO              reduce using rule 87 (simple_expression -> simple_expression addop term .)
    DOWNTO          reduce using rule 87 (simple_expression -> simple_expression addop term .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116
    DIVIDE_INT      shift and go to state 117
    MODULO          shift and go to state 118
    DIV             shift and go to state 119
    MOD             shift and go to state 120
    AND             shift and go to state 121
    SHL             shift and go to state 122
    SHR             shift and go to state 123

    mulop                          shift and go to state 114

state 159

    (77) relop_opt -> relop simple_expression .
    (87) simple_expression -> simple_expression . addop term
    (88) addop -> . PLUS
    (89) addop -> . MINUS
    (90) addop -> . OR
    (91) addop -> . XOR

    THEN            reduce using rule 77 (relop_opt -> relop simple_expression .)
    DO              reduce using rule 77 (relop_opt -> relop simple_expression .)
    SEMICOLON       reduce using rule 77 (relop_opt -> relop simple_expression .)
    RPAREN          reduce using rule 77 (relop_opt -> relop simple_expression .)
    COMMA           reduce using rule 77 (relop_opt -> relop simple_expression .)
    RBRACKET        reduce using rule 77 (relop_opt -> relop simple_expression .)
    TO              reduce using rule 77 (relop_opt -> relop simple_expression .)
    DOWNTO          reduce using rule 77 (relop_opt -> relop simple_expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    OR              shift and go to state 105
    XOR             shift and go to state 106
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    addop                          shift and go to state 100

state 160

<<<<<<< HEAD
    (85) expression -> expression TIMES expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 85 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 85 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 85 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 85 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 85 (expression -> expression TIMES expression .)
    DIVIDE_INT      reduce using rule 85 (expression -> expression TIMES expression .)
    MODULO          reduce using rule 85 (expression -> expression TIMES expression .)
    EQUAL           reduce using rule 85 (expression -> expression TIMES expression .)
    NEQUAL          reduce using rule 85 (expression -> expression TIMES expression .)
    LT              reduce using rule 85 (expression -> expression TIMES expression .)
    GT              reduce using rule 85 (expression -> expression TIMES expression .)
    LE              reduce using rule 85 (expression -> expression TIMES expression .)
    GE              reduce using rule 85 (expression -> expression TIMES expression .)
    AND             reduce using rule 85 (expression -> expression TIMES expression .)
    OR              reduce using rule 85 (expression -> expression TIMES expression .)
    XOR             reduce using rule 85 (expression -> expression TIMES expression .)
    DO              reduce using rule 85 (expression -> expression TIMES expression .)
    END             reduce using rule 85 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 85 (expression -> expression TIMES expression .)
    UNTIL           reduce using rule 85 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 85 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 85 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 85 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 85 (expression -> expression TIMES expression .)
    TO              reduce using rule 85 (expression -> expression TIMES expression .)
    DOWNTO          reduce using rule 85 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 121 ]
  ! TIMES           [ shift and go to state 122 ]
  ! DIVIDE          [ shift and go to state 123 ]
  ! DIVIDE_INT      [ shift and go to state 124 ]
  ! MODULO          [ shift and go to state 125 ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]
=======
    (93) term -> term mulop factor .

    TIMES           reduce using rule 93 (term -> term mulop factor .)
    DIVIDE          reduce using rule 93 (term -> term mulop factor .)
    DIVIDE_INT      reduce using rule 93 (term -> term mulop factor .)
    MODULO          reduce using rule 93 (term -> term mulop factor .)
    DIV             reduce using rule 93 (term -> term mulop factor .)
    MOD             reduce using rule 93 (term -> term mulop factor .)
    AND             reduce using rule 93 (term -> term mulop factor .)
    SHL             reduce using rule 93 (term -> term mulop factor .)
    SHR             reduce using rule 93 (term -> term mulop factor .)
    PLUS            reduce using rule 93 (term -> term mulop factor .)
    MINUS           reduce using rule 93 (term -> term mulop factor .)
    OR              reduce using rule 93 (term -> term mulop factor .)
    XOR             reduce using rule 93 (term -> term mulop factor .)
    EQUAL           reduce using rule 93 (term -> term mulop factor .)
    NEQUAL          reduce using rule 93 (term -> term mulop factor .)
    LT              reduce using rule 93 (term -> term mulop factor .)
    LE              reduce using rule 93 (term -> term mulop factor .)
    GT              reduce using rule 93 (term -> term mulop factor .)
    GE              reduce using rule 93 (term -> term mulop factor .)
    IN              reduce using rule 93 (term -> term mulop factor .)
    THEN            reduce using rule 93 (term -> term mulop factor .)
    DO              reduce using rule 93 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 93 (term -> term mulop factor .)
    RPAREN          reduce using rule 93 (term -> term mulop factor .)
    COMMA           reduce using rule 93 (term -> term mulop factor .)
    RBRACKET        reduce using rule 93 (term -> term mulop factor .)
    TO              reduce using rule 93 (term -> term mulop factor .)
    DOWNTO          reduce using rule 93 (term -> term mulop factor .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 161

<<<<<<< HEAD
    (86) expression -> expression DIVIDE expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 86 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 86 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 86 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 86 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 86 (expression -> expression DIVIDE expression .)
    DIVIDE_INT      reduce using rule 86 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 86 (expression -> expression DIVIDE expression .)
    EQUAL           reduce using rule 86 (expression -> expression DIVIDE expression .)
    NEQUAL          reduce using rule 86 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 86 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 86 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 86 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 86 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 86 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 86 (expression -> expression DIVIDE expression .)
    XOR             reduce using rule 86 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 86 (expression -> expression DIVIDE expression .)
    END             reduce using rule 86 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 86 (expression -> expression DIVIDE expression .)
    UNTIL           reduce using rule 86 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 86 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 86 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 86 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 86 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 86 (expression -> expression DIVIDE expression .)
    DOWNTO          reduce using rule 86 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 121 ]
  ! TIMES           [ shift and go to state 122 ]
  ! DIVIDE          [ shift and go to state 123 ]
  ! DIVIDE_INT      [ shift and go to state 124 ]
  ! MODULO          [ shift and go to state 125 ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]
=======
    (107) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    DIVIDE_INT      reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    SHL             reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    SHR             reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    XOR             reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    NEQUAL          reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    IN              reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 107 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 107 (factor -> LPAREN expression RPAREN .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 162

<<<<<<< HEAD
    (87) expression -> expression DIVIDE_INT expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    PLUS            reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    MINUS           reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    TIMES           reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    DIVIDE          reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    DIVIDE_INT      reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    MODULO          reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    EQUAL           reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    NEQUAL          reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    LT              reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    GT              reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    LE              reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    GE              reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    AND             reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    OR              reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    XOR             reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    DO              reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    END             reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    SEMICOLON       reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    UNTIL           reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    ELSE            reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    RBRACKET        reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    COMMA           reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    RPAREN          reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    TO              reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    DOWNTO          reduce using rule 87 (expression -> expression DIVIDE_INT expression .)

  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 121 ]
  ! TIMES           [ shift and go to state 122 ]
  ! DIVIDE          [ shift and go to state 123 ]
  ! DIVIDE_INT      [ shift and go to state 124 ]
  ! MODULO          [ shift and go to state 125 ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]
=======
    (71) while_statement -> WHILE expression DO statement .

    END             reduce using rule 71 (while_statement -> WHILE expression DO statement .)
    ID              reduce using rule 71 (while_statement -> WHILE expression DO statement .)
    BEGIN           reduce using rule 71 (while_statement -> WHILE expression DO statement .)
    IF              reduce using rule 71 (while_statement -> WHILE expression DO statement .)
    WHILE           reduce using rule 71 (while_statement -> WHILE expression DO statement .)
    REPEAT          reduce using rule 71 (while_statement -> WHILE expression DO statement .)
    FOR             reduce using rule 71 (while_statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 71 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 71 (while_statement -> WHILE expression DO statement .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 163

<<<<<<< HEAD
    (88) expression -> expression MODULO expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 88 (expression -> expression MODULO expression .)
    PLUS            reduce using rule 88 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 88 (expression -> expression MODULO expression .)
    TIMES           reduce using rule 88 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 88 (expression -> expression MODULO expression .)
    DIVIDE_INT      reduce using rule 88 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 88 (expression -> expression MODULO expression .)
    EQUAL           reduce using rule 88 (expression -> expression MODULO expression .)
    NEQUAL          reduce using rule 88 (expression -> expression MODULO expression .)
    LT              reduce using rule 88 (expression -> expression MODULO expression .)
    GT              reduce using rule 88 (expression -> expression MODULO expression .)
    LE              reduce using rule 88 (expression -> expression MODULO expression .)
    GE              reduce using rule 88 (expression -> expression MODULO expression .)
    AND             reduce using rule 88 (expression -> expression MODULO expression .)
    OR              reduce using rule 88 (expression -> expression MODULO expression .)
    XOR             reduce using rule 88 (expression -> expression MODULO expression .)
    DO              reduce using rule 88 (expression -> expression MODULO expression .)
    END             reduce using rule 88 (expression -> expression MODULO expression .)
    SEMICOLON       reduce using rule 88 (expression -> expression MODULO expression .)
    UNTIL           reduce using rule 88 (expression -> expression MODULO expression .)
    ELSE            reduce using rule 88 (expression -> expression MODULO expression .)
    RBRACKET        reduce using rule 88 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 88 (expression -> expression MODULO expression .)
    RPAREN          reduce using rule 88 (expression -> expression MODULO expression .)
    TO              reduce using rule 88 (expression -> expression MODULO expression .)
    DOWNTO          reduce using rule 88 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 121 ]
  ! TIMES           [ shift and go to state 122 ]
  ! DIVIDE          [ shift and go to state 123 ]
  ! DIVIDE_INT      [ shift and go to state 124 ]
  ! MODULO          [ shift and go to state 125 ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]
=======
    (72) repeat_statement -> REPEAT statement_list UNTIL expression . SEMICOLON

    SEMICOLON       shift and go to state 184
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 164

<<<<<<< HEAD
    (89) expression -> expression EQUAL expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 89 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 89 (expression -> expression EQUAL expression .)
    NEQUAL          reduce using rule 89 (expression -> expression EQUAL expression .)
    LT              reduce using rule 89 (expression -> expression EQUAL expression .)
    GT              reduce using rule 89 (expression -> expression EQUAL expression .)
    LE              reduce using rule 89 (expression -> expression EQUAL expression .)
    GE              reduce using rule 89 (expression -> expression EQUAL expression .)
    AND             reduce using rule 89 (expression -> expression EQUAL expression .)
    OR              reduce using rule 89 (expression -> expression EQUAL expression .)
    XOR             reduce using rule 89 (expression -> expression EQUAL expression .)
    DO              reduce using rule 89 (expression -> expression EQUAL expression .)
    END             reduce using rule 89 (expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 89 (expression -> expression EQUAL expression .)
    UNTIL           reduce using rule 89 (expression -> expression EQUAL expression .)
    ELSE            reduce using rule 89 (expression -> expression EQUAL expression .)
    RBRACKET        reduce using rule 89 (expression -> expression EQUAL expression .)
    COMMA           reduce using rule 89 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 89 (expression -> expression EQUAL expression .)
    TO              reduce using rule 89 (expression -> expression EQUAL expression .)
    DOWNTO          reduce using rule 89 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! PLUS            [ reduce using rule 89 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 89 (expression -> expression EQUAL expression .) ]
  ! TIMES           [ reduce using rule 89 (expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 89 (expression -> expression EQUAL expression .) ]
  ! DIVIDE_INT      [ reduce using rule 89 (expression -> expression EQUAL expression .) ]
  ! MODULO          [ reduce using rule 89 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]
=======
    (73) for_statement -> FOR ID ASSIGN expression . direction expression DO statement
    (74) direction -> . TO
    (75) direction -> . DOWNTO

    TO              shift and go to state 186
    DOWNTO          shift and go to state 187
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

    direction                      shift and go to state 185

state 165

<<<<<<< HEAD
    (90) expression -> expression NEQUAL expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 90 (expression -> expression NEQUAL expression .)
    EQUAL           reduce using rule 90 (expression -> expression NEQUAL expression .)
    NEQUAL          reduce using rule 90 (expression -> expression NEQUAL expression .)
    LT              reduce using rule 90 (expression -> expression NEQUAL expression .)
    GT              reduce using rule 90 (expression -> expression NEQUAL expression .)
    LE              reduce using rule 90 (expression -> expression NEQUAL expression .)
    GE              reduce using rule 90 (expression -> expression NEQUAL expression .)
    AND             reduce using rule 90 (expression -> expression NEQUAL expression .)
    OR              reduce using rule 90 (expression -> expression NEQUAL expression .)
    XOR             reduce using rule 90 (expression -> expression NEQUAL expression .)
    DO              reduce using rule 90 (expression -> expression NEQUAL expression .)
    END             reduce using rule 90 (expression -> expression NEQUAL expression .)
    SEMICOLON       reduce using rule 90 (expression -> expression NEQUAL expression .)
    UNTIL           reduce using rule 90 (expression -> expression NEQUAL expression .)
    ELSE            reduce using rule 90 (expression -> expression NEQUAL expression .)
    RBRACKET        reduce using rule 90 (expression -> expression NEQUAL expression .)
    COMMA           reduce using rule 90 (expression -> expression NEQUAL expression .)
    RPAREN          reduce using rule 90 (expression -> expression NEQUAL expression .)
    TO              reduce using rule 90 (expression -> expression NEQUAL expression .)
    DOWNTO          reduce using rule 90 (expression -> expression NEQUAL expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! PLUS            [ reduce using rule 90 (expression -> expression NEQUAL expression .) ]
  ! MINUS           [ reduce using rule 90 (expression -> expression NEQUAL expression .) ]
  ! TIMES           [ reduce using rule 90 (expression -> expression NEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 90 (expression -> expression NEQUAL expression .) ]
  ! DIVIDE_INT      [ reduce using rule 90 (expression -> expression NEQUAL expression .) ]
  ! MODULO          [ reduce using rule 90 (expression -> expression NEQUAL expression .) ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]
=======
    (17) var_decl -> id_list COLON type SEMICOLON .

    ID              reduce using rule 17 (var_decl -> id_list COLON type SEMICOLON .)
    BEGIN           reduce using rule 17 (var_decl -> id_list COLON type SEMICOLON .)
    VAR             reduce using rule 17 (var_decl -> id_list COLON type SEMICOLON .)
    CONST           reduce using rule 17 (var_decl -> id_list COLON type SEMICOLON .)
    TYPE            reduce using rule 17 (var_decl -> id_list COLON type SEMICOLON .)
    PROCEDURE       reduce using rule 17 (var_decl -> id_list COLON type SEMICOLON .)
    FUNCTION        reduce using rule 17 (var_decl -> id_list COLON type SEMICOLON .)
    USES            reduce using rule 17 (var_decl -> id_list COLON type SEMICOLON .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 166

<<<<<<< HEAD
    (91) expression -> expression LT expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 91 (expression -> expression LT expression .)
    EQUAL           reduce using rule 91 (expression -> expression LT expression .)
    NEQUAL          reduce using rule 91 (expression -> expression LT expression .)
    LT              reduce using rule 91 (expression -> expression LT expression .)
    GT              reduce using rule 91 (expression -> expression LT expression .)
    LE              reduce using rule 91 (expression -> expression LT expression .)
    GE              reduce using rule 91 (expression -> expression LT expression .)
    AND             reduce using rule 91 (expression -> expression LT expression .)
    OR              reduce using rule 91 (expression -> expression LT expression .)
    XOR             reduce using rule 91 (expression -> expression LT expression .)
    DO              reduce using rule 91 (expression -> expression LT expression .)
    END             reduce using rule 91 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 91 (expression -> expression LT expression .)
    UNTIL           reduce using rule 91 (expression -> expression LT expression .)
    ELSE            reduce using rule 91 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 91 (expression -> expression LT expression .)
    COMMA           reduce using rule 91 (expression -> expression LT expression .)
    RPAREN          reduce using rule 91 (expression -> expression LT expression .)
    TO              reduce using rule 91 (expression -> expression LT expression .)
    DOWNTO          reduce using rule 91 (expression -> expression LT expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! PLUS            [ reduce using rule 91 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 91 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 91 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 91 (expression -> expression LT expression .) ]
  ! DIVIDE_INT      [ reduce using rule 91 (expression -> expression LT expression .) ]
  ! MODULO          [ reduce using rule 91 (expression -> expression LT expression .) ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 167

    (92) expression -> expression GT expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 92 (expression -> expression GT expression .)
    EQUAL           reduce using rule 92 (expression -> expression GT expression .)
    NEQUAL          reduce using rule 92 (expression -> expression GT expression .)
    LT              reduce using rule 92 (expression -> expression GT expression .)
    GT              reduce using rule 92 (expression -> expression GT expression .)
    LE              reduce using rule 92 (expression -> expression GT expression .)
    GE              reduce using rule 92 (expression -> expression GT expression .)
    AND             reduce using rule 92 (expression -> expression GT expression .)
    OR              reduce using rule 92 (expression -> expression GT expression .)
    XOR             reduce using rule 92 (expression -> expression GT expression .)
    DO              reduce using rule 92 (expression -> expression GT expression .)
    END             reduce using rule 92 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 92 (expression -> expression GT expression .)
    UNTIL           reduce using rule 92 (expression -> expression GT expression .)
    ELSE            reduce using rule 92 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 92 (expression -> expression GT expression .)
    COMMA           reduce using rule 92 (expression -> expression GT expression .)
    RPAREN          reduce using rule 92 (expression -> expression GT expression .)
    TO              reduce using rule 92 (expression -> expression GT expression .)
    DOWNTO          reduce using rule 92 (expression -> expression GT expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! PLUS            [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! DIVIDE_INT      [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! MODULO          [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 168

    (93) expression -> expression LE expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 93 (expression -> expression LE expression .)
    EQUAL           reduce using rule 93 (expression -> expression LE expression .)
    NEQUAL          reduce using rule 93 (expression -> expression LE expression .)
    LT              reduce using rule 93 (expression -> expression LE expression .)
    GT              reduce using rule 93 (expression -> expression LE expression .)
    LE              reduce using rule 93 (expression -> expression LE expression .)
    GE              reduce using rule 93 (expression -> expression LE expression .)
    AND             reduce using rule 93 (expression -> expression LE expression .)
    OR              reduce using rule 93 (expression -> expression LE expression .)
    XOR             reduce using rule 93 (expression -> expression LE expression .)
    DO              reduce using rule 93 (expression -> expression LE expression .)
    END             reduce using rule 93 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 93 (expression -> expression LE expression .)
    UNTIL           reduce using rule 93 (expression -> expression LE expression .)
    ELSE            reduce using rule 93 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 93 (expression -> expression LE expression .)
    COMMA           reduce using rule 93 (expression -> expression LE expression .)
    RPAREN          reduce using rule 93 (expression -> expression LE expression .)
    TO              reduce using rule 93 (expression -> expression LE expression .)
    DOWNTO          reduce using rule 93 (expression -> expression LE expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! PLUS            [ reduce using rule 93 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 93 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 93 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 93 (expression -> expression LE expression .) ]
  ! DIVIDE_INT      [ reduce using rule 93 (expression -> expression LE expression .) ]
  ! MODULO          [ reduce using rule 93 (expression -> expression LE expression .) ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]
=======
    (40) type -> ARRAY LBRACKET . range RBRACKET OF type
    (42) range -> . INTEGER_CONST DOTDOT INTEGER_CONST

    INTEGER_CONST   shift and go to state 189

    range                          shift and go to state 188

state 167

    (41) type -> RECORD field_list . END
    (43) field_list -> field_list . field_decl SEMICOLON
    (45) field_decl -> . id_list COLON type
    (18) id_list -> . id_list COMMA ID
    (19) id_list -> . ID

    END             shift and go to state 190
    ID              shift and go to state 43

    field_decl                     shift and go to state 191
    id_list                        shift and go to state 169

state 168

    (44) field_list -> field_decl . SEMICOLON

    SEMICOLON       shift and go to state 192
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 169

<<<<<<< HEAD
    (94) expression -> expression GE expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 94 (expression -> expression GE expression .)
    EQUAL           reduce using rule 94 (expression -> expression GE expression .)
    NEQUAL          reduce using rule 94 (expression -> expression GE expression .)
    LT              reduce using rule 94 (expression -> expression GE expression .)
    GT              reduce using rule 94 (expression -> expression GE expression .)
    LE              reduce using rule 94 (expression -> expression GE expression .)
    GE              reduce using rule 94 (expression -> expression GE expression .)
    AND             reduce using rule 94 (expression -> expression GE expression .)
    OR              reduce using rule 94 (expression -> expression GE expression .)
    XOR             reduce using rule 94 (expression -> expression GE expression .)
    DO              reduce using rule 94 (expression -> expression GE expression .)
    END             reduce using rule 94 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 94 (expression -> expression GE expression .)
    UNTIL           reduce using rule 94 (expression -> expression GE expression .)
    ELSE            reduce using rule 94 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 94 (expression -> expression GE expression .)
    COMMA           reduce using rule 94 (expression -> expression GE expression .)
    RPAREN          reduce using rule 94 (expression -> expression GE expression .)
    TO              reduce using rule 94 (expression -> expression GE expression .)
    DOWNTO          reduce using rule 94 (expression -> expression GE expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! PLUS            [ reduce using rule 94 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 94 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 94 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 94 (expression -> expression GE expression .) ]
  ! DIVIDE_INT      [ reduce using rule 94 (expression -> expression GE expression .) ]
  ! MODULO          [ reduce using rule 94 (expression -> expression GE expression .) ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]
=======
    (45) field_decl -> id_list . COLON type
    (18) id_list -> id_list . COMMA ID

    COLON           shift and go to state 193
    COMMA           shift and go to state 79
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 170

<<<<<<< HEAD
    (95) expression -> expression AND expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 95 (expression -> expression AND expression .)
    AND             reduce using rule 95 (expression -> expression AND expression .)
    OR              reduce using rule 95 (expression -> expression AND expression .)
    XOR             reduce using rule 95 (expression -> expression AND expression .)
    DO              reduce using rule 95 (expression -> expression AND expression .)
    END             reduce using rule 95 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 95 (expression -> expression AND expression .)
    UNTIL           reduce using rule 95 (expression -> expression AND expression .)
    ELSE            reduce using rule 95 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 95 (expression -> expression AND expression .)
    COMMA           reduce using rule 95 (expression -> expression AND expression .)
    RPAREN          reduce using rule 95 (expression -> expression AND expression .)
    TO              reduce using rule 95 (expression -> expression AND expression .)
    DOWNTO          reduce using rule 95 (expression -> expression AND expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131

  ! PLUS            [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! DIVIDE_INT      [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! NEQUAL          [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]
=======
    (23) const_decl -> ID EQUAL constant SEMICOLON .

    ID              reduce using rule 23 (const_decl -> ID EQUAL constant SEMICOLON .)
    BEGIN           reduce using rule 23 (const_decl -> ID EQUAL constant SEMICOLON .)
    VAR             reduce using rule 23 (const_decl -> ID EQUAL constant SEMICOLON .)
    CONST           reduce using rule 23 (const_decl -> ID EQUAL constant SEMICOLON .)
    TYPE            reduce using rule 23 (const_decl -> ID EQUAL constant SEMICOLON .)
    PROCEDURE       reduce using rule 23 (const_decl -> ID EQUAL constant SEMICOLON .)
    FUNCTION        reduce using rule 23 (const_decl -> ID EQUAL constant SEMICOLON .)
    USES            reduce using rule 23 (const_decl -> ID EQUAL constant SEMICOLON .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 171

<<<<<<< HEAD
    (96) expression -> expression OR expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 96 (expression -> expression OR expression .)
    OR              reduce using rule 96 (expression -> expression OR expression .)
    XOR             reduce using rule 96 (expression -> expression OR expression .)
    DO              reduce using rule 96 (expression -> expression OR expression .)
    END             reduce using rule 96 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 96 (expression -> expression OR expression .)
    UNTIL           reduce using rule 96 (expression -> expression OR expression .)
    ELSE            reduce using rule 96 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 96 (expression -> expression OR expression .)
    COMMA           reduce using rule 96 (expression -> expression OR expression .)
    RPAREN          reduce using rule 96 (expression -> expression OR expression .)
    TO              reduce using rule 96 (expression -> expression OR expression .)
    DOWNTO          reduce using rule 96 (expression -> expression OR expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132

  ! PLUS            [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! DIVIDE_INT      [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! NEQUAL          [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]
=======
    (27) type_decl -> ID EQUAL type SEMICOLON .

    ID              reduce using rule 27 (type_decl -> ID EQUAL type SEMICOLON .)
    BEGIN           reduce using rule 27 (type_decl -> ID EQUAL type SEMICOLON .)
    VAR             reduce using rule 27 (type_decl -> ID EQUAL type SEMICOLON .)
    CONST           reduce using rule 27 (type_decl -> ID EQUAL type SEMICOLON .)
    TYPE            reduce using rule 27 (type_decl -> ID EQUAL type SEMICOLON .)
    PROCEDURE       reduce using rule 27 (type_decl -> ID EQUAL type SEMICOLON .)
    FUNCTION        reduce using rule 27 (type_decl -> ID EQUAL type SEMICOLON .)
    USES            reduce using rule 27 (type_decl -> ID EQUAL type SEMICOLON .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 172

<<<<<<< HEAD
    (97) expression -> expression XOR expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 97 (expression -> expression XOR expression .)
    OR              reduce using rule 97 (expression -> expression XOR expression .)
    XOR             reduce using rule 97 (expression -> expression XOR expression .)
    DO              reduce using rule 97 (expression -> expression XOR expression .)
    END             reduce using rule 97 (expression -> expression XOR expression .)
    SEMICOLON       reduce using rule 97 (expression -> expression XOR expression .)
    UNTIL           reduce using rule 97 (expression -> expression XOR expression .)
    ELSE            reduce using rule 97 (expression -> expression XOR expression .)
    RBRACKET        reduce using rule 97 (expression -> expression XOR expression .)
    COMMA           reduce using rule 97 (expression -> expression XOR expression .)
    RPAREN          reduce using rule 97 (expression -> expression XOR expression .)
    TO              reduce using rule 97 (expression -> expression XOR expression .)
    DOWNTO          reduce using rule 97 (expression -> expression XOR expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132

  ! PLUS            [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! MINUS           [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! TIMES           [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! DIVIDE          [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! DIVIDE_INT      [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! MODULO          [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! EQUAL           [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! NEQUAL          [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! LT              [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! GT              [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! LE              [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! GE              [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! AND             [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]
=======
    (28) procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .

    BEGIN           reduce using rule 28 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 28 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 28 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 28 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 28 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 28 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
    USES            reduce using rule 28 (procedure_declaration -> PROCEDURE ID SEMICOLON block SEMICOLON .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 173

<<<<<<< HEAD
    (99) expression -> LPAREN expression RPAREN .

    THEN            reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    DIVIDE_INT      reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    NEQUAL          reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 99 (expression -> LPAREN expression RPAREN .)
=======
    (29) procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 194
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 174

<<<<<<< HEAD
    (73) while_statement -> WHILE expression DO statement .

    END             reduce using rule 73 (while_statement -> WHILE expression DO statement .)
    SEMICOLON       reduce using rule 73 (while_statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 73 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 73 (while_statement -> WHILE expression DO statement .)


state 175

    (74) repeat_statement -> REPEAT statement_list UNTIL expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    END             reduce using rule 74 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    SEMICOLON       reduce using rule 74 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    UNTIL           reduce using rule 74 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    ELSE            reduce using rule 74 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134


state 176

    (75) for_statement -> FOR ID ASSIGN expression . TO expression DO statement
    (76) for_statement -> FOR ID ASSIGN expression . DOWNTO expression DO statement
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    TO              shift and go to state 194
    DOWNTO          shift and go to state 195
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134


state 177

    (69) record_assignment -> ID DOT ID ASSIGN . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 196
    variable                       shift and go to state 71

state 178

    (78) procedure_call -> ID LPAREN args RPAREN .

    END             reduce using rule 78 (procedure_call -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 78 (procedure_call -> ID LPAREN args RPAREN .)
    UNTIL           reduce using rule 78 (procedure_call -> ID LPAREN args RPAREN .)
    ELSE            reduce using rule 78 (procedure_call -> ID LPAREN args RPAREN .)
=======
    (32) param_list -> param_list SEMICOLON . param
    (34) param -> . id_list COLON type
    (18) id_list -> . id_list COMMA ID
    (19) id_list -> . ID

    ID              shift and go to state 43

    param                          shift and go to state 195
    id_list                        shift and go to state 148

state 175

    (34) param -> id_list COLON . type
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . BOOLEAN
    (38) type -> . STRING
    (39) type -> . ID
    (40) type -> . ARRAY LBRACKET range RBRACKET OF type
    (41) type -> . RECORD field_list END

    INTEGER         shift and go to state 131
    REAL            shift and go to state 132
    BOOLEAN         shift and go to state 133
    STRING          shift and go to state 134
    ID              shift and go to state 135
    ARRAY           shift and go to state 136
    RECORD          shift and go to state 137

    type                           shift and go to state 196

state 176

    (30) function_declaration -> FUNCTION ID COLON type SEMICOLON . block SEMICOLON
    (2) block -> . declarations BEGIN statement_list END
    (3) declarations -> . declarations declaration
    (4) declarations -> . empty
    (114) empty -> .

    BEGIN           reduce using rule 114 (empty -> .)
    VAR             reduce using rule 114 (empty -> .)
    CONST           reduce using rule 114 (empty -> .)
    TYPE            reduce using rule 114 (empty -> .)
    PROCEDURE       reduce using rule 114 (empty -> .)
    FUNCTION        reduce using rule 114 (empty -> .)
    USES            reduce using rule 114 (empty -> .)

    block                          shift and go to state 197
    declarations                   shift and go to state 6
    empty                          shift and go to state 7

state 177

    (31) function_declaration -> FUNCTION ID LPAREN param_list RPAREN . COLON type SEMICOLON block SEMICOLON

    COLON           shift and go to state 198


state 178

    (62) procedure_call -> ID LPAREN args RPAREN SEMICOLON .

    END             reduce using rule 62 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
    ID              reduce using rule 62 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
    BEGIN           reduce using rule 62 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
    IF              reduce using rule 62 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
    WHILE           reduce using rule 62 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
    REPEAT          reduce using rule 62 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
    FOR             reduce using rule 62 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
    UNTIL           reduce using rule 62 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
    ELSE            reduce using rule 62 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 179

<<<<<<< HEAD
    (80) args -> args COMMA . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 197
    variable                       shift and go to state 71

state 180

    (36) array_type -> ARRAY LBRACKET index_type . RBRACKET OF type

    RBRACKET        shift and go to state 198
=======
    (64) args -> args COMMA expression .

    RPAREN          reduce using rule 64 (args -> args COMMA expression .)
    COMMA           reduce using rule 64 (args -> args COMMA expression .)


state 180

    (60) expression_list -> expression_list COMMA expression .

    RBRACKET        reduce using rule 60 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 60 (expression_list -> expression_list COMMA expression .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 181

<<<<<<< HEAD
    (37) index_type -> simple_type .

    RBRACKET        reduce using rule 37 (index_type -> simple_type .)
=======
    (68) if_statement -> IF expression THEN statement else_part .

    END             reduce using rule 68 (if_statement -> IF expression THEN statement else_part .)
    ID              reduce using rule 68 (if_statement -> IF expression THEN statement else_part .)
    BEGIN           reduce using rule 68 (if_statement -> IF expression THEN statement else_part .)
    IF              reduce using rule 68 (if_statement -> IF expression THEN statement else_part .)
    WHILE           reduce using rule 68 (if_statement -> IF expression THEN statement else_part .)
    REPEAT          reduce using rule 68 (if_statement -> IF expression THEN statement else_part .)
    FOR             reduce using rule 68 (if_statement -> IF expression THEN statement else_part .)
    UNTIL           reduce using rule 68 (if_statement -> IF expression THEN statement else_part .)
    ELSE            reduce using rule 68 (if_statement -> IF expression THEN statement else_part .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 182

<<<<<<< HEAD
    (38) record_type -> RECORD record_fields END .

    SEMICOLON       reduce using rule 38 (record_type -> RECORD record_fields END .)
    RPAREN          reduce using rule 38 (record_type -> RECORD record_fields END .)


state 183

    (40) field_list -> field_list field_declaration . SEMICOLON

    SEMICOLON       shift and go to state 199
=======
    (69) else_part -> ELSE . statement
    (48) statement -> . assignment_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . variable ASSIGN expression SEMICOLON
    (62) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (63) procedure_call -> . ID SEMICOLON
    (67) compound_statement -> . BEGIN statement_list END
    (68) if_statement -> . IF expression THEN statement else_part
    (71) while_statement -> . WHILE expression DO statement
    (72) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (73) for_statement -> . FOR ID ASSIGN expression direction expression DO statement
    (114) empty -> .
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ID              shift and go to state 35
    BEGIN           shift and go to state 23
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    REPEAT          shift and go to state 38
    FOR             shift and go to state 39
    ELSE            reduce using rule 114 (empty -> .)
    END             reduce using rule 114 (empty -> .)
    UNTIL           reduce using rule 114 (empty -> .)

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! BEGIN           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! REPEAT          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]

    statement                      shift and go to state 199
    assignment_statement           shift and go to state 26
    procedure_call                 shift and go to state 27
    compound_statement             shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    repeat_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    empty                          shift and go to state 33
    variable                       shift and go to state 34

state 183

    (70) else_part -> empty .

    ELSE            reduce using rule 70 (else_part -> empty .)
    END             reduce using rule 70 (else_part -> empty .)
    ID              reduce using rule 70 (else_part -> empty .)
    BEGIN           reduce using rule 70 (else_part -> empty .)
    IF              reduce using rule 70 (else_part -> empty .)
    WHILE           reduce using rule 70 (else_part -> empty .)
    REPEAT          reduce using rule 70 (else_part -> empty .)
    FOR             reduce using rule 70 (else_part -> empty .)
    UNTIL           reduce using rule 70 (else_part -> empty .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 184

<<<<<<< HEAD
    (41) field_list -> field_declaration SEMICOLON .

    ID              reduce using rule 41 (field_list -> field_declaration SEMICOLON .)
    END             reduce using rule 41 (field_list -> field_declaration SEMICOLON .)
=======
    (72) repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .

    END             reduce using rule 72 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    ID              reduce using rule 72 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    BEGIN           reduce using rule 72 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    IF              reduce using rule 72 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    WHILE           reduce using rule 72 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    REPEAT          reduce using rule 72 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    FOR             reduce using rule 72 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    UNTIL           reduce using rule 72 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    ELSE            reduce using rule 72 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 185

<<<<<<< HEAD
    (42) field_declaration -> id_list COLON . type
    (30) type -> . simple_type
    (31) type -> . array_type
    (32) type -> . record_type
    (33) simple_type -> . subrange_type
    (34) simple_type -> . type_identifier
    (36) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (38) record_type -> . RECORD record_fields END
    (35) subrange_type -> . constant DOTDOT constant
    (43) type_identifier -> . ID
    (44) type_identifier -> . predefined_type
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (45) predefined_type -> . INTEGER
    (46) predefined_type -> . REAL
    (47) predefined_type -> . BOOLEAN
    (48) predefined_type -> . STRING
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    ARRAY           shift and go to state 87
    RECORD          shift and go to state 88
    ID              shift and go to state 90
    STRING_LITERAL  shift and go to state 94
    INTEGER         shift and go to state 96
    REAL            shift and go to state 97
    BOOLEAN         shift and go to state 98
    STRING          shift and go to state 99
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103

    type                           shift and go to state 200
    simple_type                    shift and go to state 82
    array_type                     shift and go to state 83
    record_type                    shift and go to state 84
    subrange_type                  shift and go to state 85
    type_identifier                shift and go to state 86
    constant                       shift and go to state 89
    predefined_type                shift and go to state 91
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 186

    (35) subrange_type -> constant DOTDOT constant .

    SEMICOLON       reduce using rule 35 (subrange_type -> constant DOTDOT constant .)
    RBRACKET        reduce using rule 35 (subrange_type -> constant DOTDOT constant .)
    RPAREN          reduce using rule 35 (subrange_type -> constant DOTDOT constant .)
=======
    (73) for_statement -> FOR ID ASSIGN expression direction . expression DO statement
    (76) expression -> . simple_expression relop_opt
    (86) simple_expression -> . term
    (87) simple_expression -> . simple_expression addop term
    (92) term -> . factor
    (93) term -> . term mulop factor
    (103) factor -> . variable
    (104) factor -> . INTEGER_CONST
    (105) factor -> . REAL_CONST
    (106) factor -> . STRING_LITERAL
    (107) factor -> . LPAREN expression RPAREN
    (108) factor -> . NOT factor
    (109) factor -> . MINUS factor
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

    INTEGER_CONST   shift and go to state 67
    REAL_CONST      shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    LPAREN          shift and go to state 70
    NOT             shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    expression                     shift and go to state 200
    simple_expression              shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    variable                       shift and go to state 66

state 186

    (74) direction -> TO .

    INTEGER_CONST   reduce using rule 74 (direction -> TO .)
    REAL_CONST      reduce using rule 74 (direction -> TO .)
    STRING_LITERAL  reduce using rule 74 (direction -> TO .)
    LPAREN          reduce using rule 74 (direction -> TO .)
    NOT             reduce using rule 74 (direction -> TO .)
    MINUS           reduce using rule 74 (direction -> TO .)
    ID              reduce using rule 74 (direction -> TO .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 187

<<<<<<< HEAD
    (25) param -> ID COLON type .

    RPAREN          reduce using rule 25 (param -> ID COLON type .)
    SEMICOLON       reduce using rule 25 (param -> ID COLON type .)
=======
    (75) direction -> DOWNTO .

    INTEGER_CONST   reduce using rule 75 (direction -> DOWNTO .)
    REAL_CONST      reduce using rule 75 (direction -> DOWNTO .)
    STRING_LITERAL  reduce using rule 75 (direction -> DOWNTO .)
    LPAREN          reduce using rule 75 (direction -> DOWNTO .)
    NOT             reduce using rule 75 (direction -> DOWNTO .)
    MINUS           reduce using rule 75 (direction -> DOWNTO .)
    ID              reduce using rule 75 (direction -> DOWNTO .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 188

<<<<<<< HEAD
    (21) procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON . block
    (2) block -> . declarations compound_statement
    (3) declarations -> . declaration_list
    (4) declarations -> . empty
    (5) declaration_list -> . declaration_list declaration
    (6) declaration_list -> . declaration
    (113) empty -> .
    (7) declaration -> . var_declaration
    (8) declaration -> . const_declaration
    (9) declaration -> . type_declaration
    (10) declaration -> . procedure_declaration
    (11) var_declaration -> . VAR var_declaration_list
    (17) const_declaration -> . CONST const_list
    (26) type_declaration -> . TYPE type_list
    (21) procedure_declaration -> . PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block

    BEGIN           reduce using rule 113 (empty -> .)
    VAR             shift and go to state 14
    CONST           shift and go to state 15
    TYPE            shift and go to state 16
    PROCEDURE       shift and go to state 17

    block                          shift and go to state 201
    declarations                   shift and go to state 6
    declaration_list               shift and go to state 7
    empty                          shift and go to state 8
    declaration                    shift and go to state 9
    var_declaration                shift and go to state 10
    const_declaration              shift and go to state 11
    type_declaration               shift and go to state 12
    procedure_declaration          shift and go to state 13

state 189

    (22) param_list -> param_list SEMICOLON param .

    RPAREN          reduce using rule 22 (param_list -> param_list SEMICOLON param .)
    SEMICOLON       reduce using rule 22 (param_list -> param_list SEMICOLON param .)
=======
    (40) type -> ARRAY LBRACKET range . RBRACKET OF type

    RBRACKET        shift and go to state 201


state 189

    (42) range -> INTEGER_CONST . DOTDOT INTEGER_CONST

    DOTDOT          shift and go to state 202
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 190

<<<<<<< HEAD
    (68) expression_list -> expression_list COMMA expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    RBRACKET        reduce using rule 68 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 68 (expression_list -> expression_list COMMA expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134
=======
    (41) type -> RECORD field_list END .

    SEMICOLON       reduce using rule 41 (type -> RECORD field_list END .)
    RPAREN          reduce using rule 41 (type -> RECORD field_list END .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 191

<<<<<<< HEAD
    (70) if_statement -> IF expression THEN statement else_part .

    END             reduce using rule 70 (if_statement -> IF expression THEN statement else_part .)
    SEMICOLON       reduce using rule 70 (if_statement -> IF expression THEN statement else_part .)
    UNTIL           reduce using rule 70 (if_statement -> IF expression THEN statement else_part .)
    ELSE            reduce using rule 70 (if_statement -> IF expression THEN statement else_part .)
=======
    (43) field_list -> field_list field_decl . SEMICOLON

    SEMICOLON       shift and go to state 203
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 192

<<<<<<< HEAD
    (71) else_part -> ELSE . statement
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    ELSE            reduce using rule 113 (empty -> .)
    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    UNTIL           reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52

    statement                      shift and go to state 202
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 193

    (72) else_part -> empty .

    ELSE            reduce using rule 72 (else_part -> empty .)
    END             reduce using rule 72 (else_part -> empty .)
    SEMICOLON       reduce using rule 72 (else_part -> empty .)
    UNTIL           reduce using rule 72 (else_part -> empty .)


state 194

    (75) for_statement -> FOR ID ASSIGN expression TO . expression DO statement
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 203
    variable                       shift and go to state 71

state 195

    (76) for_statement -> FOR ID ASSIGN expression DOWNTO . expression DO statement
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 204
    variable                       shift and go to state 71

state 196

    (69) record_assignment -> ID DOT ID ASSIGN expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    END             reduce using rule 69 (record_assignment -> ID DOT ID ASSIGN expression .)
    SEMICOLON       reduce using rule 69 (record_assignment -> ID DOT ID ASSIGN expression .)
    UNTIL           reduce using rule 69 (record_assignment -> ID DOT ID ASSIGN expression .)
    ELSE            reduce using rule 69 (record_assignment -> ID DOT ID ASSIGN expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134
=======
    (44) field_list -> field_decl SEMICOLON .

    END             reduce using rule 44 (field_list -> field_decl SEMICOLON .)
    ID              reduce using rule 44 (field_list -> field_decl SEMICOLON .)


state 193

    (45) field_decl -> id_list COLON . type
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . BOOLEAN
    (38) type -> . STRING
    (39) type -> . ID
    (40) type -> . ARRAY LBRACKET range RBRACKET OF type
    (41) type -> . RECORD field_list END

    INTEGER         shift and go to state 131
    REAL            shift and go to state 132
    BOOLEAN         shift and go to state 133
    STRING          shift and go to state 134
    ID              shift and go to state 135
    ARRAY           shift and go to state 136
    RECORD          shift and go to state 137

    type                           shift and go to state 204

state 194

    (29) procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON . block SEMICOLON
    (2) block -> . declarations BEGIN statement_list END
    (3) declarations -> . declarations declaration
    (4) declarations -> . empty
    (114) empty -> .

    BEGIN           reduce using rule 114 (empty -> .)
    VAR             reduce using rule 114 (empty -> .)
    CONST           reduce using rule 114 (empty -> .)
    TYPE            reduce using rule 114 (empty -> .)
    PROCEDURE       reduce using rule 114 (empty -> .)
    FUNCTION        reduce using rule 114 (empty -> .)
    USES            reduce using rule 114 (empty -> .)

    block                          shift and go to state 205
    declarations                   shift and go to state 6
    empty                          shift and go to state 7

state 195

    (32) param_list -> param_list SEMICOLON param .

    RPAREN          reduce using rule 32 (param_list -> param_list SEMICOLON param .)
    SEMICOLON       reduce using rule 32 (param_list -> param_list SEMICOLON param .)


state 196

    (34) param -> id_list COLON type .

    RPAREN          reduce using rule 34 (param -> id_list COLON type .)
    SEMICOLON       reduce using rule 34 (param -> id_list COLON type .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 197

<<<<<<< HEAD
    (80) args -> args COMMA expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    RPAREN          reduce using rule 80 (args -> args COMMA expression .)
    COMMA           reduce using rule 80 (args -> args COMMA expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134
=======
    (30) function_declaration -> FUNCTION ID COLON type SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 206
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 198

<<<<<<< HEAD
    (36) array_type -> ARRAY LBRACKET index_type RBRACKET . OF type

    OF              shift and go to state 205


state 199

    (40) field_list -> field_list field_declaration SEMICOLON .

    ID              reduce using rule 40 (field_list -> field_list field_declaration SEMICOLON .)
    END             reduce using rule 40 (field_list -> field_list field_declaration SEMICOLON .)
=======
    (31) function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON . type SEMICOLON block SEMICOLON
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . BOOLEAN
    (38) type -> . STRING
    (39) type -> . ID
    (40) type -> . ARRAY LBRACKET range RBRACKET OF type
    (41) type -> . RECORD field_list END

    INTEGER         shift and go to state 131
    REAL            shift and go to state 132
    BOOLEAN         shift and go to state 133
    STRING          shift and go to state 134
    ID              shift and go to state 135
    ARRAY           shift and go to state 136
    RECORD          shift and go to state 137

    type                           shift and go to state 207

state 199

    (69) else_part -> ELSE statement .

    ELSE            reduce using rule 69 (else_part -> ELSE statement .)
    END             reduce using rule 69 (else_part -> ELSE statement .)
    ID              reduce using rule 69 (else_part -> ELSE statement .)
    BEGIN           reduce using rule 69 (else_part -> ELSE statement .)
    IF              reduce using rule 69 (else_part -> ELSE statement .)
    WHILE           reduce using rule 69 (else_part -> ELSE statement .)
    REPEAT          reduce using rule 69 (else_part -> ELSE statement .)
    FOR             reduce using rule 69 (else_part -> ELSE statement .)
    UNTIL           reduce using rule 69 (else_part -> ELSE statement .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 200

<<<<<<< HEAD
    (42) field_declaration -> id_list COLON type .

    SEMICOLON       reduce using rule 42 (field_declaration -> id_list COLON type .)
=======
    (73) for_statement -> FOR ID ASSIGN expression direction expression . DO statement

    DO              shift and go to state 208
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 201

<<<<<<< HEAD
    (21) procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .

    VAR             reduce using rule 21 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .)
    CONST           reduce using rule 21 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .)
    TYPE            reduce using rule 21 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .)
    PROCEDURE       reduce using rule 21 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .)
    BEGIN           reduce using rule 21 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .)
=======
    (40) type -> ARRAY LBRACKET range RBRACKET . OF type

    OF              shift and go to state 209
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 202

<<<<<<< HEAD
    (71) else_part -> ELSE statement .

    ELSE            reduce using rule 71 (else_part -> ELSE statement .)
    END             reduce using rule 71 (else_part -> ELSE statement .)
    SEMICOLON       reduce using rule 71 (else_part -> ELSE statement .)
    UNTIL           reduce using rule 71 (else_part -> ELSE statement .)
=======
    (42) range -> INTEGER_CONST DOTDOT . INTEGER_CONST

    INTEGER_CONST   shift and go to state 210
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 203

<<<<<<< HEAD
    (75) for_statement -> FOR ID ASSIGN expression TO expression . DO statement
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    DO              shift and go to state 206
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134
=======
    (43) field_list -> field_list field_decl SEMICOLON .

    END             reduce using rule 43 (field_list -> field_list field_decl SEMICOLON .)
    ID              reduce using rule 43 (field_list -> field_list field_decl SEMICOLON .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 204

<<<<<<< HEAD
    (76) for_statement -> FOR ID ASSIGN expression DOWNTO expression . DO statement
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    DO              shift and go to state 207
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134
=======
    (45) field_decl -> id_list COLON type .

    SEMICOLON       reduce using rule 45 (field_decl -> id_list COLON type .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d


state 205

<<<<<<< HEAD
    (36) array_type -> ARRAY LBRACKET index_type RBRACKET OF . type
    (30) type -> . simple_type
    (31) type -> . array_type
    (32) type -> . record_type
    (33) simple_type -> . subrange_type
    (34) simple_type -> . type_identifier
    (36) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (38) record_type -> . RECORD record_fields END
    (35) subrange_type -> . constant DOTDOT constant
    (43) type_identifier -> . ID
    (44) type_identifier -> . predefined_type
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (45) predefined_type -> . INTEGER
    (46) predefined_type -> . REAL
    (47) predefined_type -> . BOOLEAN
    (48) predefined_type -> . STRING
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    ARRAY           shift and go to state 87
    RECORD          shift and go to state 88
    ID              shift and go to state 90
    STRING_LITERAL  shift and go to state 94
    INTEGER         shift and go to state 96
    REAL            shift and go to state 97
    BOOLEAN         shift and go to state 98
    STRING          shift and go to state 99
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103

    type                           shift and go to state 208
    simple_type                    shift and go to state 82
    array_type                     shift and go to state 83
    record_type                    shift and go to state 84
    subrange_type                  shift and go to state 85
    type_identifier                shift and go to state 86
    constant                       shift and go to state 89
    predefined_type                shift and go to state 91
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 206

    (75) for_statement -> FOR ID ASSIGN expression TO expression DO . statement
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    ELSE            reduce using rule 113 (empty -> .)
    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    UNTIL           reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52

    statement                      shift and go to state 209
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 207

    (76) for_statement -> FOR ID ASSIGN expression DOWNTO expression DO . statement
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    ELSE            reduce using rule 113 (empty -> .)
    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    UNTIL           reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52

    statement                      shift and go to state 210
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 208

    (36) array_type -> ARRAY LBRACKET index_type RBRACKET OF type .

    SEMICOLON       reduce using rule 36 (array_type -> ARRAY LBRACKET index_type RBRACKET OF type .)
    RPAREN          reduce using rule 36 (array_type -> ARRAY LBRACKET index_type RBRACKET OF type .)


state 209

    (75) for_statement -> FOR ID ASSIGN expression TO expression DO statement .

    END             reduce using rule 75 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    SEMICOLON       reduce using rule 75 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    UNTIL           reduce using rule 75 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 75 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)


state 210

    (76) for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .

    END             reduce using rule 76 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    SEMICOLON       reduce using rule 76 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    UNTIL           reduce using rule 76 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 76 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
=======
    (29) procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 211


state 206

    (30) function_declaration -> FUNCTION ID COLON type SEMICOLON block SEMICOLON .

    BEGIN           reduce using rule 30 (function_declaration -> FUNCTION ID COLON type SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 30 (function_declaration -> FUNCTION ID COLON type SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 30 (function_declaration -> FUNCTION ID COLON type SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 30 (function_declaration -> FUNCTION ID COLON type SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 30 (function_declaration -> FUNCTION ID COLON type SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 30 (function_declaration -> FUNCTION ID COLON type SEMICOLON block SEMICOLON .)
    USES            reduce using rule 30 (function_declaration -> FUNCTION ID COLON type SEMICOLON block SEMICOLON .)


state 207

    (31) function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 212


state 208

    (73) for_statement -> FOR ID ASSIGN expression direction expression DO . statement
    (48) statement -> . assignment_statement
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . variable ASSIGN expression SEMICOLON
    (62) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (63) procedure_call -> . ID SEMICOLON
    (67) compound_statement -> . BEGIN statement_list END
    (68) if_statement -> . IF expression THEN statement else_part
    (71) while_statement -> . WHILE expression DO statement
    (72) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (73) for_statement -> . FOR ID ASSIGN expression direction expression DO statement
    (114) empty -> .
    (57) variable -> . ID
    (58) variable -> . ID LBRACKET expression_list RBRACKET
    (59) variable -> . ID DOT ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ID              shift and go to state 35
    BEGIN           shift and go to state 23
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    REPEAT          shift and go to state 38
    FOR             shift and go to state 39
    ELSE            reduce using rule 114 (empty -> .)
    END             reduce using rule 114 (empty -> .)
    UNTIL           reduce using rule 114 (empty -> .)

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! BEGIN           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! REPEAT          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]

    statement                      shift and go to state 213
    assignment_statement           shift and go to state 26
    procedure_call                 shift and go to state 27
    compound_statement             shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    repeat_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    empty                          shift and go to state 33
    variable                       shift and go to state 34

state 209

    (40) type -> ARRAY LBRACKET range RBRACKET OF . type
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . BOOLEAN
    (38) type -> . STRING
    (39) type -> . ID
    (40) type -> . ARRAY LBRACKET range RBRACKET OF type
    (41) type -> . RECORD field_list END

    INTEGER         shift and go to state 131
    REAL            shift and go to state 132
    BOOLEAN         shift and go to state 133
    STRING          shift and go to state 134
    ID              shift and go to state 135
    ARRAY           shift and go to state 136
    RECORD          shift and go to state 137

    type                           shift and go to state 214

state 210

    (42) range -> INTEGER_CONST DOTDOT INTEGER_CONST .

    RBRACKET        reduce using rule 42 (range -> INTEGER_CONST DOTDOT INTEGER_CONST .)


state 211

    (29) procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block SEMICOLON .

    BEGIN           reduce using rule 29 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 29 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 29 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 29 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 29 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 29 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block SEMICOLON .)
    USES            reduce using rule 29 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block SEMICOLON .)


state 212

    (31) function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMICOLON . block SEMICOLON
    (2) block -> . declarations BEGIN statement_list END
    (3) declarations -> . declarations declaration
    (4) declarations -> . empty
    (114) empty -> .

    BEGIN           reduce using rule 114 (empty -> .)
    VAR             reduce using rule 114 (empty -> .)
    CONST           reduce using rule 114 (empty -> .)
    TYPE            reduce using rule 114 (empty -> .)
    PROCEDURE       reduce using rule 114 (empty -> .)
    FUNCTION        reduce using rule 114 (empty -> .)
    USES            reduce using rule 114 (empty -> .)

    block                          shift and go to state 215
    declarations                   shift and go to state 6
    empty                          shift and go to state 7

state 213

    (73) for_statement -> FOR ID ASSIGN expression direction expression DO statement .

    END             reduce using rule 73 (for_statement -> FOR ID ASSIGN expression direction expression DO statement .)
    ID              reduce using rule 73 (for_statement -> FOR ID ASSIGN expression direction expression DO statement .)
    BEGIN           reduce using rule 73 (for_statement -> FOR ID ASSIGN expression direction expression DO statement .)
    IF              reduce using rule 73 (for_statement -> FOR ID ASSIGN expression direction expression DO statement .)
    WHILE           reduce using rule 73 (for_statement -> FOR ID ASSIGN expression direction expression DO statement .)
    REPEAT          reduce using rule 73 (for_statement -> FOR ID ASSIGN expression direction expression DO statement .)
    FOR             reduce using rule 73 (for_statement -> FOR ID ASSIGN expression direction expression DO statement .)
    UNTIL           reduce using rule 73 (for_statement -> FOR ID ASSIGN expression direction expression DO statement .)
    ELSE            reduce using rule 73 (for_statement -> FOR ID ASSIGN expression direction expression DO statement .)


state 214

    (40) type -> ARRAY LBRACKET range RBRACKET OF type .

    SEMICOLON       reduce using rule 40 (type -> ARRAY LBRACKET range RBRACKET OF type .)
    RPAREN          reduce using rule 40 (type -> ARRAY LBRACKET range RBRACKET OF type .)


state 215

    (31) function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 216


state 216

    (31) function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLON .

    BEGIN           reduce using rule 31 (function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 31 (function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 31 (function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 31 (function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 31 (function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 31 (function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLON .)
    USES            reduce using rule 31 (function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLON .)
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d

WARNING: 
WARNING: Conflicts:
WARNING: 
<<<<<<< HEAD
WARNING: shift/reduce conflict for DOT in state 52 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 157 resolved as shift
=======
WARNING: shift/reduce conflict for ID in state 9 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 9 resolved as shift
WARNING: shift/reduce conflict for IF in state 9 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 9 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 9 resolved as shift
WARNING: shift/reduce conflict for FOR in state 9 resolved as shift
WARNING: shift/reduce conflict for ID in state 23 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 23 resolved as shift
WARNING: shift/reduce conflict for IF in state 23 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 23 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 23 resolved as shift
WARNING: shift/reduce conflict for FOR in state 23 resolved as shift
WARNING: shift/reduce conflict for END in state 24 resolved as shift
WARNING: shift/reduce conflict for ID in state 24 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 24 resolved as shift
WARNING: shift/reduce conflict for IF in state 24 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 24 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 24 resolved as shift
WARNING: shift/reduce conflict for FOR in state 24 resolved as shift
WARNING: shift/reduce conflict for ID in state 38 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 38 resolved as shift
WARNING: shift/reduce conflict for IF in state 38 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 38 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 38 resolved as shift
WARNING: shift/reduce conflict for FOR in state 38 resolved as shift
WARNING: shift/reduce conflict for END in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 54 resolved as shift
WARNING: shift/reduce conflict for IF in state 54 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 54 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 54 resolved as shift
WARNING: shift/reduce conflict for FOR in state 54 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 75 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 75 resolved as shift
WARNING: shift/reduce conflict for IF in state 75 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 75 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 75 resolved as shift
WARNING: shift/reduce conflict for FOR in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 98 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 98 resolved as shift
WARNING: shift/reduce conflict for IF in state 98 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 98 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 98 resolved as shift
WARNING: shift/reduce conflict for FOR in state 98 resolved as shift
WARNING: shift/reduce conflict for ID in state 127 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 127 resolved as shift
WARNING: shift/reduce conflict for IF in state 127 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 127 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 127 resolved as shift
WARNING: shift/reduce conflict for FOR in state 127 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 157 resolved as shift
WARNING: shift/reduce conflict for ID in state 182 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 182 resolved as shift
WARNING: shift/reduce conflict for IF in state 182 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 182 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 182 resolved as shift
WARNING: shift/reduce conflict for FOR in state 182 resolved as shift
WARNING: shift/reduce conflict for ID in state 208 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 208 resolved as shift
WARNING: shift/reduce conflict for IF in state 208 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 208 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 208 resolved as shift
WARNING: shift/reduce conflict for FOR in state 208 resolved as shift
>>>>>>> 14556444e3c4ee12d7c495af0295ceffdc1eaa8d
