Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSOLUTE
    ASM
    CASE
    CONSTRUCTOR
    DESTRUCTOR
    DIV
    EXTERNAL
    FILE
    FORWARD
    FUNCTION
    GOTO
    IMPLEMENTATION
    IN
    INLINE
    INTERFACE
    INTERRUPT
    LABEL
    MOD
    NIL
    OBJECT
    OFF
    PACKED
    PRIVATE
    SET
    SHL
    SHR
    UNIT
    USES
    VIRTUAL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON block DOT
Rule 2     block -> declarations compound_statement
Rule 3     declarations -> declaration_list
Rule 4     declarations -> empty
Rule 5     declaration_list -> declaration_list declaration
Rule 6     declaration_list -> declaration
Rule 7     declaration -> var_declaration
Rule 8     declaration -> const_declaration
Rule 9     declaration -> type_declaration
Rule 10    declaration -> procedure_declaration
Rule 11    var_declaration -> VAR var_declaration_list
Rule 12    var_declaration_list -> var_declaration_list var_decl
Rule 13    var_declaration_list -> var_decl
Rule 14    var_decl -> id_list COLON type SEMICOLON
Rule 15    id_list -> id_list COMMA ID
Rule 16    id_list -> ID
Rule 17    const_declaration -> CONST const_list
Rule 18    const_list -> const_list const_definition SEMICOLON
Rule 19    const_list -> const_definition SEMICOLON
Rule 20    const_definition -> ID EQUAL constant
Rule 21    procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block
Rule 22    param_list -> param_list SEMICOLON param
Rule 23    param_list -> param
Rule 24    param_list -> empty
Rule 25    param -> ID COLON type
Rule 26    type_declaration -> TYPE type_list
Rule 27    type_list -> type_list type_definition SEMICOLON
Rule 28    type_list -> type_definition SEMICOLON
Rule 29    type_definition -> ID EQUAL type
Rule 30    type -> simple_type
Rule 31    type -> array_type
Rule 32    type -> record_type
Rule 33    simple_type -> subrange_type
Rule 34    simple_type -> type_identifier
Rule 35    subrange_type -> constant DOTDOT constant
Rule 36    array_type -> ARRAY LBRACKET index_type RBRACKET OF type
Rule 37    index_type -> simple_type
Rule 38    record_type -> RECORD record_fields END
Rule 39    record_fields -> field_list
Rule 40    field_list -> field_list field_declaration SEMICOLON
Rule 41    field_list -> field_declaration SEMICOLON
Rule 42    field_declaration -> id_list COLON type
Rule 43    type_identifier -> ID
Rule 44    type_identifier -> predefined_type
Rule 45    predefined_type -> INTEGER
Rule 46    predefined_type -> REAL
Rule 47    predefined_type -> BOOLEAN
Rule 48    predefined_type -> STRING
Rule 49    compound_statement -> BEGIN statement_list END
Rule 50    statement_list -> statement
Rule 51    statement_list -> statement_list SEMICOLON statement
Rule 52    statement -> simple_statement
Rule 53    statement -> structured_statement
Rule 54    simple_statement -> assignment_statement
Rule 55    simple_statement -> procedure_call_statement
Rule 56    simple_statement -> empty
Rule 57    structured_statement -> compound_statement
Rule 58    structured_statement -> if_statement
Rule 59    structured_statement -> while_statement
Rule 60    structured_statement -> repeat_statement
Rule 61    structured_statement -> for_statement
Rule 62    structured_statement -> record_assignment
Rule 63    assignment_statement -> variable ASSIGN expression
Rule 64    variable -> ID
Rule 65    variable -> variable DOT ID
Rule 66    variable -> variable LBRACKET expression_list RBRACKET
Rule 67    expression_list -> expression
Rule 68    expression_list -> expression_list COMMA expression
Rule 69    record_assignment -> ID DOT ID ASSIGN expression
Rule 70    if_statement -> IF expression THEN statement else_part
Rule 71    else_part -> ELSE statement
Rule 72    else_part -> empty
Rule 73    while_statement -> WHILE expression DO statement
Rule 74    repeat_statement -> REPEAT statement_list UNTIL expression
Rule 75    for_statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 76    for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement
Rule 77    procedure_call_statement -> procedure_call
Rule 78    procedure_call -> ID LPAREN args RPAREN
Rule 79    procedure_call -> ID
Rule 80    args -> args COMMA expression
Rule 81    args -> expression
Rule 82    args -> empty
Rule 83    expression -> expression PLUS expression
Rule 84    expression -> expression MINUS expression
Rule 85    expression -> expression TIMES expression
Rule 86    expression -> expression DIVIDE expression
Rule 87    expression -> expression DIVIDE_INT expression
Rule 88    expression -> expression MODULO expression
Rule 89    expression -> expression EQUAL expression
Rule 90    expression -> expression NEQUAL expression
Rule 91    expression -> expression LT expression
Rule 92    expression -> expression GT expression
Rule 93    expression -> expression LE expression
Rule 94    expression -> expression GE expression
Rule 95    expression -> expression AND expression
Rule 96    expression -> expression OR expression
Rule 97    expression -> expression XOR expression
Rule 98    expression -> NOT expression
Rule 99    expression -> LPAREN expression RPAREN
Rule 100   expression -> variable
Rule 101   expression -> INTEGER_CONST
Rule 102   expression -> REAL_CONST
Rule 103   expression -> STRING_LITERAL
Rule 104   constant -> UNSIGNED_NUMBER
Rule 105   constant -> sign UNSIGNED_NUMBER
Rule 106   constant -> STRING_LITERAL
Rule 107   constant -> constant_identifier
Rule 108   UNSIGNED_NUMBER -> INTEGER_CONST
Rule 109   UNSIGNED_NUMBER -> REAL_CONST
Rule 110   sign -> PLUS
Rule 111   sign -> MINUS
Rule 112   constant_identifier -> ID
Rule 113   empty -> <empty>

Terminals, with rules where they appear

ABSOLUTE             : 
AND                  : 95
ARRAY                : 36
ASM                  : 
ASSIGN               : 63 69 75 76
BEGIN                : 49
BOOLEAN              : 47
CASE                 : 
COLON                : 14 25 42
COMMA                : 15 68 80
CONST                : 17
CONSTRUCTOR          : 
DESTRUCTOR           : 
DIV                  : 
DIVIDE               : 86
DIVIDE_INT           : 87
DO                   : 73 75 76
DOT                  : 1 65 69
DOTDOT               : 35
DOWNTO               : 76
ELSE                 : 71
END                  : 38 49
EQUAL                : 20 29 89
EXTERNAL             : 
FILE                 : 
FOR                  : 75 76
FORWARD              : 
FUNCTION             : 
GE                   : 94
GOTO                 : 
GT                   : 92
ID                   : 1 15 16 20 21 25 29 43 64 65 69 69 75 76 78 79 112
IF                   : 70
IMPLEMENTATION       : 
IN                   : 
INLINE               : 
INTEGER              : 45
INTEGER_CONST        : 101 108
INTERFACE            : 
INTERRUPT            : 
LABEL                : 
LBRACKET             : 36 66
LE                   : 93
LPAREN               : 21 78 99
LT                   : 91
MINUS                : 84 111
MOD                  : 
MODULO               : 88
NEQUAL               : 90
NIL                  : 
NOT                  : 98
OBJECT               : 
OF                   : 36
OFF                  : 
OR                   : 96
PACKED               : 
PLUS                 : 83 110
PRIVATE              : 
PROCEDURE            : 21
PROGRAM              : 1
RBRACKET             : 36 66
REAL                 : 46
REAL_CONST           : 102 109
RECORD               : 38
REPEAT               : 74
RPAREN               : 21 78 99
SEMICOLON            : 1 14 18 19 21 22 27 28 40 41 51
SET                  : 
SHL                  : 
SHR                  : 
STRING               : 48
STRING_LITERAL       : 103 106
THEN                 : 70
TIMES                : 85
TO                   : 75
TYPE                 : 26
UNIT                 : 
UNTIL                : 74
USES                 : 
VAR                  : 11
VIRTUAL              : 
WHILE                : 73
WITH                 : 
XOR                  : 97
error                : 

Nonterminals, with rules where they appear

UNSIGNED_NUMBER      : 104 105
args                 : 78 80
array_type           : 31
assignment_statement : 54
block                : 1 21
compound_statement   : 2 57
const_declaration    : 8
const_definition     : 18 19
const_list           : 17 18
constant             : 20 35 35
constant_identifier  : 107
declaration          : 5 6
declaration_list     : 3 5
declarations         : 2
else_part            : 70
empty                : 4 24 56 72 82
expression           : 63 67 68 69 70 73 74 75 75 76 76 80 81 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 99
expression_list      : 66 68
field_declaration    : 40 41
field_list           : 39 40
for_statement        : 61
id_list              : 14 15 42
if_statement         : 58
index_type           : 36
param                : 22 23
param_list           : 21 22
predefined_type      : 44
procedure_call       : 77
procedure_call_statement : 55
procedure_declaration : 10
program              : 0
record_assignment    : 62
record_fields        : 38
record_type          : 32
repeat_statement     : 60
sign                 : 105
simple_statement     : 52
simple_type          : 30 37
statement            : 50 51 70 71 73 75 76
statement_list       : 49 51 74
structured_statement : 53
subrange_type        : 33
type                 : 14 25 29 36 42
type_declaration     : 9
type_definition      : 27 28
type_identifier      : 34
type_list            : 26 27
var_decl             : 12 13
var_declaration      : 7
var_declaration_list : 11 12
variable             : 63 65 66 100
while_statement      : 59

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . block DOT
    (2) block -> . declarations compound_statement
    (3) declarations -> . declaration_list
    (4) declarations -> . empty
    (5) declaration_list -> . declaration_list declaration
    (6) declaration_list -> . declaration
    (113) empty -> .
    (7) declaration -> . var_declaration
    (8) declaration -> . const_declaration
    (9) declaration -> . type_declaration
    (10) declaration -> . procedure_declaration
    (11) var_declaration -> . VAR var_declaration_list
    (17) const_declaration -> . CONST const_list
    (26) type_declaration -> . TYPE type_list
    (21) procedure_declaration -> . PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block

    BEGIN           reduce using rule 113 (empty -> .)
    VAR             shift and go to state 14
    CONST           shift and go to state 15
    TYPE            shift and go to state 16
    PROCEDURE       shift and go to state 17

    block                          shift and go to state 5
    declarations                   shift and go to state 6
    declaration_list               shift and go to state 7
    empty                          shift and go to state 8
    declaration                    shift and go to state 9
    var_declaration                shift and go to state 10
    const_declaration              shift and go to state 11
    type_declaration               shift and go to state 12
    procedure_declaration          shift and go to state 13

state 5

    (1) program -> PROGRAM ID SEMICOLON block . DOT

    DOT             shift and go to state 18


state 6

    (2) block -> declarations . compound_statement
    (49) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 20

    compound_statement             shift and go to state 19

state 7

    (3) declarations -> declaration_list .
    (5) declaration_list -> declaration_list . declaration
    (7) declaration -> . var_declaration
    (8) declaration -> . const_declaration
    (9) declaration -> . type_declaration
    (10) declaration -> . procedure_declaration
    (11) var_declaration -> . VAR var_declaration_list
    (17) const_declaration -> . CONST const_list
    (26) type_declaration -> . TYPE type_list
    (21) procedure_declaration -> . PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block

    BEGIN           reduce using rule 3 (declarations -> declaration_list .)
    VAR             shift and go to state 14
    CONST           shift and go to state 15
    TYPE            shift and go to state 16
    PROCEDURE       shift and go to state 17

    declaration                    shift and go to state 21
    var_declaration                shift and go to state 10
    const_declaration              shift and go to state 11
    type_declaration               shift and go to state 12
    procedure_declaration          shift and go to state 13

state 8

    (4) declarations -> empty .

    BEGIN           reduce using rule 4 (declarations -> empty .)


state 9

    (6) declaration_list -> declaration .

    VAR             reduce using rule 6 (declaration_list -> declaration .)
    CONST           reduce using rule 6 (declaration_list -> declaration .)
    TYPE            reduce using rule 6 (declaration_list -> declaration .)
    PROCEDURE       reduce using rule 6 (declaration_list -> declaration .)
    BEGIN           reduce using rule 6 (declaration_list -> declaration .)


state 10

    (7) declaration -> var_declaration .

    VAR             reduce using rule 7 (declaration -> var_declaration .)
    CONST           reduce using rule 7 (declaration -> var_declaration .)
    TYPE            reduce using rule 7 (declaration -> var_declaration .)
    PROCEDURE       reduce using rule 7 (declaration -> var_declaration .)
    BEGIN           reduce using rule 7 (declaration -> var_declaration .)


state 11

    (8) declaration -> const_declaration .

    VAR             reduce using rule 8 (declaration -> const_declaration .)
    CONST           reduce using rule 8 (declaration -> const_declaration .)
    TYPE            reduce using rule 8 (declaration -> const_declaration .)
    PROCEDURE       reduce using rule 8 (declaration -> const_declaration .)
    BEGIN           reduce using rule 8 (declaration -> const_declaration .)


state 12

    (9) declaration -> type_declaration .

    VAR             reduce using rule 9 (declaration -> type_declaration .)
    CONST           reduce using rule 9 (declaration -> type_declaration .)
    TYPE            reduce using rule 9 (declaration -> type_declaration .)
    PROCEDURE       reduce using rule 9 (declaration -> type_declaration .)
    BEGIN           reduce using rule 9 (declaration -> type_declaration .)


state 13

    (10) declaration -> procedure_declaration .

    VAR             reduce using rule 10 (declaration -> procedure_declaration .)
    CONST           reduce using rule 10 (declaration -> procedure_declaration .)
    TYPE            reduce using rule 10 (declaration -> procedure_declaration .)
    PROCEDURE       reduce using rule 10 (declaration -> procedure_declaration .)
    BEGIN           reduce using rule 10 (declaration -> procedure_declaration .)


state 14

    (11) var_declaration -> VAR . var_declaration_list
    (12) var_declaration_list -> . var_declaration_list var_decl
    (13) var_declaration_list -> . var_decl
    (14) var_decl -> . id_list COLON type SEMICOLON
    (15) id_list -> . id_list COMMA ID
    (16) id_list -> . ID

    ID              shift and go to state 25

    var_declaration_list           shift and go to state 22
    var_decl                       shift and go to state 23
    id_list                        shift and go to state 24

state 15

    (17) const_declaration -> CONST . const_list
    (18) const_list -> . const_list const_definition SEMICOLON
    (19) const_list -> . const_definition SEMICOLON
    (20) const_definition -> . ID EQUAL constant

    ID              shift and go to state 28

    const_list                     shift and go to state 26
    const_definition               shift and go to state 27

state 16

    (26) type_declaration -> TYPE . type_list
    (27) type_list -> . type_list type_definition SEMICOLON
    (28) type_list -> . type_definition SEMICOLON
    (29) type_definition -> . ID EQUAL type

    ID              shift and go to state 31

    type_list                      shift and go to state 29
    type_definition                shift and go to state 30

state 17

    (21) procedure_declaration -> PROCEDURE . ID LPAREN param_list RPAREN SEMICOLON block

    ID              shift and go to state 32


state 18

    (1) program -> PROGRAM ID SEMICOLON block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON block DOT .)


state 19

    (2) block -> declarations compound_statement .

    DOT             reduce using rule 2 (block -> declarations compound_statement .)
    VAR             reduce using rule 2 (block -> declarations compound_statement .)
    CONST           reduce using rule 2 (block -> declarations compound_statement .)
    TYPE            reduce using rule 2 (block -> declarations compound_statement .)
    PROCEDURE       reduce using rule 2 (block -> declarations compound_statement .)
    BEGIN           reduce using rule 2 (block -> declarations compound_statement .)


state 20

    (49) compound_statement -> BEGIN . statement_list END
    (50) statement_list -> . statement
    (51) statement_list -> . statement_list SEMICOLON statement
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52

    statement_list                 shift and go to state 33
    statement                      shift and go to state 34
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 21

    (5) declaration_list -> declaration_list declaration .

    VAR             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    TYPE            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    PROCEDURE       reduce using rule 5 (declaration_list -> declaration_list declaration .)
    BEGIN           reduce using rule 5 (declaration_list -> declaration_list declaration .)


state 22

    (11) var_declaration -> VAR var_declaration_list .
    (12) var_declaration_list -> var_declaration_list . var_decl
    (14) var_decl -> . id_list COLON type SEMICOLON
    (15) id_list -> . id_list COMMA ID
    (16) id_list -> . ID

    VAR             reduce using rule 11 (var_declaration -> VAR var_declaration_list .)
    CONST           reduce using rule 11 (var_declaration -> VAR var_declaration_list .)
    TYPE            reduce using rule 11 (var_declaration -> VAR var_declaration_list .)
    PROCEDURE       reduce using rule 11 (var_declaration -> VAR var_declaration_list .)
    BEGIN           reduce using rule 11 (var_declaration -> VAR var_declaration_list .)
    ID              shift and go to state 25

    var_decl                       shift and go to state 53
    id_list                        shift and go to state 24

state 23

    (13) var_declaration_list -> var_decl .

    ID              reduce using rule 13 (var_declaration_list -> var_decl .)
    VAR             reduce using rule 13 (var_declaration_list -> var_decl .)
    CONST           reduce using rule 13 (var_declaration_list -> var_decl .)
    TYPE            reduce using rule 13 (var_declaration_list -> var_decl .)
    PROCEDURE       reduce using rule 13 (var_declaration_list -> var_decl .)
    BEGIN           reduce using rule 13 (var_declaration_list -> var_decl .)


state 24

    (14) var_decl -> id_list . COLON type SEMICOLON
    (15) id_list -> id_list . COMMA ID

    COLON           shift and go to state 54
    COMMA           shift and go to state 55


state 25

    (16) id_list -> ID .

    COLON           reduce using rule 16 (id_list -> ID .)
    COMMA           reduce using rule 16 (id_list -> ID .)


state 26

    (17) const_declaration -> CONST const_list .
    (18) const_list -> const_list . const_definition SEMICOLON
    (20) const_definition -> . ID EQUAL constant

    VAR             reduce using rule 17 (const_declaration -> CONST const_list .)
    CONST           reduce using rule 17 (const_declaration -> CONST const_list .)
    TYPE            reduce using rule 17 (const_declaration -> CONST const_list .)
    PROCEDURE       reduce using rule 17 (const_declaration -> CONST const_list .)
    BEGIN           reduce using rule 17 (const_declaration -> CONST const_list .)
    ID              shift and go to state 28

    const_definition               shift and go to state 56

state 27

    (19) const_list -> const_definition . SEMICOLON

    SEMICOLON       shift and go to state 57


state 28

    (20) const_definition -> ID . EQUAL constant

    EQUAL           shift and go to state 58


state 29

    (26) type_declaration -> TYPE type_list .
    (27) type_list -> type_list . type_definition SEMICOLON
    (29) type_definition -> . ID EQUAL type

    VAR             reduce using rule 26 (type_declaration -> TYPE type_list .)
    CONST           reduce using rule 26 (type_declaration -> TYPE type_list .)
    TYPE            reduce using rule 26 (type_declaration -> TYPE type_list .)
    PROCEDURE       reduce using rule 26 (type_declaration -> TYPE type_list .)
    BEGIN           reduce using rule 26 (type_declaration -> TYPE type_list .)
    ID              shift and go to state 31

    type_definition                shift and go to state 59

state 30

    (28) type_list -> type_definition . SEMICOLON

    SEMICOLON       shift and go to state 60


state 31

    (29) type_definition -> ID . EQUAL type

    EQUAL           shift and go to state 61


state 32

    (21) procedure_declaration -> PROCEDURE ID . LPAREN param_list RPAREN SEMICOLON block

    LPAREN          shift and go to state 62


state 33

    (49) compound_statement -> BEGIN statement_list . END
    (51) statement_list -> statement_list . SEMICOLON statement

    END             shift and go to state 63
    SEMICOLON       shift and go to state 64


state 34

    (50) statement_list -> statement .

    END             reduce using rule 50 (statement_list -> statement .)
    SEMICOLON       reduce using rule 50 (statement_list -> statement .)
    UNTIL           reduce using rule 50 (statement_list -> statement .)


state 35

    (52) statement -> simple_statement .

    END             reduce using rule 52 (statement -> simple_statement .)
    SEMICOLON       reduce using rule 52 (statement -> simple_statement .)
    UNTIL           reduce using rule 52 (statement -> simple_statement .)
    ELSE            reduce using rule 52 (statement -> simple_statement .)


state 36

    (53) statement -> structured_statement .

    END             reduce using rule 53 (statement -> structured_statement .)
    SEMICOLON       reduce using rule 53 (statement -> structured_statement .)
    UNTIL           reduce using rule 53 (statement -> structured_statement .)
    ELSE            reduce using rule 53 (statement -> structured_statement .)


state 37

    (54) simple_statement -> assignment_statement .

    END             reduce using rule 54 (simple_statement -> assignment_statement .)
    SEMICOLON       reduce using rule 54 (simple_statement -> assignment_statement .)
    UNTIL           reduce using rule 54 (simple_statement -> assignment_statement .)
    ELSE            reduce using rule 54 (simple_statement -> assignment_statement .)


state 38

    (55) simple_statement -> procedure_call_statement .

    END             reduce using rule 55 (simple_statement -> procedure_call_statement .)
    SEMICOLON       reduce using rule 55 (simple_statement -> procedure_call_statement .)
    UNTIL           reduce using rule 55 (simple_statement -> procedure_call_statement .)
    ELSE            reduce using rule 55 (simple_statement -> procedure_call_statement .)


state 39

    (56) simple_statement -> empty .

    END             reduce using rule 56 (simple_statement -> empty .)
    SEMICOLON       reduce using rule 56 (simple_statement -> empty .)
    UNTIL           reduce using rule 56 (simple_statement -> empty .)
    ELSE            reduce using rule 56 (simple_statement -> empty .)


state 40

    (57) structured_statement -> compound_statement .

    END             reduce using rule 57 (structured_statement -> compound_statement .)
    SEMICOLON       reduce using rule 57 (structured_statement -> compound_statement .)
    UNTIL           reduce using rule 57 (structured_statement -> compound_statement .)
    ELSE            reduce using rule 57 (structured_statement -> compound_statement .)


state 41

    (58) structured_statement -> if_statement .

    END             reduce using rule 58 (structured_statement -> if_statement .)
    SEMICOLON       reduce using rule 58 (structured_statement -> if_statement .)
    UNTIL           reduce using rule 58 (structured_statement -> if_statement .)
    ELSE            reduce using rule 58 (structured_statement -> if_statement .)


state 42

    (59) structured_statement -> while_statement .

    END             reduce using rule 59 (structured_statement -> while_statement .)
    SEMICOLON       reduce using rule 59 (structured_statement -> while_statement .)
    UNTIL           reduce using rule 59 (structured_statement -> while_statement .)
    ELSE            reduce using rule 59 (structured_statement -> while_statement .)


state 43

    (60) structured_statement -> repeat_statement .

    END             reduce using rule 60 (structured_statement -> repeat_statement .)
    SEMICOLON       reduce using rule 60 (structured_statement -> repeat_statement .)
    UNTIL           reduce using rule 60 (structured_statement -> repeat_statement .)
    ELSE            reduce using rule 60 (structured_statement -> repeat_statement .)


state 44

    (61) structured_statement -> for_statement .

    END             reduce using rule 61 (structured_statement -> for_statement .)
    SEMICOLON       reduce using rule 61 (structured_statement -> for_statement .)
    UNTIL           reduce using rule 61 (structured_statement -> for_statement .)
    ELSE            reduce using rule 61 (structured_statement -> for_statement .)


state 45

    (62) structured_statement -> record_assignment .

    END             reduce using rule 62 (structured_statement -> record_assignment .)
    SEMICOLON       reduce using rule 62 (structured_statement -> record_assignment .)
    UNTIL           reduce using rule 62 (structured_statement -> record_assignment .)
    ELSE            reduce using rule 62 (structured_statement -> record_assignment .)


state 46

    (63) assignment_statement -> variable . ASSIGN expression
    (65) variable -> variable . DOT ID
    (66) variable -> variable . LBRACKET expression_list RBRACKET

    ASSIGN          shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67


state 47

    (77) procedure_call_statement -> procedure_call .

    END             reduce using rule 77 (procedure_call_statement -> procedure_call .)
    SEMICOLON       reduce using rule 77 (procedure_call_statement -> procedure_call .)
    UNTIL           reduce using rule 77 (procedure_call_statement -> procedure_call .)
    ELSE            reduce using rule 77 (procedure_call_statement -> procedure_call .)


state 48

    (70) if_statement -> IF . expression THEN statement else_part
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 68
    variable                       shift and go to state 71

state 49

    (73) while_statement -> WHILE . expression DO statement
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 76
    variable                       shift and go to state 71

state 50

    (74) repeat_statement -> REPEAT . statement_list UNTIL expression
    (50) statement_list -> . statement
    (51) statement_list -> . statement_list SEMICOLON statement
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    UNTIL           reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52

    statement_list                 shift and go to state 77
    statement                      shift and go to state 34
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 51

    (75) for_statement -> FOR . ID ASSIGN expression TO expression DO statement
    (76) for_statement -> FOR . ID ASSIGN expression DOWNTO expression DO statement

    ID              shift and go to state 78


state 52

    (69) record_assignment -> ID . DOT ID ASSIGN expression
    (64) variable -> ID .
    (78) procedure_call -> ID . LPAREN args RPAREN
    (79) procedure_call -> ID .

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 79
    ASSIGN          reduce using rule 64 (variable -> ID .)
    LBRACKET        reduce using rule 64 (variable -> ID .)
    LPAREN          shift and go to state 80
    END             reduce using rule 79 (procedure_call -> ID .)
    SEMICOLON       reduce using rule 79 (procedure_call -> ID .)
    UNTIL           reduce using rule 79 (procedure_call -> ID .)
    ELSE            reduce using rule 79 (procedure_call -> ID .)

  ! DOT             [ reduce using rule 64 (variable -> ID .) ]


state 53

    (12) var_declaration_list -> var_declaration_list var_decl .

    ID              reduce using rule 12 (var_declaration_list -> var_declaration_list var_decl .)
    VAR             reduce using rule 12 (var_declaration_list -> var_declaration_list var_decl .)
    CONST           reduce using rule 12 (var_declaration_list -> var_declaration_list var_decl .)
    TYPE            reduce using rule 12 (var_declaration_list -> var_declaration_list var_decl .)
    PROCEDURE       reduce using rule 12 (var_declaration_list -> var_declaration_list var_decl .)
    BEGIN           reduce using rule 12 (var_declaration_list -> var_declaration_list var_decl .)


state 54

    (14) var_decl -> id_list COLON . type SEMICOLON
    (30) type -> . simple_type
    (31) type -> . array_type
    (32) type -> . record_type
    (33) simple_type -> . subrange_type
    (34) simple_type -> . type_identifier
    (36) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (38) record_type -> . RECORD record_fields END
    (35) subrange_type -> . constant DOTDOT constant
    (43) type_identifier -> . ID
    (44) type_identifier -> . predefined_type
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (45) predefined_type -> . INTEGER
    (46) predefined_type -> . REAL
    (47) predefined_type -> . BOOLEAN
    (48) predefined_type -> . STRING
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    ARRAY           shift and go to state 87
    RECORD          shift and go to state 88
    ID              shift and go to state 90
    STRING_LITERAL  shift and go to state 94
    INTEGER         shift and go to state 96
    REAL            shift and go to state 97
    BOOLEAN         shift and go to state 98
    STRING          shift and go to state 99
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103

    type                           shift and go to state 81
    simple_type                    shift and go to state 82
    array_type                     shift and go to state 83
    record_type                    shift and go to state 84
    subrange_type                  shift and go to state 85
    type_identifier                shift and go to state 86
    constant                       shift and go to state 89
    predefined_type                shift and go to state 91
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 55

    (15) id_list -> id_list COMMA . ID

    ID              shift and go to state 104


state 56

    (18) const_list -> const_list const_definition . SEMICOLON

    SEMICOLON       shift and go to state 105


state 57

    (19) const_list -> const_definition SEMICOLON .

    ID              reduce using rule 19 (const_list -> const_definition SEMICOLON .)
    VAR             reduce using rule 19 (const_list -> const_definition SEMICOLON .)
    CONST           reduce using rule 19 (const_list -> const_definition SEMICOLON .)
    TYPE            reduce using rule 19 (const_list -> const_definition SEMICOLON .)
    PROCEDURE       reduce using rule 19 (const_list -> const_definition SEMICOLON .)
    BEGIN           reduce using rule 19 (const_list -> const_definition SEMICOLON .)


state 58

    (20) const_definition -> ID EQUAL . constant
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    STRING_LITERAL  shift and go to state 94
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    ID              shift and go to state 106

    constant                       shift and go to state 107
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 59

    (27) type_list -> type_list type_definition . SEMICOLON

    SEMICOLON       shift and go to state 108


state 60

    (28) type_list -> type_definition SEMICOLON .

    ID              reduce using rule 28 (type_list -> type_definition SEMICOLON .)
    VAR             reduce using rule 28 (type_list -> type_definition SEMICOLON .)
    CONST           reduce using rule 28 (type_list -> type_definition SEMICOLON .)
    TYPE            reduce using rule 28 (type_list -> type_definition SEMICOLON .)
    PROCEDURE       reduce using rule 28 (type_list -> type_definition SEMICOLON .)
    BEGIN           reduce using rule 28 (type_list -> type_definition SEMICOLON .)


state 61

    (29) type_definition -> ID EQUAL . type
    (30) type -> . simple_type
    (31) type -> . array_type
    (32) type -> . record_type
    (33) simple_type -> . subrange_type
    (34) simple_type -> . type_identifier
    (36) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (38) record_type -> . RECORD record_fields END
    (35) subrange_type -> . constant DOTDOT constant
    (43) type_identifier -> . ID
    (44) type_identifier -> . predefined_type
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (45) predefined_type -> . INTEGER
    (46) predefined_type -> . REAL
    (47) predefined_type -> . BOOLEAN
    (48) predefined_type -> . STRING
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    ARRAY           shift and go to state 87
    RECORD          shift and go to state 88
    ID              shift and go to state 90
    STRING_LITERAL  shift and go to state 94
    INTEGER         shift and go to state 96
    REAL            shift and go to state 97
    BOOLEAN         shift and go to state 98
    STRING          shift and go to state 99
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103

    type                           shift and go to state 109
    simple_type                    shift and go to state 82
    array_type                     shift and go to state 83
    record_type                    shift and go to state 84
    subrange_type                  shift and go to state 85
    type_identifier                shift and go to state 86
    constant                       shift and go to state 89
    predefined_type                shift and go to state 91
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 62

    (21) procedure_declaration -> PROCEDURE ID LPAREN . param_list RPAREN SEMICOLON block
    (22) param_list -> . param_list SEMICOLON param
    (23) param_list -> . param
    (24) param_list -> . empty
    (25) param -> . ID COLON type
    (113) empty -> .

    ID              shift and go to state 110
    RPAREN          reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)

    param_list                     shift and go to state 111
    param                          shift and go to state 112
    empty                          shift and go to state 113

state 63

    (49) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    VAR             reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    CONST           reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    TYPE            reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    PROCEDURE       reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    BEGIN           reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    UNTIL           reduce using rule 49 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 49 (compound_statement -> BEGIN statement_list END .)


state 64

    (51) statement_list -> statement_list SEMICOLON . statement
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    UNTIL           reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52

    statement                      shift and go to state 114
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 65

    (63) assignment_statement -> variable ASSIGN . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    variable                       shift and go to state 71
    expression                     shift and go to state 115

state 66

    (65) variable -> variable DOT . ID

    ID              shift and go to state 116


state 67

    (66) variable -> variable LBRACKET . expression_list RBRACKET
    (67) expression_list -> . expression
    (68) expression_list -> . expression_list COMMA expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    variable                       shift and go to state 71
    expression_list                shift and go to state 117
    expression                     shift and go to state 118

state 68

    (70) if_statement -> IF expression . THEN statement else_part
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            shift and go to state 119
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134


state 69

    (98) expression -> NOT . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 135
    variable                       shift and go to state 71

state 70

    (99) expression -> LPAREN . expression RPAREN
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 136
    variable                       shift and go to state 71

state 71

    (100) expression -> variable .
    (65) variable -> variable . DOT ID
    (66) variable -> variable . LBRACKET expression_list RBRACKET

    THEN            reduce using rule 100 (expression -> variable .)
    PLUS            reduce using rule 100 (expression -> variable .)
    MINUS           reduce using rule 100 (expression -> variable .)
    TIMES           reduce using rule 100 (expression -> variable .)
    DIVIDE          reduce using rule 100 (expression -> variable .)
    DIVIDE_INT      reduce using rule 100 (expression -> variable .)
    MODULO          reduce using rule 100 (expression -> variable .)
    EQUAL           reduce using rule 100 (expression -> variable .)
    NEQUAL          reduce using rule 100 (expression -> variable .)
    LT              reduce using rule 100 (expression -> variable .)
    GT              reduce using rule 100 (expression -> variable .)
    LE              reduce using rule 100 (expression -> variable .)
    GE              reduce using rule 100 (expression -> variable .)
    AND             reduce using rule 100 (expression -> variable .)
    OR              reduce using rule 100 (expression -> variable .)
    XOR             reduce using rule 100 (expression -> variable .)
    DO              reduce using rule 100 (expression -> variable .)
    END             reduce using rule 100 (expression -> variable .)
    SEMICOLON       reduce using rule 100 (expression -> variable .)
    UNTIL           reduce using rule 100 (expression -> variable .)
    ELSE            reduce using rule 100 (expression -> variable .)
    RBRACKET        reduce using rule 100 (expression -> variable .)
    COMMA           reduce using rule 100 (expression -> variable .)
    RPAREN          reduce using rule 100 (expression -> variable .)
    TO              reduce using rule 100 (expression -> variable .)
    DOWNTO          reduce using rule 100 (expression -> variable .)
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67


state 72

    (101) expression -> INTEGER_CONST .

    THEN            reduce using rule 101 (expression -> INTEGER_CONST .)
    PLUS            reduce using rule 101 (expression -> INTEGER_CONST .)
    MINUS           reduce using rule 101 (expression -> INTEGER_CONST .)
    TIMES           reduce using rule 101 (expression -> INTEGER_CONST .)
    DIVIDE          reduce using rule 101 (expression -> INTEGER_CONST .)
    DIVIDE_INT      reduce using rule 101 (expression -> INTEGER_CONST .)
    MODULO          reduce using rule 101 (expression -> INTEGER_CONST .)
    EQUAL           reduce using rule 101 (expression -> INTEGER_CONST .)
    NEQUAL          reduce using rule 101 (expression -> INTEGER_CONST .)
    LT              reduce using rule 101 (expression -> INTEGER_CONST .)
    GT              reduce using rule 101 (expression -> INTEGER_CONST .)
    LE              reduce using rule 101 (expression -> INTEGER_CONST .)
    GE              reduce using rule 101 (expression -> INTEGER_CONST .)
    AND             reduce using rule 101 (expression -> INTEGER_CONST .)
    OR              reduce using rule 101 (expression -> INTEGER_CONST .)
    XOR             reduce using rule 101 (expression -> INTEGER_CONST .)
    DO              reduce using rule 101 (expression -> INTEGER_CONST .)
    END             reduce using rule 101 (expression -> INTEGER_CONST .)
    SEMICOLON       reduce using rule 101 (expression -> INTEGER_CONST .)
    UNTIL           reduce using rule 101 (expression -> INTEGER_CONST .)
    ELSE            reduce using rule 101 (expression -> INTEGER_CONST .)
    RBRACKET        reduce using rule 101 (expression -> INTEGER_CONST .)
    COMMA           reduce using rule 101 (expression -> INTEGER_CONST .)
    RPAREN          reduce using rule 101 (expression -> INTEGER_CONST .)
    TO              reduce using rule 101 (expression -> INTEGER_CONST .)
    DOWNTO          reduce using rule 101 (expression -> INTEGER_CONST .)


state 73

    (102) expression -> REAL_CONST .

    THEN            reduce using rule 102 (expression -> REAL_CONST .)
    PLUS            reduce using rule 102 (expression -> REAL_CONST .)
    MINUS           reduce using rule 102 (expression -> REAL_CONST .)
    TIMES           reduce using rule 102 (expression -> REAL_CONST .)
    DIVIDE          reduce using rule 102 (expression -> REAL_CONST .)
    DIVIDE_INT      reduce using rule 102 (expression -> REAL_CONST .)
    MODULO          reduce using rule 102 (expression -> REAL_CONST .)
    EQUAL           reduce using rule 102 (expression -> REAL_CONST .)
    NEQUAL          reduce using rule 102 (expression -> REAL_CONST .)
    LT              reduce using rule 102 (expression -> REAL_CONST .)
    GT              reduce using rule 102 (expression -> REAL_CONST .)
    LE              reduce using rule 102 (expression -> REAL_CONST .)
    GE              reduce using rule 102 (expression -> REAL_CONST .)
    AND             reduce using rule 102 (expression -> REAL_CONST .)
    OR              reduce using rule 102 (expression -> REAL_CONST .)
    XOR             reduce using rule 102 (expression -> REAL_CONST .)
    DO              reduce using rule 102 (expression -> REAL_CONST .)
    END             reduce using rule 102 (expression -> REAL_CONST .)
    SEMICOLON       reduce using rule 102 (expression -> REAL_CONST .)
    UNTIL           reduce using rule 102 (expression -> REAL_CONST .)
    ELSE            reduce using rule 102 (expression -> REAL_CONST .)
    RBRACKET        reduce using rule 102 (expression -> REAL_CONST .)
    COMMA           reduce using rule 102 (expression -> REAL_CONST .)
    RPAREN          reduce using rule 102 (expression -> REAL_CONST .)
    TO              reduce using rule 102 (expression -> REAL_CONST .)
    DOWNTO          reduce using rule 102 (expression -> REAL_CONST .)


state 74

    (103) expression -> STRING_LITERAL .

    THEN            reduce using rule 103 (expression -> STRING_LITERAL .)
    PLUS            reduce using rule 103 (expression -> STRING_LITERAL .)
    MINUS           reduce using rule 103 (expression -> STRING_LITERAL .)
    TIMES           reduce using rule 103 (expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 103 (expression -> STRING_LITERAL .)
    DIVIDE_INT      reduce using rule 103 (expression -> STRING_LITERAL .)
    MODULO          reduce using rule 103 (expression -> STRING_LITERAL .)
    EQUAL           reduce using rule 103 (expression -> STRING_LITERAL .)
    NEQUAL          reduce using rule 103 (expression -> STRING_LITERAL .)
    LT              reduce using rule 103 (expression -> STRING_LITERAL .)
    GT              reduce using rule 103 (expression -> STRING_LITERAL .)
    LE              reduce using rule 103 (expression -> STRING_LITERAL .)
    GE              reduce using rule 103 (expression -> STRING_LITERAL .)
    AND             reduce using rule 103 (expression -> STRING_LITERAL .)
    OR              reduce using rule 103 (expression -> STRING_LITERAL .)
    XOR             reduce using rule 103 (expression -> STRING_LITERAL .)
    DO              reduce using rule 103 (expression -> STRING_LITERAL .)
    END             reduce using rule 103 (expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 103 (expression -> STRING_LITERAL .)
    UNTIL           reduce using rule 103 (expression -> STRING_LITERAL .)
    ELSE            reduce using rule 103 (expression -> STRING_LITERAL .)
    RBRACKET        reduce using rule 103 (expression -> STRING_LITERAL .)
    COMMA           reduce using rule 103 (expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 103 (expression -> STRING_LITERAL .)
    TO              reduce using rule 103 (expression -> STRING_LITERAL .)
    DOWNTO          reduce using rule 103 (expression -> STRING_LITERAL .)


state 75

    (64) variable -> ID .

    DOT             reduce using rule 64 (variable -> ID .)
    LBRACKET        reduce using rule 64 (variable -> ID .)
    THEN            reduce using rule 64 (variable -> ID .)
    PLUS            reduce using rule 64 (variable -> ID .)
    MINUS           reduce using rule 64 (variable -> ID .)
    TIMES           reduce using rule 64 (variable -> ID .)
    DIVIDE          reduce using rule 64 (variable -> ID .)
    DIVIDE_INT      reduce using rule 64 (variable -> ID .)
    MODULO          reduce using rule 64 (variable -> ID .)
    EQUAL           reduce using rule 64 (variable -> ID .)
    NEQUAL          reduce using rule 64 (variable -> ID .)
    LT              reduce using rule 64 (variable -> ID .)
    GT              reduce using rule 64 (variable -> ID .)
    LE              reduce using rule 64 (variable -> ID .)
    GE              reduce using rule 64 (variable -> ID .)
    AND             reduce using rule 64 (variable -> ID .)
    OR              reduce using rule 64 (variable -> ID .)
    XOR             reduce using rule 64 (variable -> ID .)
    DO              reduce using rule 64 (variable -> ID .)
    END             reduce using rule 64 (variable -> ID .)
    SEMICOLON       reduce using rule 64 (variable -> ID .)
    UNTIL           reduce using rule 64 (variable -> ID .)
    ELSE            reduce using rule 64 (variable -> ID .)
    RBRACKET        reduce using rule 64 (variable -> ID .)
    COMMA           reduce using rule 64 (variable -> ID .)
    RPAREN          reduce using rule 64 (variable -> ID .)
    TO              reduce using rule 64 (variable -> ID .)
    DOWNTO          reduce using rule 64 (variable -> ID .)


state 76

    (73) while_statement -> WHILE expression . DO statement
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    DO              shift and go to state 137
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134


state 77

    (74) repeat_statement -> REPEAT statement_list . UNTIL expression
    (51) statement_list -> statement_list . SEMICOLON statement

    UNTIL           shift and go to state 138
    SEMICOLON       shift and go to state 64


state 78

    (75) for_statement -> FOR ID . ASSIGN expression TO expression DO statement
    (76) for_statement -> FOR ID . ASSIGN expression DOWNTO expression DO statement

    ASSIGN          shift and go to state 139


state 79

    (69) record_assignment -> ID DOT . ID ASSIGN expression

    ID              shift and go to state 140


state 80

    (78) procedure_call -> ID LPAREN . args RPAREN
    (80) args -> . args COMMA expression
    (81) args -> . expression
    (82) args -> . empty
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (113) empty -> .
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    RPAREN          reduce using rule 113 (empty -> .)
    COMMA           reduce using rule 113 (empty -> .)
    ID              shift and go to state 75

    args                           shift and go to state 141
    expression                     shift and go to state 142
    empty                          shift and go to state 143
    variable                       shift and go to state 71

state 81

    (14) var_decl -> id_list COLON type . SEMICOLON

    SEMICOLON       shift and go to state 144


state 82

    (30) type -> simple_type .

    SEMICOLON       reduce using rule 30 (type -> simple_type .)
    RPAREN          reduce using rule 30 (type -> simple_type .)


state 83

    (31) type -> array_type .

    SEMICOLON       reduce using rule 31 (type -> array_type .)
    RPAREN          reduce using rule 31 (type -> array_type .)


state 84

    (32) type -> record_type .

    SEMICOLON       reduce using rule 32 (type -> record_type .)
    RPAREN          reduce using rule 32 (type -> record_type .)


state 85

    (33) simple_type -> subrange_type .

    SEMICOLON       reduce using rule 33 (simple_type -> subrange_type .)
    RBRACKET        reduce using rule 33 (simple_type -> subrange_type .)
    RPAREN          reduce using rule 33 (simple_type -> subrange_type .)


state 86

    (34) simple_type -> type_identifier .

    SEMICOLON       reduce using rule 34 (simple_type -> type_identifier .)
    RBRACKET        reduce using rule 34 (simple_type -> type_identifier .)
    RPAREN          reduce using rule 34 (simple_type -> type_identifier .)


state 87

    (36) array_type -> ARRAY . LBRACKET index_type RBRACKET OF type

    LBRACKET        shift and go to state 145


state 88

    (38) record_type -> RECORD . record_fields END
    (39) record_fields -> . field_list
    (40) field_list -> . field_list field_declaration SEMICOLON
    (41) field_list -> . field_declaration SEMICOLON
    (42) field_declaration -> . id_list COLON type
    (15) id_list -> . id_list COMMA ID
    (16) id_list -> . ID

    ID              shift and go to state 25

    record_fields                  shift and go to state 146
    field_list                     shift and go to state 147
    field_declaration              shift and go to state 148
    id_list                        shift and go to state 149

state 89

    (35) subrange_type -> constant . DOTDOT constant

    DOTDOT          shift and go to state 150


state 90

    (43) type_identifier -> ID .
    (112) constant_identifier -> ID .

    SEMICOLON       reduce using rule 43 (type_identifier -> ID .)
    RBRACKET        reduce using rule 43 (type_identifier -> ID .)
    RPAREN          reduce using rule 43 (type_identifier -> ID .)
    DOTDOT          reduce using rule 112 (constant_identifier -> ID .)


state 91

    (44) type_identifier -> predefined_type .

    SEMICOLON       reduce using rule 44 (type_identifier -> predefined_type .)
    RBRACKET        reduce using rule 44 (type_identifier -> predefined_type .)
    RPAREN          reduce using rule 44 (type_identifier -> predefined_type .)


state 92

    (104) constant -> UNSIGNED_NUMBER .

    DOTDOT          reduce using rule 104 (constant -> UNSIGNED_NUMBER .)
    SEMICOLON       reduce using rule 104 (constant -> UNSIGNED_NUMBER .)
    RBRACKET        reduce using rule 104 (constant -> UNSIGNED_NUMBER .)
    RPAREN          reduce using rule 104 (constant -> UNSIGNED_NUMBER .)


state 93

    (105) constant -> sign . UNSIGNED_NUMBER
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST

    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101

    UNSIGNED_NUMBER                shift and go to state 151

state 94

    (106) constant -> STRING_LITERAL .

    DOTDOT          reduce using rule 106 (constant -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 106 (constant -> STRING_LITERAL .)
    RBRACKET        reduce using rule 106 (constant -> STRING_LITERAL .)
    RPAREN          reduce using rule 106 (constant -> STRING_LITERAL .)


state 95

    (107) constant -> constant_identifier .

    DOTDOT          reduce using rule 107 (constant -> constant_identifier .)
    SEMICOLON       reduce using rule 107 (constant -> constant_identifier .)
    RBRACKET        reduce using rule 107 (constant -> constant_identifier .)
    RPAREN          reduce using rule 107 (constant -> constant_identifier .)


state 96

    (45) predefined_type -> INTEGER .

    SEMICOLON       reduce using rule 45 (predefined_type -> INTEGER .)
    RBRACKET        reduce using rule 45 (predefined_type -> INTEGER .)
    RPAREN          reduce using rule 45 (predefined_type -> INTEGER .)


state 97

    (46) predefined_type -> REAL .

    SEMICOLON       reduce using rule 46 (predefined_type -> REAL .)
    RBRACKET        reduce using rule 46 (predefined_type -> REAL .)
    RPAREN          reduce using rule 46 (predefined_type -> REAL .)


state 98

    (47) predefined_type -> BOOLEAN .

    SEMICOLON       reduce using rule 47 (predefined_type -> BOOLEAN .)
    RBRACKET        reduce using rule 47 (predefined_type -> BOOLEAN .)
    RPAREN          reduce using rule 47 (predefined_type -> BOOLEAN .)


state 99

    (48) predefined_type -> STRING .

    SEMICOLON       reduce using rule 48 (predefined_type -> STRING .)
    RBRACKET        reduce using rule 48 (predefined_type -> STRING .)
    RPAREN          reduce using rule 48 (predefined_type -> STRING .)


state 100

    (108) UNSIGNED_NUMBER -> INTEGER_CONST .

    DOTDOT          reduce using rule 108 (UNSIGNED_NUMBER -> INTEGER_CONST .)
    SEMICOLON       reduce using rule 108 (UNSIGNED_NUMBER -> INTEGER_CONST .)
    RBRACKET        reduce using rule 108 (UNSIGNED_NUMBER -> INTEGER_CONST .)
    RPAREN          reduce using rule 108 (UNSIGNED_NUMBER -> INTEGER_CONST .)


state 101

    (109) UNSIGNED_NUMBER -> REAL_CONST .

    DOTDOT          reduce using rule 109 (UNSIGNED_NUMBER -> REAL_CONST .)
    SEMICOLON       reduce using rule 109 (UNSIGNED_NUMBER -> REAL_CONST .)
    RBRACKET        reduce using rule 109 (UNSIGNED_NUMBER -> REAL_CONST .)
    RPAREN          reduce using rule 109 (UNSIGNED_NUMBER -> REAL_CONST .)


state 102

    (110) sign -> PLUS .

    INTEGER_CONST   reduce using rule 110 (sign -> PLUS .)
    REAL_CONST      reduce using rule 110 (sign -> PLUS .)


state 103

    (111) sign -> MINUS .

    INTEGER_CONST   reduce using rule 111 (sign -> MINUS .)
    REAL_CONST      reduce using rule 111 (sign -> MINUS .)


state 104

    (15) id_list -> id_list COMMA ID .

    COLON           reduce using rule 15 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 15 (id_list -> id_list COMMA ID .)


state 105

    (18) const_list -> const_list const_definition SEMICOLON .

    ID              reduce using rule 18 (const_list -> const_list const_definition SEMICOLON .)
    VAR             reduce using rule 18 (const_list -> const_list const_definition SEMICOLON .)
    CONST           reduce using rule 18 (const_list -> const_list const_definition SEMICOLON .)
    TYPE            reduce using rule 18 (const_list -> const_list const_definition SEMICOLON .)
    PROCEDURE       reduce using rule 18 (const_list -> const_list const_definition SEMICOLON .)
    BEGIN           reduce using rule 18 (const_list -> const_list const_definition SEMICOLON .)


state 106

    (112) constant_identifier -> ID .

    SEMICOLON       reduce using rule 112 (constant_identifier -> ID .)
    RBRACKET        reduce using rule 112 (constant_identifier -> ID .)
    RPAREN          reduce using rule 112 (constant_identifier -> ID .)


state 107

    (20) const_definition -> ID EQUAL constant .

    SEMICOLON       reduce using rule 20 (const_definition -> ID EQUAL constant .)


state 108

    (27) type_list -> type_list type_definition SEMICOLON .

    ID              reduce using rule 27 (type_list -> type_list type_definition SEMICOLON .)
    VAR             reduce using rule 27 (type_list -> type_list type_definition SEMICOLON .)
    CONST           reduce using rule 27 (type_list -> type_list type_definition SEMICOLON .)
    TYPE            reduce using rule 27 (type_list -> type_list type_definition SEMICOLON .)
    PROCEDURE       reduce using rule 27 (type_list -> type_list type_definition SEMICOLON .)
    BEGIN           reduce using rule 27 (type_list -> type_list type_definition SEMICOLON .)


state 109

    (29) type_definition -> ID EQUAL type .

    SEMICOLON       reduce using rule 29 (type_definition -> ID EQUAL type .)


state 110

    (25) param -> ID . COLON type

    COLON           shift and go to state 152


state 111

    (21) procedure_declaration -> PROCEDURE ID LPAREN param_list . RPAREN SEMICOLON block
    (22) param_list -> param_list . SEMICOLON param

    RPAREN          shift and go to state 153
    SEMICOLON       shift and go to state 154


state 112

    (23) param_list -> param .

    RPAREN          reduce using rule 23 (param_list -> param .)
    SEMICOLON       reduce using rule 23 (param_list -> param .)


state 113

    (24) param_list -> empty .

    RPAREN          reduce using rule 24 (param_list -> empty .)
    SEMICOLON       reduce using rule 24 (param_list -> empty .)


state 114

    (51) statement_list -> statement_list SEMICOLON statement .

    END             reduce using rule 51 (statement_list -> statement_list SEMICOLON statement .)
    SEMICOLON       reduce using rule 51 (statement_list -> statement_list SEMICOLON statement .)
    UNTIL           reduce using rule 51 (statement_list -> statement_list SEMICOLON statement .)


state 115

    (63) assignment_statement -> variable ASSIGN expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    END             reduce using rule 63 (assignment_statement -> variable ASSIGN expression .)
    SEMICOLON       reduce using rule 63 (assignment_statement -> variable ASSIGN expression .)
    UNTIL           reduce using rule 63 (assignment_statement -> variable ASSIGN expression .)
    ELSE            reduce using rule 63 (assignment_statement -> variable ASSIGN expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134


state 116

    (65) variable -> variable DOT ID .

    ASSIGN          reduce using rule 65 (variable -> variable DOT ID .)
    DOT             reduce using rule 65 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 65 (variable -> variable DOT ID .)
    THEN            reduce using rule 65 (variable -> variable DOT ID .)
    PLUS            reduce using rule 65 (variable -> variable DOT ID .)
    MINUS           reduce using rule 65 (variable -> variable DOT ID .)
    TIMES           reduce using rule 65 (variable -> variable DOT ID .)
    DIVIDE          reduce using rule 65 (variable -> variable DOT ID .)
    DIVIDE_INT      reduce using rule 65 (variable -> variable DOT ID .)
    MODULO          reduce using rule 65 (variable -> variable DOT ID .)
    EQUAL           reduce using rule 65 (variable -> variable DOT ID .)
    NEQUAL          reduce using rule 65 (variable -> variable DOT ID .)
    LT              reduce using rule 65 (variable -> variable DOT ID .)
    GT              reduce using rule 65 (variable -> variable DOT ID .)
    LE              reduce using rule 65 (variable -> variable DOT ID .)
    GE              reduce using rule 65 (variable -> variable DOT ID .)
    AND             reduce using rule 65 (variable -> variable DOT ID .)
    OR              reduce using rule 65 (variable -> variable DOT ID .)
    XOR             reduce using rule 65 (variable -> variable DOT ID .)
    DO              reduce using rule 65 (variable -> variable DOT ID .)
    END             reduce using rule 65 (variable -> variable DOT ID .)
    SEMICOLON       reduce using rule 65 (variable -> variable DOT ID .)
    UNTIL           reduce using rule 65 (variable -> variable DOT ID .)
    ELSE            reduce using rule 65 (variable -> variable DOT ID .)
    RBRACKET        reduce using rule 65 (variable -> variable DOT ID .)
    COMMA           reduce using rule 65 (variable -> variable DOT ID .)
    RPAREN          reduce using rule 65 (variable -> variable DOT ID .)
    TO              reduce using rule 65 (variable -> variable DOT ID .)
    DOWNTO          reduce using rule 65 (variable -> variable DOT ID .)


state 117

    (66) variable -> variable LBRACKET expression_list . RBRACKET
    (68) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 155
    COMMA           shift and go to state 156


state 118

    (67) expression_list -> expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    RBRACKET        reduce using rule 67 (expression_list -> expression .)
    COMMA           reduce using rule 67 (expression_list -> expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134


state 119

    (70) if_statement -> IF expression THEN . statement else_part
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    ELSE            reduce using rule 113 (empty -> .)
    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    UNTIL           reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52

    statement                      shift and go to state 157
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 120

    (83) expression -> expression PLUS . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 158
    variable                       shift and go to state 71

state 121

    (84) expression -> expression MINUS . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 159
    variable                       shift and go to state 71

state 122

    (85) expression -> expression TIMES . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 160
    variable                       shift and go to state 71

state 123

    (86) expression -> expression DIVIDE . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 161
    variable                       shift and go to state 71

state 124

    (87) expression -> expression DIVIDE_INT . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 162
    variable                       shift and go to state 71

state 125

    (88) expression -> expression MODULO . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 163
    variable                       shift and go to state 71

state 126

    (89) expression -> expression EQUAL . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 164
    variable                       shift and go to state 71

state 127

    (90) expression -> expression NEQUAL . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 165
    variable                       shift and go to state 71

state 128

    (91) expression -> expression LT . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 166
    variable                       shift and go to state 71

state 129

    (92) expression -> expression GT . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 167
    variable                       shift and go to state 71

state 130

    (93) expression -> expression LE . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 168
    variable                       shift and go to state 71

state 131

    (94) expression -> expression GE . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 169
    variable                       shift and go to state 71

state 132

    (95) expression -> expression AND . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 170
    variable                       shift and go to state 71

state 133

    (96) expression -> expression OR . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 171
    variable                       shift and go to state 71

state 134

    (97) expression -> expression XOR . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 172
    variable                       shift and go to state 71

state 135

    (98) expression -> NOT expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 98 (expression -> NOT expression .)
    PLUS            reduce using rule 98 (expression -> NOT expression .)
    MINUS           reduce using rule 98 (expression -> NOT expression .)
    TIMES           reduce using rule 98 (expression -> NOT expression .)
    DIVIDE          reduce using rule 98 (expression -> NOT expression .)
    DIVIDE_INT      reduce using rule 98 (expression -> NOT expression .)
    MODULO          reduce using rule 98 (expression -> NOT expression .)
    EQUAL           reduce using rule 98 (expression -> NOT expression .)
    NEQUAL          reduce using rule 98 (expression -> NOT expression .)
    LT              reduce using rule 98 (expression -> NOT expression .)
    GT              reduce using rule 98 (expression -> NOT expression .)
    LE              reduce using rule 98 (expression -> NOT expression .)
    GE              reduce using rule 98 (expression -> NOT expression .)
    AND             reduce using rule 98 (expression -> NOT expression .)
    OR              reduce using rule 98 (expression -> NOT expression .)
    XOR             reduce using rule 98 (expression -> NOT expression .)
    DO              reduce using rule 98 (expression -> NOT expression .)
    END             reduce using rule 98 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 98 (expression -> NOT expression .)
    UNTIL           reduce using rule 98 (expression -> NOT expression .)
    ELSE            reduce using rule 98 (expression -> NOT expression .)
    RBRACKET        reduce using rule 98 (expression -> NOT expression .)
    COMMA           reduce using rule 98 (expression -> NOT expression .)
    RPAREN          reduce using rule 98 (expression -> NOT expression .)
    TO              reduce using rule 98 (expression -> NOT expression .)
    DOWNTO          reduce using rule 98 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 121 ]
  ! TIMES           [ shift and go to state 122 ]
  ! DIVIDE          [ shift and go to state 123 ]
  ! DIVIDE_INT      [ shift and go to state 124 ]
  ! MODULO          [ shift and go to state 125 ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 136

    (99) expression -> LPAREN expression . RPAREN
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    RPAREN          shift and go to state 173
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134


state 137

    (73) while_statement -> WHILE expression DO . statement
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    ELSE            reduce using rule 113 (empty -> .)
    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    UNTIL           reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52

    statement                      shift and go to state 174
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 138

    (74) repeat_statement -> REPEAT statement_list UNTIL . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 175
    variable                       shift and go to state 71

state 139

    (75) for_statement -> FOR ID ASSIGN . expression TO expression DO statement
    (76) for_statement -> FOR ID ASSIGN . expression DOWNTO expression DO statement
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 176
    variable                       shift and go to state 71

state 140

    (69) record_assignment -> ID DOT ID . ASSIGN expression

    ASSIGN          shift and go to state 177


state 141

    (78) procedure_call -> ID LPAREN args . RPAREN
    (80) args -> args . COMMA expression

    RPAREN          shift and go to state 178
    COMMA           shift and go to state 179


state 142

    (81) args -> expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    RPAREN          reduce using rule 81 (args -> expression .)
    COMMA           reduce using rule 81 (args -> expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134


state 143

    (82) args -> empty .

    RPAREN          reduce using rule 82 (args -> empty .)
    COMMA           reduce using rule 82 (args -> empty .)


state 144

    (14) var_decl -> id_list COLON type SEMICOLON .

    ID              reduce using rule 14 (var_decl -> id_list COLON type SEMICOLON .)
    VAR             reduce using rule 14 (var_decl -> id_list COLON type SEMICOLON .)
    CONST           reduce using rule 14 (var_decl -> id_list COLON type SEMICOLON .)
    TYPE            reduce using rule 14 (var_decl -> id_list COLON type SEMICOLON .)
    PROCEDURE       reduce using rule 14 (var_decl -> id_list COLON type SEMICOLON .)
    BEGIN           reduce using rule 14 (var_decl -> id_list COLON type SEMICOLON .)


state 145

    (36) array_type -> ARRAY LBRACKET . index_type RBRACKET OF type
    (37) index_type -> . simple_type
    (33) simple_type -> . subrange_type
    (34) simple_type -> . type_identifier
    (35) subrange_type -> . constant DOTDOT constant
    (43) type_identifier -> . ID
    (44) type_identifier -> . predefined_type
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (45) predefined_type -> . INTEGER
    (46) predefined_type -> . REAL
    (47) predefined_type -> . BOOLEAN
    (48) predefined_type -> . STRING
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    ID              shift and go to state 90
    STRING_LITERAL  shift and go to state 94
    INTEGER         shift and go to state 96
    REAL            shift and go to state 97
    BOOLEAN         shift and go to state 98
    STRING          shift and go to state 99
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103

    index_type                     shift and go to state 180
    simple_type                    shift and go to state 181
    subrange_type                  shift and go to state 85
    type_identifier                shift and go to state 86
    constant                       shift and go to state 89
    predefined_type                shift and go to state 91
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 146

    (38) record_type -> RECORD record_fields . END

    END             shift and go to state 182


state 147

    (39) record_fields -> field_list .
    (40) field_list -> field_list . field_declaration SEMICOLON
    (42) field_declaration -> . id_list COLON type
    (15) id_list -> . id_list COMMA ID
    (16) id_list -> . ID

    END             reduce using rule 39 (record_fields -> field_list .)
    ID              shift and go to state 25

    field_declaration              shift and go to state 183
    id_list                        shift and go to state 149

state 148

    (41) field_list -> field_declaration . SEMICOLON

    SEMICOLON       shift and go to state 184


state 149

    (42) field_declaration -> id_list . COLON type
    (15) id_list -> id_list . COMMA ID

    COLON           shift and go to state 185
    COMMA           shift and go to state 55


state 150

    (35) subrange_type -> constant DOTDOT . constant
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    STRING_LITERAL  shift and go to state 94
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    ID              shift and go to state 106

    constant                       shift and go to state 186
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 151

    (105) constant -> sign UNSIGNED_NUMBER .

    DOTDOT          reduce using rule 105 (constant -> sign UNSIGNED_NUMBER .)
    SEMICOLON       reduce using rule 105 (constant -> sign UNSIGNED_NUMBER .)
    RBRACKET        reduce using rule 105 (constant -> sign UNSIGNED_NUMBER .)
    RPAREN          reduce using rule 105 (constant -> sign UNSIGNED_NUMBER .)


state 152

    (25) param -> ID COLON . type
    (30) type -> . simple_type
    (31) type -> . array_type
    (32) type -> . record_type
    (33) simple_type -> . subrange_type
    (34) simple_type -> . type_identifier
    (36) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (38) record_type -> . RECORD record_fields END
    (35) subrange_type -> . constant DOTDOT constant
    (43) type_identifier -> . ID
    (44) type_identifier -> . predefined_type
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (45) predefined_type -> . INTEGER
    (46) predefined_type -> . REAL
    (47) predefined_type -> . BOOLEAN
    (48) predefined_type -> . STRING
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    ARRAY           shift and go to state 87
    RECORD          shift and go to state 88
    ID              shift and go to state 90
    STRING_LITERAL  shift and go to state 94
    INTEGER         shift and go to state 96
    REAL            shift and go to state 97
    BOOLEAN         shift and go to state 98
    STRING          shift and go to state 99
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103

    type                           shift and go to state 187
    simple_type                    shift and go to state 82
    array_type                     shift and go to state 83
    record_type                    shift and go to state 84
    subrange_type                  shift and go to state 85
    type_identifier                shift and go to state 86
    constant                       shift and go to state 89
    predefined_type                shift and go to state 91
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 153

    (21) procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN . SEMICOLON block

    SEMICOLON       shift and go to state 188


state 154

    (22) param_list -> param_list SEMICOLON . param
    (25) param -> . ID COLON type

    ID              shift and go to state 110

    param                          shift and go to state 189

state 155

    (66) variable -> variable LBRACKET expression_list RBRACKET .

    ASSIGN          reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOT             reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIVIDE_INT      reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    NEQUAL          reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    LT              reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    GT              reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    LE              reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    GE              reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    XOR             reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    END             reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    SEMICOLON       reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    UNTIL           reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOWNTO          reduce using rule 66 (variable -> variable LBRACKET expression_list RBRACKET .)


state 156

    (68) expression_list -> expression_list COMMA . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 190
    variable                       shift and go to state 71

state 157

    (70) if_statement -> IF expression THEN statement . else_part
    (71) else_part -> . ELSE statement
    (72) else_part -> . empty
    (113) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 192
    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    UNTIL           reduce using rule 113 (empty -> .)

  ! ELSE            [ reduce using rule 113 (empty -> .) ]

    else_part                      shift and go to state 191
    empty                          shift and go to state 193

state 158

    (83) expression -> expression PLUS expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 83 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 83 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 83 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 83 (expression -> expression PLUS expression .)
    NEQUAL          reduce using rule 83 (expression -> expression PLUS expression .)
    LT              reduce using rule 83 (expression -> expression PLUS expression .)
    GT              reduce using rule 83 (expression -> expression PLUS expression .)
    LE              reduce using rule 83 (expression -> expression PLUS expression .)
    GE              reduce using rule 83 (expression -> expression PLUS expression .)
    AND             reduce using rule 83 (expression -> expression PLUS expression .)
    OR              reduce using rule 83 (expression -> expression PLUS expression .)
    XOR             reduce using rule 83 (expression -> expression PLUS expression .)
    DO              reduce using rule 83 (expression -> expression PLUS expression .)
    END             reduce using rule 83 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 83 (expression -> expression PLUS expression .)
    UNTIL           reduce using rule 83 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 83 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 83 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 83 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 83 (expression -> expression PLUS expression .)
    TO              reduce using rule 83 (expression -> expression PLUS expression .)
    DOWNTO          reduce using rule 83 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! TIMES           [ reduce using rule 83 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 83 (expression -> expression PLUS expression .) ]
  ! DIVIDE_INT      [ reduce using rule 83 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 83 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 121 ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 159

    (84) expression -> expression MINUS expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 84 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 84 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 84 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 84 (expression -> expression MINUS expression .)
    NEQUAL          reduce using rule 84 (expression -> expression MINUS expression .)
    LT              reduce using rule 84 (expression -> expression MINUS expression .)
    GT              reduce using rule 84 (expression -> expression MINUS expression .)
    LE              reduce using rule 84 (expression -> expression MINUS expression .)
    GE              reduce using rule 84 (expression -> expression MINUS expression .)
    AND             reduce using rule 84 (expression -> expression MINUS expression .)
    OR              reduce using rule 84 (expression -> expression MINUS expression .)
    XOR             reduce using rule 84 (expression -> expression MINUS expression .)
    DO              reduce using rule 84 (expression -> expression MINUS expression .)
    END             reduce using rule 84 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 84 (expression -> expression MINUS expression .)
    UNTIL           reduce using rule 84 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 84 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 84 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 84 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 84 (expression -> expression MINUS expression .)
    TO              reduce using rule 84 (expression -> expression MINUS expression .)
    DOWNTO          reduce using rule 84 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! TIMES           [ reduce using rule 84 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 84 (expression -> expression MINUS expression .) ]
  ! DIVIDE_INT      [ reduce using rule 84 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 84 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 121 ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 160

    (85) expression -> expression TIMES expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 85 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 85 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 85 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 85 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 85 (expression -> expression TIMES expression .)
    DIVIDE_INT      reduce using rule 85 (expression -> expression TIMES expression .)
    MODULO          reduce using rule 85 (expression -> expression TIMES expression .)
    EQUAL           reduce using rule 85 (expression -> expression TIMES expression .)
    NEQUAL          reduce using rule 85 (expression -> expression TIMES expression .)
    LT              reduce using rule 85 (expression -> expression TIMES expression .)
    GT              reduce using rule 85 (expression -> expression TIMES expression .)
    LE              reduce using rule 85 (expression -> expression TIMES expression .)
    GE              reduce using rule 85 (expression -> expression TIMES expression .)
    AND             reduce using rule 85 (expression -> expression TIMES expression .)
    OR              reduce using rule 85 (expression -> expression TIMES expression .)
    XOR             reduce using rule 85 (expression -> expression TIMES expression .)
    DO              reduce using rule 85 (expression -> expression TIMES expression .)
    END             reduce using rule 85 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 85 (expression -> expression TIMES expression .)
    UNTIL           reduce using rule 85 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 85 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 85 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 85 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 85 (expression -> expression TIMES expression .)
    TO              reduce using rule 85 (expression -> expression TIMES expression .)
    DOWNTO          reduce using rule 85 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 121 ]
  ! TIMES           [ shift and go to state 122 ]
  ! DIVIDE          [ shift and go to state 123 ]
  ! DIVIDE_INT      [ shift and go to state 124 ]
  ! MODULO          [ shift and go to state 125 ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 161

    (86) expression -> expression DIVIDE expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 86 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 86 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 86 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 86 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 86 (expression -> expression DIVIDE expression .)
    DIVIDE_INT      reduce using rule 86 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 86 (expression -> expression DIVIDE expression .)
    EQUAL           reduce using rule 86 (expression -> expression DIVIDE expression .)
    NEQUAL          reduce using rule 86 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 86 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 86 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 86 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 86 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 86 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 86 (expression -> expression DIVIDE expression .)
    XOR             reduce using rule 86 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 86 (expression -> expression DIVIDE expression .)
    END             reduce using rule 86 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 86 (expression -> expression DIVIDE expression .)
    UNTIL           reduce using rule 86 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 86 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 86 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 86 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 86 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 86 (expression -> expression DIVIDE expression .)
    DOWNTO          reduce using rule 86 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 121 ]
  ! TIMES           [ shift and go to state 122 ]
  ! DIVIDE          [ shift and go to state 123 ]
  ! DIVIDE_INT      [ shift and go to state 124 ]
  ! MODULO          [ shift and go to state 125 ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 162

    (87) expression -> expression DIVIDE_INT expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    PLUS            reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    MINUS           reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    TIMES           reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    DIVIDE          reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    DIVIDE_INT      reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    MODULO          reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    EQUAL           reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    NEQUAL          reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    LT              reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    GT              reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    LE              reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    GE              reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    AND             reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    OR              reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    XOR             reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    DO              reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    END             reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    SEMICOLON       reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    UNTIL           reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    ELSE            reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    RBRACKET        reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    COMMA           reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    RPAREN          reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    TO              reduce using rule 87 (expression -> expression DIVIDE_INT expression .)
    DOWNTO          reduce using rule 87 (expression -> expression DIVIDE_INT expression .)

  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 121 ]
  ! TIMES           [ shift and go to state 122 ]
  ! DIVIDE          [ shift and go to state 123 ]
  ! DIVIDE_INT      [ shift and go to state 124 ]
  ! MODULO          [ shift and go to state 125 ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 163

    (88) expression -> expression MODULO expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 88 (expression -> expression MODULO expression .)
    PLUS            reduce using rule 88 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 88 (expression -> expression MODULO expression .)
    TIMES           reduce using rule 88 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 88 (expression -> expression MODULO expression .)
    DIVIDE_INT      reduce using rule 88 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 88 (expression -> expression MODULO expression .)
    EQUAL           reduce using rule 88 (expression -> expression MODULO expression .)
    NEQUAL          reduce using rule 88 (expression -> expression MODULO expression .)
    LT              reduce using rule 88 (expression -> expression MODULO expression .)
    GT              reduce using rule 88 (expression -> expression MODULO expression .)
    LE              reduce using rule 88 (expression -> expression MODULO expression .)
    GE              reduce using rule 88 (expression -> expression MODULO expression .)
    AND             reduce using rule 88 (expression -> expression MODULO expression .)
    OR              reduce using rule 88 (expression -> expression MODULO expression .)
    XOR             reduce using rule 88 (expression -> expression MODULO expression .)
    DO              reduce using rule 88 (expression -> expression MODULO expression .)
    END             reduce using rule 88 (expression -> expression MODULO expression .)
    SEMICOLON       reduce using rule 88 (expression -> expression MODULO expression .)
    UNTIL           reduce using rule 88 (expression -> expression MODULO expression .)
    ELSE            reduce using rule 88 (expression -> expression MODULO expression .)
    RBRACKET        reduce using rule 88 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 88 (expression -> expression MODULO expression .)
    RPAREN          reduce using rule 88 (expression -> expression MODULO expression .)
    TO              reduce using rule 88 (expression -> expression MODULO expression .)
    DOWNTO          reduce using rule 88 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 121 ]
  ! TIMES           [ shift and go to state 122 ]
  ! DIVIDE          [ shift and go to state 123 ]
  ! DIVIDE_INT      [ shift and go to state 124 ]
  ! MODULO          [ shift and go to state 125 ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 164

    (89) expression -> expression EQUAL expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 89 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 89 (expression -> expression EQUAL expression .)
    NEQUAL          reduce using rule 89 (expression -> expression EQUAL expression .)
    LT              reduce using rule 89 (expression -> expression EQUAL expression .)
    GT              reduce using rule 89 (expression -> expression EQUAL expression .)
    LE              reduce using rule 89 (expression -> expression EQUAL expression .)
    GE              reduce using rule 89 (expression -> expression EQUAL expression .)
    AND             reduce using rule 89 (expression -> expression EQUAL expression .)
    OR              reduce using rule 89 (expression -> expression EQUAL expression .)
    XOR             reduce using rule 89 (expression -> expression EQUAL expression .)
    DO              reduce using rule 89 (expression -> expression EQUAL expression .)
    END             reduce using rule 89 (expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 89 (expression -> expression EQUAL expression .)
    UNTIL           reduce using rule 89 (expression -> expression EQUAL expression .)
    ELSE            reduce using rule 89 (expression -> expression EQUAL expression .)
    RBRACKET        reduce using rule 89 (expression -> expression EQUAL expression .)
    COMMA           reduce using rule 89 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 89 (expression -> expression EQUAL expression .)
    TO              reduce using rule 89 (expression -> expression EQUAL expression .)
    DOWNTO          reduce using rule 89 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! PLUS            [ reduce using rule 89 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 89 (expression -> expression EQUAL expression .) ]
  ! TIMES           [ reduce using rule 89 (expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 89 (expression -> expression EQUAL expression .) ]
  ! DIVIDE_INT      [ reduce using rule 89 (expression -> expression EQUAL expression .) ]
  ! MODULO          [ reduce using rule 89 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 165

    (90) expression -> expression NEQUAL expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 90 (expression -> expression NEQUAL expression .)
    EQUAL           reduce using rule 90 (expression -> expression NEQUAL expression .)
    NEQUAL          reduce using rule 90 (expression -> expression NEQUAL expression .)
    LT              reduce using rule 90 (expression -> expression NEQUAL expression .)
    GT              reduce using rule 90 (expression -> expression NEQUAL expression .)
    LE              reduce using rule 90 (expression -> expression NEQUAL expression .)
    GE              reduce using rule 90 (expression -> expression NEQUAL expression .)
    AND             reduce using rule 90 (expression -> expression NEQUAL expression .)
    OR              reduce using rule 90 (expression -> expression NEQUAL expression .)
    XOR             reduce using rule 90 (expression -> expression NEQUAL expression .)
    DO              reduce using rule 90 (expression -> expression NEQUAL expression .)
    END             reduce using rule 90 (expression -> expression NEQUAL expression .)
    SEMICOLON       reduce using rule 90 (expression -> expression NEQUAL expression .)
    UNTIL           reduce using rule 90 (expression -> expression NEQUAL expression .)
    ELSE            reduce using rule 90 (expression -> expression NEQUAL expression .)
    RBRACKET        reduce using rule 90 (expression -> expression NEQUAL expression .)
    COMMA           reduce using rule 90 (expression -> expression NEQUAL expression .)
    RPAREN          reduce using rule 90 (expression -> expression NEQUAL expression .)
    TO              reduce using rule 90 (expression -> expression NEQUAL expression .)
    DOWNTO          reduce using rule 90 (expression -> expression NEQUAL expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! PLUS            [ reduce using rule 90 (expression -> expression NEQUAL expression .) ]
  ! MINUS           [ reduce using rule 90 (expression -> expression NEQUAL expression .) ]
  ! TIMES           [ reduce using rule 90 (expression -> expression NEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 90 (expression -> expression NEQUAL expression .) ]
  ! DIVIDE_INT      [ reduce using rule 90 (expression -> expression NEQUAL expression .) ]
  ! MODULO          [ reduce using rule 90 (expression -> expression NEQUAL expression .) ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 166

    (91) expression -> expression LT expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 91 (expression -> expression LT expression .)
    EQUAL           reduce using rule 91 (expression -> expression LT expression .)
    NEQUAL          reduce using rule 91 (expression -> expression LT expression .)
    LT              reduce using rule 91 (expression -> expression LT expression .)
    GT              reduce using rule 91 (expression -> expression LT expression .)
    LE              reduce using rule 91 (expression -> expression LT expression .)
    GE              reduce using rule 91 (expression -> expression LT expression .)
    AND             reduce using rule 91 (expression -> expression LT expression .)
    OR              reduce using rule 91 (expression -> expression LT expression .)
    XOR             reduce using rule 91 (expression -> expression LT expression .)
    DO              reduce using rule 91 (expression -> expression LT expression .)
    END             reduce using rule 91 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 91 (expression -> expression LT expression .)
    UNTIL           reduce using rule 91 (expression -> expression LT expression .)
    ELSE            reduce using rule 91 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 91 (expression -> expression LT expression .)
    COMMA           reduce using rule 91 (expression -> expression LT expression .)
    RPAREN          reduce using rule 91 (expression -> expression LT expression .)
    TO              reduce using rule 91 (expression -> expression LT expression .)
    DOWNTO          reduce using rule 91 (expression -> expression LT expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! PLUS            [ reduce using rule 91 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 91 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 91 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 91 (expression -> expression LT expression .) ]
  ! DIVIDE_INT      [ reduce using rule 91 (expression -> expression LT expression .) ]
  ! MODULO          [ reduce using rule 91 (expression -> expression LT expression .) ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 167

    (92) expression -> expression GT expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 92 (expression -> expression GT expression .)
    EQUAL           reduce using rule 92 (expression -> expression GT expression .)
    NEQUAL          reduce using rule 92 (expression -> expression GT expression .)
    LT              reduce using rule 92 (expression -> expression GT expression .)
    GT              reduce using rule 92 (expression -> expression GT expression .)
    LE              reduce using rule 92 (expression -> expression GT expression .)
    GE              reduce using rule 92 (expression -> expression GT expression .)
    AND             reduce using rule 92 (expression -> expression GT expression .)
    OR              reduce using rule 92 (expression -> expression GT expression .)
    XOR             reduce using rule 92 (expression -> expression GT expression .)
    DO              reduce using rule 92 (expression -> expression GT expression .)
    END             reduce using rule 92 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 92 (expression -> expression GT expression .)
    UNTIL           reduce using rule 92 (expression -> expression GT expression .)
    ELSE            reduce using rule 92 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 92 (expression -> expression GT expression .)
    COMMA           reduce using rule 92 (expression -> expression GT expression .)
    RPAREN          reduce using rule 92 (expression -> expression GT expression .)
    TO              reduce using rule 92 (expression -> expression GT expression .)
    DOWNTO          reduce using rule 92 (expression -> expression GT expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! PLUS            [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! DIVIDE_INT      [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! MODULO          [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 168

    (93) expression -> expression LE expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 93 (expression -> expression LE expression .)
    EQUAL           reduce using rule 93 (expression -> expression LE expression .)
    NEQUAL          reduce using rule 93 (expression -> expression LE expression .)
    LT              reduce using rule 93 (expression -> expression LE expression .)
    GT              reduce using rule 93 (expression -> expression LE expression .)
    LE              reduce using rule 93 (expression -> expression LE expression .)
    GE              reduce using rule 93 (expression -> expression LE expression .)
    AND             reduce using rule 93 (expression -> expression LE expression .)
    OR              reduce using rule 93 (expression -> expression LE expression .)
    XOR             reduce using rule 93 (expression -> expression LE expression .)
    DO              reduce using rule 93 (expression -> expression LE expression .)
    END             reduce using rule 93 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 93 (expression -> expression LE expression .)
    UNTIL           reduce using rule 93 (expression -> expression LE expression .)
    ELSE            reduce using rule 93 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 93 (expression -> expression LE expression .)
    COMMA           reduce using rule 93 (expression -> expression LE expression .)
    RPAREN          reduce using rule 93 (expression -> expression LE expression .)
    TO              reduce using rule 93 (expression -> expression LE expression .)
    DOWNTO          reduce using rule 93 (expression -> expression LE expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! PLUS            [ reduce using rule 93 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 93 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 93 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 93 (expression -> expression LE expression .) ]
  ! DIVIDE_INT      [ reduce using rule 93 (expression -> expression LE expression .) ]
  ! MODULO          [ reduce using rule 93 (expression -> expression LE expression .) ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 169

    (94) expression -> expression GE expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 94 (expression -> expression GE expression .)
    EQUAL           reduce using rule 94 (expression -> expression GE expression .)
    NEQUAL          reduce using rule 94 (expression -> expression GE expression .)
    LT              reduce using rule 94 (expression -> expression GE expression .)
    GT              reduce using rule 94 (expression -> expression GE expression .)
    LE              reduce using rule 94 (expression -> expression GE expression .)
    GE              reduce using rule 94 (expression -> expression GE expression .)
    AND             reduce using rule 94 (expression -> expression GE expression .)
    OR              reduce using rule 94 (expression -> expression GE expression .)
    XOR             reduce using rule 94 (expression -> expression GE expression .)
    DO              reduce using rule 94 (expression -> expression GE expression .)
    END             reduce using rule 94 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 94 (expression -> expression GE expression .)
    UNTIL           reduce using rule 94 (expression -> expression GE expression .)
    ELSE            reduce using rule 94 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 94 (expression -> expression GE expression .)
    COMMA           reduce using rule 94 (expression -> expression GE expression .)
    RPAREN          reduce using rule 94 (expression -> expression GE expression .)
    TO              reduce using rule 94 (expression -> expression GE expression .)
    DOWNTO          reduce using rule 94 (expression -> expression GE expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125

  ! PLUS            [ reduce using rule 94 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 94 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 94 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 94 (expression -> expression GE expression .) ]
  ! DIVIDE_INT      [ reduce using rule 94 (expression -> expression GE expression .) ]
  ! MODULO          [ reduce using rule 94 (expression -> expression GE expression .) ]
  ! EQUAL           [ shift and go to state 126 ]
  ! NEQUAL          [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 170

    (95) expression -> expression AND expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 95 (expression -> expression AND expression .)
    AND             reduce using rule 95 (expression -> expression AND expression .)
    OR              reduce using rule 95 (expression -> expression AND expression .)
    XOR             reduce using rule 95 (expression -> expression AND expression .)
    DO              reduce using rule 95 (expression -> expression AND expression .)
    END             reduce using rule 95 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 95 (expression -> expression AND expression .)
    UNTIL           reduce using rule 95 (expression -> expression AND expression .)
    ELSE            reduce using rule 95 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 95 (expression -> expression AND expression .)
    COMMA           reduce using rule 95 (expression -> expression AND expression .)
    RPAREN          reduce using rule 95 (expression -> expression AND expression .)
    TO              reduce using rule 95 (expression -> expression AND expression .)
    DOWNTO          reduce using rule 95 (expression -> expression AND expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131

  ! PLUS            [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! DIVIDE_INT      [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! NEQUAL          [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 95 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 132 ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 171

    (96) expression -> expression OR expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 96 (expression -> expression OR expression .)
    OR              reduce using rule 96 (expression -> expression OR expression .)
    XOR             reduce using rule 96 (expression -> expression OR expression .)
    DO              reduce using rule 96 (expression -> expression OR expression .)
    END             reduce using rule 96 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 96 (expression -> expression OR expression .)
    UNTIL           reduce using rule 96 (expression -> expression OR expression .)
    ELSE            reduce using rule 96 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 96 (expression -> expression OR expression .)
    COMMA           reduce using rule 96 (expression -> expression OR expression .)
    RPAREN          reduce using rule 96 (expression -> expression OR expression .)
    TO              reduce using rule 96 (expression -> expression OR expression .)
    DOWNTO          reduce using rule 96 (expression -> expression OR expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132

  ! PLUS            [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! DIVIDE_INT      [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! NEQUAL          [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 96 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 172

    (97) expression -> expression XOR expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    THEN            reduce using rule 97 (expression -> expression XOR expression .)
    OR              reduce using rule 97 (expression -> expression XOR expression .)
    XOR             reduce using rule 97 (expression -> expression XOR expression .)
    DO              reduce using rule 97 (expression -> expression XOR expression .)
    END             reduce using rule 97 (expression -> expression XOR expression .)
    SEMICOLON       reduce using rule 97 (expression -> expression XOR expression .)
    UNTIL           reduce using rule 97 (expression -> expression XOR expression .)
    ELSE            reduce using rule 97 (expression -> expression XOR expression .)
    RBRACKET        reduce using rule 97 (expression -> expression XOR expression .)
    COMMA           reduce using rule 97 (expression -> expression XOR expression .)
    RPAREN          reduce using rule 97 (expression -> expression XOR expression .)
    TO              reduce using rule 97 (expression -> expression XOR expression .)
    DOWNTO          reduce using rule 97 (expression -> expression XOR expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132

  ! PLUS            [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! MINUS           [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! TIMES           [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! DIVIDE          [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! DIVIDE_INT      [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! MODULO          [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! EQUAL           [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! NEQUAL          [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! LT              [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! GT              [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! LE              [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! GE              [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! AND             [ reduce using rule 97 (expression -> expression XOR expression .) ]
  ! OR              [ shift and go to state 133 ]
  ! XOR             [ shift and go to state 134 ]


state 173

    (99) expression -> LPAREN expression RPAREN .

    THEN            reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    DIVIDE_INT      reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    NEQUAL          reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 99 (expression -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 99 (expression -> LPAREN expression RPAREN .)


state 174

    (73) while_statement -> WHILE expression DO statement .

    END             reduce using rule 73 (while_statement -> WHILE expression DO statement .)
    SEMICOLON       reduce using rule 73 (while_statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 73 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 73 (while_statement -> WHILE expression DO statement .)


state 175

    (74) repeat_statement -> REPEAT statement_list UNTIL expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    END             reduce using rule 74 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    SEMICOLON       reduce using rule 74 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    UNTIL           reduce using rule 74 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    ELSE            reduce using rule 74 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134


state 176

    (75) for_statement -> FOR ID ASSIGN expression . TO expression DO statement
    (76) for_statement -> FOR ID ASSIGN expression . DOWNTO expression DO statement
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    TO              shift and go to state 194
    DOWNTO          shift and go to state 195
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134


state 177

    (69) record_assignment -> ID DOT ID ASSIGN . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 196
    variable                       shift and go to state 71

state 178

    (78) procedure_call -> ID LPAREN args RPAREN .

    END             reduce using rule 78 (procedure_call -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 78 (procedure_call -> ID LPAREN args RPAREN .)
    UNTIL           reduce using rule 78 (procedure_call -> ID LPAREN args RPAREN .)
    ELSE            reduce using rule 78 (procedure_call -> ID LPAREN args RPAREN .)


state 179

    (80) args -> args COMMA . expression
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 197
    variable                       shift and go to state 71

state 180

    (36) array_type -> ARRAY LBRACKET index_type . RBRACKET OF type

    RBRACKET        shift and go to state 198


state 181

    (37) index_type -> simple_type .

    RBRACKET        reduce using rule 37 (index_type -> simple_type .)


state 182

    (38) record_type -> RECORD record_fields END .

    SEMICOLON       reduce using rule 38 (record_type -> RECORD record_fields END .)
    RPAREN          reduce using rule 38 (record_type -> RECORD record_fields END .)


state 183

    (40) field_list -> field_list field_declaration . SEMICOLON

    SEMICOLON       shift and go to state 199


state 184

    (41) field_list -> field_declaration SEMICOLON .

    ID              reduce using rule 41 (field_list -> field_declaration SEMICOLON .)
    END             reduce using rule 41 (field_list -> field_declaration SEMICOLON .)


state 185

    (42) field_declaration -> id_list COLON . type
    (30) type -> . simple_type
    (31) type -> . array_type
    (32) type -> . record_type
    (33) simple_type -> . subrange_type
    (34) simple_type -> . type_identifier
    (36) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (38) record_type -> . RECORD record_fields END
    (35) subrange_type -> . constant DOTDOT constant
    (43) type_identifier -> . ID
    (44) type_identifier -> . predefined_type
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (45) predefined_type -> . INTEGER
    (46) predefined_type -> . REAL
    (47) predefined_type -> . BOOLEAN
    (48) predefined_type -> . STRING
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    ARRAY           shift and go to state 87
    RECORD          shift and go to state 88
    ID              shift and go to state 90
    STRING_LITERAL  shift and go to state 94
    INTEGER         shift and go to state 96
    REAL            shift and go to state 97
    BOOLEAN         shift and go to state 98
    STRING          shift and go to state 99
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103

    type                           shift and go to state 200
    simple_type                    shift and go to state 82
    array_type                     shift and go to state 83
    record_type                    shift and go to state 84
    subrange_type                  shift and go to state 85
    type_identifier                shift and go to state 86
    constant                       shift and go to state 89
    predefined_type                shift and go to state 91
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 186

    (35) subrange_type -> constant DOTDOT constant .

    SEMICOLON       reduce using rule 35 (subrange_type -> constant DOTDOT constant .)
    RBRACKET        reduce using rule 35 (subrange_type -> constant DOTDOT constant .)
    RPAREN          reduce using rule 35 (subrange_type -> constant DOTDOT constant .)


state 187

    (25) param -> ID COLON type .

    RPAREN          reduce using rule 25 (param -> ID COLON type .)
    SEMICOLON       reduce using rule 25 (param -> ID COLON type .)


state 188

    (21) procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON . block
    (2) block -> . declarations compound_statement
    (3) declarations -> . declaration_list
    (4) declarations -> . empty
    (5) declaration_list -> . declaration_list declaration
    (6) declaration_list -> . declaration
    (113) empty -> .
    (7) declaration -> . var_declaration
    (8) declaration -> . const_declaration
    (9) declaration -> . type_declaration
    (10) declaration -> . procedure_declaration
    (11) var_declaration -> . VAR var_declaration_list
    (17) const_declaration -> . CONST const_list
    (26) type_declaration -> . TYPE type_list
    (21) procedure_declaration -> . PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block

    BEGIN           reduce using rule 113 (empty -> .)
    VAR             shift and go to state 14
    CONST           shift and go to state 15
    TYPE            shift and go to state 16
    PROCEDURE       shift and go to state 17

    block                          shift and go to state 201
    declarations                   shift and go to state 6
    declaration_list               shift and go to state 7
    empty                          shift and go to state 8
    declaration                    shift and go to state 9
    var_declaration                shift and go to state 10
    const_declaration              shift and go to state 11
    type_declaration               shift and go to state 12
    procedure_declaration          shift and go to state 13

state 189

    (22) param_list -> param_list SEMICOLON param .

    RPAREN          reduce using rule 22 (param_list -> param_list SEMICOLON param .)
    SEMICOLON       reduce using rule 22 (param_list -> param_list SEMICOLON param .)


state 190

    (68) expression_list -> expression_list COMMA expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    RBRACKET        reduce using rule 68 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 68 (expression_list -> expression_list COMMA expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134


state 191

    (70) if_statement -> IF expression THEN statement else_part .

    END             reduce using rule 70 (if_statement -> IF expression THEN statement else_part .)
    SEMICOLON       reduce using rule 70 (if_statement -> IF expression THEN statement else_part .)
    UNTIL           reduce using rule 70 (if_statement -> IF expression THEN statement else_part .)
    ELSE            reduce using rule 70 (if_statement -> IF expression THEN statement else_part .)


state 192

    (71) else_part -> ELSE . statement
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    ELSE            reduce using rule 113 (empty -> .)
    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    UNTIL           reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52

    statement                      shift and go to state 202
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 193

    (72) else_part -> empty .

    ELSE            reduce using rule 72 (else_part -> empty .)
    END             reduce using rule 72 (else_part -> empty .)
    SEMICOLON       reduce using rule 72 (else_part -> empty .)
    UNTIL           reduce using rule 72 (else_part -> empty .)


state 194

    (75) for_statement -> FOR ID ASSIGN expression TO . expression DO statement
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 203
    variable                       shift and go to state 71

state 195

    (76) for_statement -> FOR ID ASSIGN expression DOWNTO . expression DO statement
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression DIVIDE_INT expression
    (88) expression -> . expression MODULO expression
    (89) expression -> . expression EQUAL expression
    (90) expression -> . expression NEQUAL expression
    (91) expression -> . expression LT expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression LE expression
    (94) expression -> . expression GE expression
    (95) expression -> . expression AND expression
    (96) expression -> . expression OR expression
    (97) expression -> . expression XOR expression
    (98) expression -> . NOT expression
    (99) expression -> . LPAREN expression RPAREN
    (100) expression -> . variable
    (101) expression -> . INTEGER_CONST
    (102) expression -> . REAL_CONST
    (103) expression -> . STRING_LITERAL
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 69
    LPAREN          shift and go to state 70
    INTEGER_CONST   shift and go to state 72
    REAL_CONST      shift and go to state 73
    STRING_LITERAL  shift and go to state 74
    ID              shift and go to state 75

    expression                     shift and go to state 204
    variable                       shift and go to state 71

state 196

    (69) record_assignment -> ID DOT ID ASSIGN expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    END             reduce using rule 69 (record_assignment -> ID DOT ID ASSIGN expression .)
    SEMICOLON       reduce using rule 69 (record_assignment -> ID DOT ID ASSIGN expression .)
    UNTIL           reduce using rule 69 (record_assignment -> ID DOT ID ASSIGN expression .)
    ELSE            reduce using rule 69 (record_assignment -> ID DOT ID ASSIGN expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134


state 197

    (80) args -> args COMMA expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    RPAREN          reduce using rule 80 (args -> args COMMA expression .)
    COMMA           reduce using rule 80 (args -> args COMMA expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134


state 198

    (36) array_type -> ARRAY LBRACKET index_type RBRACKET . OF type

    OF              shift and go to state 205


state 199

    (40) field_list -> field_list field_declaration SEMICOLON .

    ID              reduce using rule 40 (field_list -> field_list field_declaration SEMICOLON .)
    END             reduce using rule 40 (field_list -> field_list field_declaration SEMICOLON .)


state 200

    (42) field_declaration -> id_list COLON type .

    SEMICOLON       reduce using rule 42 (field_declaration -> id_list COLON type .)


state 201

    (21) procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .

    VAR             reduce using rule 21 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .)
    CONST           reduce using rule 21 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .)
    TYPE            reduce using rule 21 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .)
    PROCEDURE       reduce using rule 21 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .)
    BEGIN           reduce using rule 21 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .)


state 202

    (71) else_part -> ELSE statement .

    ELSE            reduce using rule 71 (else_part -> ELSE statement .)
    END             reduce using rule 71 (else_part -> ELSE statement .)
    SEMICOLON       reduce using rule 71 (else_part -> ELSE statement .)
    UNTIL           reduce using rule 71 (else_part -> ELSE statement .)


state 203

    (75) for_statement -> FOR ID ASSIGN expression TO expression . DO statement
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    DO              shift and go to state 206
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134


state 204

    (76) for_statement -> FOR ID ASSIGN expression DOWNTO expression . DO statement
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . DIVIDE_INT expression
    (88) expression -> expression . MODULO expression
    (89) expression -> expression . EQUAL expression
    (90) expression -> expression . NEQUAL expression
    (91) expression -> expression . LT expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . LE expression
    (94) expression -> expression . GE expression
    (95) expression -> expression . AND expression
    (96) expression -> expression . OR expression
    (97) expression -> expression . XOR expression

    DO              shift and go to state 207
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123
    DIVIDE_INT      shift and go to state 124
    MODULO          shift and go to state 125
    EQUAL           shift and go to state 126
    NEQUAL          shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    AND             shift and go to state 132
    OR              shift and go to state 133
    XOR             shift and go to state 134


state 205

    (36) array_type -> ARRAY LBRACKET index_type RBRACKET OF . type
    (30) type -> . simple_type
    (31) type -> . array_type
    (32) type -> . record_type
    (33) simple_type -> . subrange_type
    (34) simple_type -> . type_identifier
    (36) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (38) record_type -> . RECORD record_fields END
    (35) subrange_type -> . constant DOTDOT constant
    (43) type_identifier -> . ID
    (44) type_identifier -> . predefined_type
    (104) constant -> . UNSIGNED_NUMBER
    (105) constant -> . sign UNSIGNED_NUMBER
    (106) constant -> . STRING_LITERAL
    (107) constant -> . constant_identifier
    (45) predefined_type -> . INTEGER
    (46) predefined_type -> . REAL
    (47) predefined_type -> . BOOLEAN
    (48) predefined_type -> . STRING
    (108) UNSIGNED_NUMBER -> . INTEGER_CONST
    (109) UNSIGNED_NUMBER -> . REAL_CONST
    (110) sign -> . PLUS
    (111) sign -> . MINUS
    (112) constant_identifier -> . ID

    ARRAY           shift and go to state 87
    RECORD          shift and go to state 88
    ID              shift and go to state 90
    STRING_LITERAL  shift and go to state 94
    INTEGER         shift and go to state 96
    REAL            shift and go to state 97
    BOOLEAN         shift and go to state 98
    STRING          shift and go to state 99
    INTEGER_CONST   shift and go to state 100
    REAL_CONST      shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103

    type                           shift and go to state 208
    simple_type                    shift and go to state 82
    array_type                     shift and go to state 83
    record_type                    shift and go to state 84
    subrange_type                  shift and go to state 85
    type_identifier                shift and go to state 86
    constant                       shift and go to state 89
    predefined_type                shift and go to state 91
    UNSIGNED_NUMBER                shift and go to state 92
    sign                           shift and go to state 93
    constant_identifier            shift and go to state 95

state 206

    (75) for_statement -> FOR ID ASSIGN expression TO expression DO . statement
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    ELSE            reduce using rule 113 (empty -> .)
    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    UNTIL           reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52

    statement                      shift and go to state 209
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 207

    (76) for_statement -> FOR ID ASSIGN expression DOWNTO expression DO . statement
    (52) statement -> . simple_statement
    (53) statement -> . structured_statement
    (54) simple_statement -> . assignment_statement
    (55) simple_statement -> . procedure_call_statement
    (56) simple_statement -> . empty
    (57) structured_statement -> . compound_statement
    (58) structured_statement -> . if_statement
    (59) structured_statement -> . while_statement
    (60) structured_statement -> . repeat_statement
    (61) structured_statement -> . for_statement
    (62) structured_statement -> . record_assignment
    (63) assignment_statement -> . variable ASSIGN expression
    (77) procedure_call_statement -> . procedure_call
    (113) empty -> .
    (49) compound_statement -> . BEGIN statement_list END
    (70) if_statement -> . IF expression THEN statement else_part
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement_list UNTIL expression
    (75) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (76) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (69) record_assignment -> . ID DOT ID ASSIGN expression
    (64) variable -> . ID
    (65) variable -> . variable DOT ID
    (66) variable -> . variable LBRACKET expression_list RBRACKET
    (78) procedure_call -> . ID LPAREN args RPAREN
    (79) procedure_call -> . ID

    ELSE            reduce using rule 113 (empty -> .)
    END             reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    UNTIL           reduce using rule 113 (empty -> .)
    BEGIN           shift and go to state 20
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51
    ID              shift and go to state 52

    statement                      shift and go to state 210
    simple_statement               shift and go to state 35
    structured_statement           shift and go to state 36
    assignment_statement           shift and go to state 37
    procedure_call_statement       shift and go to state 38
    empty                          shift and go to state 39
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    record_assignment              shift and go to state 45
    variable                       shift and go to state 46
    procedure_call                 shift and go to state 47

state 208

    (36) array_type -> ARRAY LBRACKET index_type RBRACKET OF type .

    SEMICOLON       reduce using rule 36 (array_type -> ARRAY LBRACKET index_type RBRACKET OF type .)
    RPAREN          reduce using rule 36 (array_type -> ARRAY LBRACKET index_type RBRACKET OF type .)


state 209

    (75) for_statement -> FOR ID ASSIGN expression TO expression DO statement .

    END             reduce using rule 75 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    SEMICOLON       reduce using rule 75 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    UNTIL           reduce using rule 75 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 75 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)


state 210

    (76) for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .

    END             reduce using rule 76 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    SEMICOLON       reduce using rule 76 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    UNTIL           reduce using rule 76 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 76 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 52 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 157 resolved as shift
