Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSOLUTE
    ASM
    CASE
    CONSTRUCTOR
    DESTRUCTOR
    DIV
    DOTDOT
    DOWNTO
    EXTERNAL
    FILE
    FORWARD
    FUNCTION
    GOTO
    IMPLEMENTATION
    IN
    INLINE
    INTERFACE
    INTERRUPT
    LABEL
    MOD
    NOT
    OBJECT
    OFF
    PACKED
    PRIVATE
    SHL
    SHR
    UNIT
    USES
    VIRTUAL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON block DOT
Rule 2     block -> declarations BEGIN statement_list END
Rule 3     declarations -> declarations declaration
Rule 4     declarations -> empty
Rule 5     declaration -> var_declaration
Rule 6     declaration -> const_declaration
Rule 7     declaration -> procedure_declaration
Rule 8     declaration -> type_declaration
Rule 9     var_declaration -> VAR var_decl_list SEMICOLON
Rule 10    var_decl_list -> var_decl_list var_decl
Rule 11    var_decl_list -> var_decl
Rule 12    var_decl -> id_list COLON type SEMICOLON
Rule 13    id_list -> id_list COMMA ID
Rule 14    id_list -> ID
Rule 15    const_declaration -> CONST const_list SEMICOLON
Rule 16    const_list -> const_list COMMA ID EQUAL constant
Rule 17    const_list -> ID EQUAL constant
Rule 18    procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block
Rule 19    type_declaration -> TYPE ID EQUAL type SEMICOLON
Rule 20    param_list -> param_list SEMICOLON param
Rule 21    param_list -> param
Rule 22    param_list -> empty
Rule 23    param -> ID COLON type
Rule 24    type -> INTEGER
Rule 25    type -> REAL
Rule 26    type -> BOOLEAN
Rule 27    type -> STRING
Rule 28    type -> ARRAY LBRACKET INTEGER_CONST RBRACKET OF type
Rule 29    type -> RECORD record_fields END
Rule 30    type -> SET LBRACKET type RBRACKET
Rule 31    record_fields -> record_fields var_declaration
Rule 32    record_fields -> var_declaration
Rule 33    statement_list -> statement_list statement
Rule 34    statement_list -> statement
Rule 35    statement -> assignment_statement
Rule 36    statement -> if_statement
Rule 37    statement -> while_statement
Rule 38    statement -> repeat_statement
Rule 39    statement -> for_statement
Rule 40    statement -> procedure_call
Rule 41    statement -> record_assignment
Rule 42    statement -> empty
Rule 43    assignment_statement -> ID ASSIGN expression SEMICOLON
Rule 44    record_assignment -> ID DOT ID ASSIGN expression SEMICOLON
Rule 45    if_statement -> IF expression THEN statement else_part
Rule 46    else_part -> ELSE statement
Rule 47    else_part -> empty
Rule 48    while_statement -> WHILE expression DO statement
Rule 49    repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON
Rule 50    for_statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 51    procedure_call -> ID LPAREN args RPAREN SEMICOLON
Rule 52    args -> args COMMA expression
Rule 53    args -> expression
Rule 54    args -> empty
Rule 55    expression -> expression PLUS expression
Rule 56    expression -> expression MINUS expression
Rule 57    expression -> expression TIMES expression
Rule 58    expression -> expression DIVIDE expression
Rule 59    expression -> expression DIVIDE_INT expression
Rule 60    expression -> expression MODULO expression
Rule 61    expression -> expression EQUAL expression
Rule 62    expression -> expression NEQUAL expression
Rule 63    expression -> expression LT expression
Rule 64    expression -> expression GT expression
Rule 65    expression -> expression LE expression
Rule 66    expression -> expression GE expression
Rule 67    expression -> expression AND expression
Rule 68    expression -> expression OR expression
Rule 69    expression -> expression XOR expression
Rule 70    expression -> LPAREN expression RPAREN
Rule 71    expression -> INTEGER_CONST
Rule 72    expression -> REAL_CONST
Rule 73    expression -> STRING_LITERAL
Rule 74    expression -> ID
Rule 75    constant -> INTEGER_CONST
Rule 76    constant -> REAL_CONST
Rule 77    constant -> STRING_LITERAL
Rule 78    constant -> NIL
Rule 79    empty -> <empty>

Terminals, with rules where they appear

ABSOLUTE             : 
AND                  : 67
ARRAY                : 28
ASM                  : 
ASSIGN               : 43 44 50
BEGIN                : 2
BOOLEAN              : 26
CASE                 : 
COLON                : 12 23
COMMA                : 13 16 52
CONST                : 15
CONSTRUCTOR          : 
DESTRUCTOR           : 
DIV                  : 
DIVIDE               : 58
DIVIDE_INT           : 59
DO                   : 48 50
DOT                  : 1 44
DOTDOT               : 
DOWNTO               : 
ELSE                 : 46
END                  : 2 29
EQUAL                : 16 17 19 61
EXTERNAL             : 
FILE                 : 
FOR                  : 50
FORWARD              : 
FUNCTION             : 
GE                   : 66
GOTO                 : 
GT                   : 64
ID                   : 1 13 14 16 17 18 19 23 43 44 44 50 51 74
IF                   : 45
IMPLEMENTATION       : 
IN                   : 
INLINE               : 
INTEGER              : 24
INTEGER_CONST        : 28 71 75
INTERFACE            : 
INTERRUPT            : 
LABEL                : 
LBRACKET             : 28 30
LE                   : 65
LPAREN               : 18 51 70
LT                   : 63
MINUS                : 56
MOD                  : 
MODULO               : 60
NEQUAL               : 62
NIL                  : 78
NOT                  : 
OBJECT               : 
OF                   : 28
OFF                  : 
OR                   : 68
PACKED               : 
PLUS                 : 55
PRIVATE              : 
PROCEDURE            : 18
PROGRAM              : 1
RBRACKET             : 28 30
REAL                 : 25
REAL_CONST           : 72 76
RECORD               : 29
REPEAT               : 49
RPAREN               : 18 51 70
SEMICOLON            : 1 9 12 15 18 19 20 43 44 49 51
SET                  : 30
SHL                  : 
SHR                  : 
STRING               : 27
STRING_LITERAL       : 73 77
THEN                 : 45
TIMES                : 57
TO                   : 50
TYPE                 : 19
UNIT                 : 
UNTIL                : 49
USES                 : 
VAR                  : 9
VIRTUAL              : 
WHILE                : 48
WITH                 : 
XOR                  : 69
error                : 

Nonterminals, with rules where they appear

args                 : 51 52
assignment_statement : 35
block                : 1 18
const_declaration    : 6
const_list           : 15 16
constant             : 16 17
declaration          : 3
declarations         : 2 3
else_part            : 45
empty                : 4 22 42 47 54
expression           : 43 44 45 48 49 50 50 52 53 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70
for_statement        : 39
id_list              : 12 13
if_statement         : 36
param                : 20 21
param_list           : 18 20
procedure_call       : 40
procedure_declaration : 7
program              : 0
record_assignment    : 41
record_fields        : 29 31
repeat_statement     : 38
statement            : 33 34 45 46 48 50
statement_list       : 2 33 49
type                 : 12 19 23 28 30
type_declaration     : 8
var_decl             : 10 11
var_decl_list        : 9 10
var_declaration      : 5 31 32
while_statement      : 37

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . block DOT
    (2) block -> . declarations BEGIN statement_list END
    (3) declarations -> . declarations declaration
    (4) declarations -> . empty
    (79) empty -> .

    BEGIN           reduce using rule 79 (empty -> .)
    VAR             reduce using rule 79 (empty -> .)
    CONST           reduce using rule 79 (empty -> .)
    PROCEDURE       reduce using rule 79 (empty -> .)
    TYPE            reduce using rule 79 (empty -> .)

    block                          shift and go to state 5
    declarations                   shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON block . DOT

    DOT             shift and go to state 8


state 6

    (2) block -> declarations . BEGIN statement_list END
    (3) declarations -> declarations . declaration
    (5) declaration -> . var_declaration
    (6) declaration -> . const_declaration
    (7) declaration -> . procedure_declaration
    (8) declaration -> . type_declaration
    (9) var_declaration -> . VAR var_decl_list SEMICOLON
    (15) const_declaration -> . CONST const_list SEMICOLON
    (18) procedure_declaration -> . PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block
    (19) type_declaration -> . TYPE ID EQUAL type SEMICOLON

    BEGIN           shift and go to state 9
    VAR             shift and go to state 15
    CONST           shift and go to state 16
    PROCEDURE       shift and go to state 17
    TYPE            shift and go to state 18

    declaration                    shift and go to state 10
    var_declaration                shift and go to state 11
    const_declaration              shift and go to state 12
    procedure_declaration          shift and go to state 13
    type_declaration               shift and go to state 14

state 7

    (4) declarations -> empty .

    BEGIN           reduce using rule 4 (declarations -> empty .)
    VAR             reduce using rule 4 (declarations -> empty .)
    CONST           reduce using rule 4 (declarations -> empty .)
    PROCEDURE       reduce using rule 4 (declarations -> empty .)
    TYPE            reduce using rule 4 (declarations -> empty .)


state 8

    (1) program -> PROGRAM ID SEMICOLON block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON block DOT .)


state 9

    (2) block -> declarations BEGIN . statement_list END
    (33) statement_list -> . statement_list statement
    (34) statement_list -> . statement
    (35) statement -> . assignment_statement
    (36) statement -> . if_statement
    (37) statement -> . while_statement
    (38) statement -> . repeat_statement
    (39) statement -> . for_statement
    (40) statement -> . procedure_call
    (41) statement -> . record_assignment
    (42) statement -> . empty
    (43) assignment_statement -> . ID ASSIGN expression SEMICOLON
    (45) if_statement -> . IF expression THEN statement else_part
    (48) while_statement -> . WHILE expression DO statement
    (49) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (50) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (51) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (44) record_assignment -> . ID DOT ID ASSIGN expression SEMICOLON
    (79) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ID              shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    END             reduce using rule 79 (empty -> .)

  ! ID              [ reduce using rule 79 (empty -> .) ]
  ! IF              [ reduce using rule 79 (empty -> .) ]
  ! WHILE           [ reduce using rule 79 (empty -> .) ]
  ! REPEAT          [ reduce using rule 79 (empty -> .) ]
  ! FOR             [ reduce using rule 79 (empty -> .) ]

    statement_list                 shift and go to state 19
    statement                      shift and go to state 20
    assignment_statement           shift and go to state 21
    if_statement                   shift and go to state 22
    while_statement                shift and go to state 23
    repeat_statement               shift and go to state 24
    for_statement                  shift and go to state 25
    procedure_call                 shift and go to state 26
    record_assignment              shift and go to state 27
    empty                          shift and go to state 28

state 10

    (3) declarations -> declarations declaration .

    BEGIN           reduce using rule 3 (declarations -> declarations declaration .)
    VAR             reduce using rule 3 (declarations -> declarations declaration .)
    CONST           reduce using rule 3 (declarations -> declarations declaration .)
    PROCEDURE       reduce using rule 3 (declarations -> declarations declaration .)
    TYPE            reduce using rule 3 (declarations -> declarations declaration .)


state 11

    (5) declaration -> var_declaration .

    BEGIN           reduce using rule 5 (declaration -> var_declaration .)
    VAR             reduce using rule 5 (declaration -> var_declaration .)
    CONST           reduce using rule 5 (declaration -> var_declaration .)
    PROCEDURE       reduce using rule 5 (declaration -> var_declaration .)
    TYPE            reduce using rule 5 (declaration -> var_declaration .)


state 12

    (6) declaration -> const_declaration .

    BEGIN           reduce using rule 6 (declaration -> const_declaration .)
    VAR             reduce using rule 6 (declaration -> const_declaration .)
    CONST           reduce using rule 6 (declaration -> const_declaration .)
    PROCEDURE       reduce using rule 6 (declaration -> const_declaration .)
    TYPE            reduce using rule 6 (declaration -> const_declaration .)


state 13

    (7) declaration -> procedure_declaration .

    BEGIN           reduce using rule 7 (declaration -> procedure_declaration .)
    VAR             reduce using rule 7 (declaration -> procedure_declaration .)
    CONST           reduce using rule 7 (declaration -> procedure_declaration .)
    PROCEDURE       reduce using rule 7 (declaration -> procedure_declaration .)
    TYPE            reduce using rule 7 (declaration -> procedure_declaration .)


state 14

    (8) declaration -> type_declaration .

    BEGIN           reduce using rule 8 (declaration -> type_declaration .)
    VAR             reduce using rule 8 (declaration -> type_declaration .)
    CONST           reduce using rule 8 (declaration -> type_declaration .)
    PROCEDURE       reduce using rule 8 (declaration -> type_declaration .)
    TYPE            reduce using rule 8 (declaration -> type_declaration .)


state 15

    (9) var_declaration -> VAR . var_decl_list SEMICOLON
    (10) var_decl_list -> . var_decl_list var_decl
    (11) var_decl_list -> . var_decl
    (12) var_decl -> . id_list COLON type SEMICOLON
    (13) id_list -> . id_list COMMA ID
    (14) id_list -> . ID

    ID              shift and go to state 37

    var_decl_list                  shift and go to state 34
    var_decl                       shift and go to state 35
    id_list                        shift and go to state 36

state 16

    (15) const_declaration -> CONST . const_list SEMICOLON
    (16) const_list -> . const_list COMMA ID EQUAL constant
    (17) const_list -> . ID EQUAL constant

    ID              shift and go to state 39

    const_list                     shift and go to state 38

state 17

    (18) procedure_declaration -> PROCEDURE . ID LPAREN param_list RPAREN SEMICOLON block

    ID              shift and go to state 40


state 18

    (19) type_declaration -> TYPE . ID EQUAL type SEMICOLON

    ID              shift and go to state 41


state 19

    (2) block -> declarations BEGIN statement_list . END
    (33) statement_list -> statement_list . statement
    (35) statement -> . assignment_statement
    (36) statement -> . if_statement
    (37) statement -> . while_statement
    (38) statement -> . repeat_statement
    (39) statement -> . for_statement
    (40) statement -> . procedure_call
    (41) statement -> . record_assignment
    (42) statement -> . empty
    (43) assignment_statement -> . ID ASSIGN expression SEMICOLON
    (45) if_statement -> . IF expression THEN statement else_part
    (48) while_statement -> . WHILE expression DO statement
    (49) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (50) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (51) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (44) record_assignment -> . ID DOT ID ASSIGN expression SEMICOLON
    (79) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    END             shift and go to state 42
    ID              shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33

  ! END             [ reduce using rule 79 (empty -> .) ]
  ! ID              [ reduce using rule 79 (empty -> .) ]
  ! IF              [ reduce using rule 79 (empty -> .) ]
  ! WHILE           [ reduce using rule 79 (empty -> .) ]
  ! REPEAT          [ reduce using rule 79 (empty -> .) ]
  ! FOR             [ reduce using rule 79 (empty -> .) ]

    statement                      shift and go to state 43
    assignment_statement           shift and go to state 21
    if_statement                   shift and go to state 22
    while_statement                shift and go to state 23
    repeat_statement               shift and go to state 24
    for_statement                  shift and go to state 25
    procedure_call                 shift and go to state 26
    record_assignment              shift and go to state 27
    empty                          shift and go to state 28

state 20

    (34) statement_list -> statement .

    END             reduce using rule 34 (statement_list -> statement .)
    ID              reduce using rule 34 (statement_list -> statement .)
    IF              reduce using rule 34 (statement_list -> statement .)
    WHILE           reduce using rule 34 (statement_list -> statement .)
    REPEAT          reduce using rule 34 (statement_list -> statement .)
    FOR             reduce using rule 34 (statement_list -> statement .)
    UNTIL           reduce using rule 34 (statement_list -> statement .)


state 21

    (35) statement -> assignment_statement .

    END             reduce using rule 35 (statement -> assignment_statement .)
    ID              reduce using rule 35 (statement -> assignment_statement .)
    IF              reduce using rule 35 (statement -> assignment_statement .)
    WHILE           reduce using rule 35 (statement -> assignment_statement .)
    REPEAT          reduce using rule 35 (statement -> assignment_statement .)
    FOR             reduce using rule 35 (statement -> assignment_statement .)
    UNTIL           reduce using rule 35 (statement -> assignment_statement .)
    ELSE            reduce using rule 35 (statement -> assignment_statement .)


state 22

    (36) statement -> if_statement .

    END             reduce using rule 36 (statement -> if_statement .)
    ID              reduce using rule 36 (statement -> if_statement .)
    IF              reduce using rule 36 (statement -> if_statement .)
    WHILE           reduce using rule 36 (statement -> if_statement .)
    REPEAT          reduce using rule 36 (statement -> if_statement .)
    FOR             reduce using rule 36 (statement -> if_statement .)
    UNTIL           reduce using rule 36 (statement -> if_statement .)
    ELSE            reduce using rule 36 (statement -> if_statement .)


state 23

    (37) statement -> while_statement .

    END             reduce using rule 37 (statement -> while_statement .)
    ID              reduce using rule 37 (statement -> while_statement .)
    IF              reduce using rule 37 (statement -> while_statement .)
    WHILE           reduce using rule 37 (statement -> while_statement .)
    REPEAT          reduce using rule 37 (statement -> while_statement .)
    FOR             reduce using rule 37 (statement -> while_statement .)
    UNTIL           reduce using rule 37 (statement -> while_statement .)
    ELSE            reduce using rule 37 (statement -> while_statement .)


state 24

    (38) statement -> repeat_statement .

    END             reduce using rule 38 (statement -> repeat_statement .)
    ID              reduce using rule 38 (statement -> repeat_statement .)
    IF              reduce using rule 38 (statement -> repeat_statement .)
    WHILE           reduce using rule 38 (statement -> repeat_statement .)
    REPEAT          reduce using rule 38 (statement -> repeat_statement .)
    FOR             reduce using rule 38 (statement -> repeat_statement .)
    UNTIL           reduce using rule 38 (statement -> repeat_statement .)
    ELSE            reduce using rule 38 (statement -> repeat_statement .)


state 25

    (39) statement -> for_statement .

    END             reduce using rule 39 (statement -> for_statement .)
    ID              reduce using rule 39 (statement -> for_statement .)
    IF              reduce using rule 39 (statement -> for_statement .)
    WHILE           reduce using rule 39 (statement -> for_statement .)
    REPEAT          reduce using rule 39 (statement -> for_statement .)
    FOR             reduce using rule 39 (statement -> for_statement .)
    UNTIL           reduce using rule 39 (statement -> for_statement .)
    ELSE            reduce using rule 39 (statement -> for_statement .)


state 26

    (40) statement -> procedure_call .

    END             reduce using rule 40 (statement -> procedure_call .)
    ID              reduce using rule 40 (statement -> procedure_call .)
    IF              reduce using rule 40 (statement -> procedure_call .)
    WHILE           reduce using rule 40 (statement -> procedure_call .)
    REPEAT          reduce using rule 40 (statement -> procedure_call .)
    FOR             reduce using rule 40 (statement -> procedure_call .)
    UNTIL           reduce using rule 40 (statement -> procedure_call .)
    ELSE            reduce using rule 40 (statement -> procedure_call .)


state 27

    (41) statement -> record_assignment .

    END             reduce using rule 41 (statement -> record_assignment .)
    ID              reduce using rule 41 (statement -> record_assignment .)
    IF              reduce using rule 41 (statement -> record_assignment .)
    WHILE           reduce using rule 41 (statement -> record_assignment .)
    REPEAT          reduce using rule 41 (statement -> record_assignment .)
    FOR             reduce using rule 41 (statement -> record_assignment .)
    UNTIL           reduce using rule 41 (statement -> record_assignment .)
    ELSE            reduce using rule 41 (statement -> record_assignment .)


state 28

    (42) statement -> empty .

    END             reduce using rule 42 (statement -> empty .)
    ID              reduce using rule 42 (statement -> empty .)
    IF              reduce using rule 42 (statement -> empty .)
    WHILE           reduce using rule 42 (statement -> empty .)
    REPEAT          reduce using rule 42 (statement -> empty .)
    FOR             reduce using rule 42 (statement -> empty .)
    UNTIL           reduce using rule 42 (statement -> empty .)
    ELSE            reduce using rule 42 (statement -> empty .)


state 29

    (43) assignment_statement -> ID . ASSIGN expression SEMICOLON
    (51) procedure_call -> ID . LPAREN args RPAREN SEMICOLON
    (44) record_assignment -> ID . DOT ID ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 44
    LPAREN          shift and go to state 45
    DOT             shift and go to state 46


state 30

    (45) if_statement -> IF . expression THEN statement else_part
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 47

state 31

    (48) while_statement -> WHILE . expression DO statement
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 53

state 32

    (49) repeat_statement -> REPEAT . statement_list UNTIL expression SEMICOLON
    (33) statement_list -> . statement_list statement
    (34) statement_list -> . statement
    (35) statement -> . assignment_statement
    (36) statement -> . if_statement
    (37) statement -> . while_statement
    (38) statement -> . repeat_statement
    (39) statement -> . for_statement
    (40) statement -> . procedure_call
    (41) statement -> . record_assignment
    (42) statement -> . empty
    (43) assignment_statement -> . ID ASSIGN expression SEMICOLON
    (45) if_statement -> . IF expression THEN statement else_part
    (48) while_statement -> . WHILE expression DO statement
    (49) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (50) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (51) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (44) record_assignment -> . ID DOT ID ASSIGN expression SEMICOLON
    (79) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ID              shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    UNTIL           reduce using rule 79 (empty -> .)

  ! ID              [ reduce using rule 79 (empty -> .) ]
  ! IF              [ reduce using rule 79 (empty -> .) ]
  ! WHILE           [ reduce using rule 79 (empty -> .) ]
  ! REPEAT          [ reduce using rule 79 (empty -> .) ]
  ! FOR             [ reduce using rule 79 (empty -> .) ]

    statement_list                 shift and go to state 54
    statement                      shift and go to state 20
    assignment_statement           shift and go to state 21
    if_statement                   shift and go to state 22
    while_statement                shift and go to state 23
    repeat_statement               shift and go to state 24
    for_statement                  shift and go to state 25
    procedure_call                 shift and go to state 26
    record_assignment              shift and go to state 27
    empty                          shift and go to state 28

state 33

    (50) for_statement -> FOR . ID ASSIGN expression TO expression DO statement

    ID              shift and go to state 55


state 34

    (9) var_declaration -> VAR var_decl_list . SEMICOLON
    (10) var_decl_list -> var_decl_list . var_decl
    (12) var_decl -> . id_list COLON type SEMICOLON
    (13) id_list -> . id_list COMMA ID
    (14) id_list -> . ID

    SEMICOLON       shift and go to state 56
    ID              shift and go to state 37

    var_decl                       shift and go to state 57
    id_list                        shift and go to state 36

state 35

    (11) var_decl_list -> var_decl .

    SEMICOLON       reduce using rule 11 (var_decl_list -> var_decl .)
    ID              reduce using rule 11 (var_decl_list -> var_decl .)


state 36

    (12) var_decl -> id_list . COLON type SEMICOLON
    (13) id_list -> id_list . COMMA ID

    COLON           shift and go to state 58
    COMMA           shift and go to state 59


state 37

    (14) id_list -> ID .

    COLON           reduce using rule 14 (id_list -> ID .)
    COMMA           reduce using rule 14 (id_list -> ID .)


state 38

    (15) const_declaration -> CONST const_list . SEMICOLON
    (16) const_list -> const_list . COMMA ID EQUAL constant

    SEMICOLON       shift and go to state 60
    COMMA           shift and go to state 61


state 39

    (17) const_list -> ID . EQUAL constant

    EQUAL           shift and go to state 62


state 40

    (18) procedure_declaration -> PROCEDURE ID . LPAREN param_list RPAREN SEMICOLON block

    LPAREN          shift and go to state 63


state 41

    (19) type_declaration -> TYPE ID . EQUAL type SEMICOLON

    EQUAL           shift and go to state 64


state 42

    (2) block -> declarations BEGIN statement_list END .

    DOT             reduce using rule 2 (block -> declarations BEGIN statement_list END .)
    BEGIN           reduce using rule 2 (block -> declarations BEGIN statement_list END .)
    VAR             reduce using rule 2 (block -> declarations BEGIN statement_list END .)
    CONST           reduce using rule 2 (block -> declarations BEGIN statement_list END .)
    PROCEDURE       reduce using rule 2 (block -> declarations BEGIN statement_list END .)
    TYPE            reduce using rule 2 (block -> declarations BEGIN statement_list END .)


state 43

    (33) statement_list -> statement_list statement .

    END             reduce using rule 33 (statement_list -> statement_list statement .)
    ID              reduce using rule 33 (statement_list -> statement_list statement .)
    IF              reduce using rule 33 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 33 (statement_list -> statement_list statement .)
    REPEAT          reduce using rule 33 (statement_list -> statement_list statement .)
    FOR             reduce using rule 33 (statement_list -> statement_list statement .)
    UNTIL           reduce using rule 33 (statement_list -> statement_list statement .)


state 44

    (43) assignment_statement -> ID ASSIGN . expression SEMICOLON
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 65

state 45

    (51) procedure_call -> ID LPAREN . args RPAREN SEMICOLON
    (52) args -> . args COMMA expression
    (53) args -> . expression
    (54) args -> . empty
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID
    (79) empty -> .

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52
    RPAREN          reduce using rule 79 (empty -> .)
    COMMA           reduce using rule 79 (empty -> .)

    args                           shift and go to state 66
    expression                     shift and go to state 67
    empty                          shift and go to state 68

state 46

    (44) record_assignment -> ID DOT . ID ASSIGN expression SEMICOLON

    ID              shift and go to state 69


state 47

    (45) if_statement -> IF expression . THEN statement else_part
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

    THEN            shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85


state 48

    (70) expression -> LPAREN . expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 86

state 49

    (71) expression -> INTEGER_CONST .

    THEN            reduce using rule 71 (expression -> INTEGER_CONST .)
    PLUS            reduce using rule 71 (expression -> INTEGER_CONST .)
    MINUS           reduce using rule 71 (expression -> INTEGER_CONST .)
    TIMES           reduce using rule 71 (expression -> INTEGER_CONST .)
    DIVIDE          reduce using rule 71 (expression -> INTEGER_CONST .)
    DIVIDE_INT      reduce using rule 71 (expression -> INTEGER_CONST .)
    MODULO          reduce using rule 71 (expression -> INTEGER_CONST .)
    EQUAL           reduce using rule 71 (expression -> INTEGER_CONST .)
    NEQUAL          reduce using rule 71 (expression -> INTEGER_CONST .)
    LT              reduce using rule 71 (expression -> INTEGER_CONST .)
    GT              reduce using rule 71 (expression -> INTEGER_CONST .)
    LE              reduce using rule 71 (expression -> INTEGER_CONST .)
    GE              reduce using rule 71 (expression -> INTEGER_CONST .)
    AND             reduce using rule 71 (expression -> INTEGER_CONST .)
    OR              reduce using rule 71 (expression -> INTEGER_CONST .)
    XOR             reduce using rule 71 (expression -> INTEGER_CONST .)
    DO              reduce using rule 71 (expression -> INTEGER_CONST .)
    SEMICOLON       reduce using rule 71 (expression -> INTEGER_CONST .)
    RPAREN          reduce using rule 71 (expression -> INTEGER_CONST .)
    COMMA           reduce using rule 71 (expression -> INTEGER_CONST .)
    TO              reduce using rule 71 (expression -> INTEGER_CONST .)


state 50

    (72) expression -> REAL_CONST .

    THEN            reduce using rule 72 (expression -> REAL_CONST .)
    PLUS            reduce using rule 72 (expression -> REAL_CONST .)
    MINUS           reduce using rule 72 (expression -> REAL_CONST .)
    TIMES           reduce using rule 72 (expression -> REAL_CONST .)
    DIVIDE          reduce using rule 72 (expression -> REAL_CONST .)
    DIVIDE_INT      reduce using rule 72 (expression -> REAL_CONST .)
    MODULO          reduce using rule 72 (expression -> REAL_CONST .)
    EQUAL           reduce using rule 72 (expression -> REAL_CONST .)
    NEQUAL          reduce using rule 72 (expression -> REAL_CONST .)
    LT              reduce using rule 72 (expression -> REAL_CONST .)
    GT              reduce using rule 72 (expression -> REAL_CONST .)
    LE              reduce using rule 72 (expression -> REAL_CONST .)
    GE              reduce using rule 72 (expression -> REAL_CONST .)
    AND             reduce using rule 72 (expression -> REAL_CONST .)
    OR              reduce using rule 72 (expression -> REAL_CONST .)
    XOR             reduce using rule 72 (expression -> REAL_CONST .)
    DO              reduce using rule 72 (expression -> REAL_CONST .)
    SEMICOLON       reduce using rule 72 (expression -> REAL_CONST .)
    RPAREN          reduce using rule 72 (expression -> REAL_CONST .)
    COMMA           reduce using rule 72 (expression -> REAL_CONST .)
    TO              reduce using rule 72 (expression -> REAL_CONST .)


state 51

    (73) expression -> STRING_LITERAL .

    THEN            reduce using rule 73 (expression -> STRING_LITERAL .)
    PLUS            reduce using rule 73 (expression -> STRING_LITERAL .)
    MINUS           reduce using rule 73 (expression -> STRING_LITERAL .)
    TIMES           reduce using rule 73 (expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 73 (expression -> STRING_LITERAL .)
    DIVIDE_INT      reduce using rule 73 (expression -> STRING_LITERAL .)
    MODULO          reduce using rule 73 (expression -> STRING_LITERAL .)
    EQUAL           reduce using rule 73 (expression -> STRING_LITERAL .)
    NEQUAL          reduce using rule 73 (expression -> STRING_LITERAL .)
    LT              reduce using rule 73 (expression -> STRING_LITERAL .)
    GT              reduce using rule 73 (expression -> STRING_LITERAL .)
    LE              reduce using rule 73 (expression -> STRING_LITERAL .)
    GE              reduce using rule 73 (expression -> STRING_LITERAL .)
    AND             reduce using rule 73 (expression -> STRING_LITERAL .)
    OR              reduce using rule 73 (expression -> STRING_LITERAL .)
    XOR             reduce using rule 73 (expression -> STRING_LITERAL .)
    DO              reduce using rule 73 (expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 73 (expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 73 (expression -> STRING_LITERAL .)
    COMMA           reduce using rule 73 (expression -> STRING_LITERAL .)
    TO              reduce using rule 73 (expression -> STRING_LITERAL .)


state 52

    (74) expression -> ID .

    THEN            reduce using rule 74 (expression -> ID .)
    PLUS            reduce using rule 74 (expression -> ID .)
    MINUS           reduce using rule 74 (expression -> ID .)
    TIMES           reduce using rule 74 (expression -> ID .)
    DIVIDE          reduce using rule 74 (expression -> ID .)
    DIVIDE_INT      reduce using rule 74 (expression -> ID .)
    MODULO          reduce using rule 74 (expression -> ID .)
    EQUAL           reduce using rule 74 (expression -> ID .)
    NEQUAL          reduce using rule 74 (expression -> ID .)
    LT              reduce using rule 74 (expression -> ID .)
    GT              reduce using rule 74 (expression -> ID .)
    LE              reduce using rule 74 (expression -> ID .)
    GE              reduce using rule 74 (expression -> ID .)
    AND             reduce using rule 74 (expression -> ID .)
    OR              reduce using rule 74 (expression -> ID .)
    XOR             reduce using rule 74 (expression -> ID .)
    DO              reduce using rule 74 (expression -> ID .)
    SEMICOLON       reduce using rule 74 (expression -> ID .)
    RPAREN          reduce using rule 74 (expression -> ID .)
    COMMA           reduce using rule 74 (expression -> ID .)
    TO              reduce using rule 74 (expression -> ID .)


state 53

    (48) while_statement -> WHILE expression . DO statement
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

    DO              shift and go to state 87
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85


state 54

    (49) repeat_statement -> REPEAT statement_list . UNTIL expression SEMICOLON
    (33) statement_list -> statement_list . statement
    (35) statement -> . assignment_statement
    (36) statement -> . if_statement
    (37) statement -> . while_statement
    (38) statement -> . repeat_statement
    (39) statement -> . for_statement
    (40) statement -> . procedure_call
    (41) statement -> . record_assignment
    (42) statement -> . empty
    (43) assignment_statement -> . ID ASSIGN expression SEMICOLON
    (45) if_statement -> . IF expression THEN statement else_part
    (48) while_statement -> . WHILE expression DO statement
    (49) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (50) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (51) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (44) record_assignment -> . ID DOT ID ASSIGN expression SEMICOLON
    (79) empty -> .

  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    UNTIL           shift and go to state 88
    ID              shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33

  ! UNTIL           [ reduce using rule 79 (empty -> .) ]
  ! ID              [ reduce using rule 79 (empty -> .) ]
  ! IF              [ reduce using rule 79 (empty -> .) ]
  ! WHILE           [ reduce using rule 79 (empty -> .) ]
  ! REPEAT          [ reduce using rule 79 (empty -> .) ]
  ! FOR             [ reduce using rule 79 (empty -> .) ]

    statement                      shift and go to state 43
    assignment_statement           shift and go to state 21
    if_statement                   shift and go to state 22
    while_statement                shift and go to state 23
    repeat_statement               shift and go to state 24
    for_statement                  shift and go to state 25
    procedure_call                 shift and go to state 26
    record_assignment              shift and go to state 27
    empty                          shift and go to state 28

state 55

    (50) for_statement -> FOR ID . ASSIGN expression TO expression DO statement

    ASSIGN          shift and go to state 89


state 56

    (9) var_declaration -> VAR var_decl_list SEMICOLON .

    BEGIN           reduce using rule 9 (var_declaration -> VAR var_decl_list SEMICOLON .)
    VAR             reduce using rule 9 (var_declaration -> VAR var_decl_list SEMICOLON .)
    CONST           reduce using rule 9 (var_declaration -> VAR var_decl_list SEMICOLON .)
    PROCEDURE       reduce using rule 9 (var_declaration -> VAR var_decl_list SEMICOLON .)
    TYPE            reduce using rule 9 (var_declaration -> VAR var_decl_list SEMICOLON .)
    END             reduce using rule 9 (var_declaration -> VAR var_decl_list SEMICOLON .)


state 57

    (10) var_decl_list -> var_decl_list var_decl .

    SEMICOLON       reduce using rule 10 (var_decl_list -> var_decl_list var_decl .)
    ID              reduce using rule 10 (var_decl_list -> var_decl_list var_decl .)


state 58

    (12) var_decl -> id_list COLON . type SEMICOLON
    (24) type -> . INTEGER
    (25) type -> . REAL
    (26) type -> . BOOLEAN
    (27) type -> . STRING
    (28) type -> . ARRAY LBRACKET INTEGER_CONST RBRACKET OF type
    (29) type -> . RECORD record_fields END
    (30) type -> . SET LBRACKET type RBRACKET

    INTEGER         shift and go to state 91
    REAL            shift and go to state 92
    BOOLEAN         shift and go to state 93
    STRING          shift and go to state 94
    ARRAY           shift and go to state 95
    RECORD          shift and go to state 96
    SET             shift and go to state 97

    type                           shift and go to state 90

state 59

    (13) id_list -> id_list COMMA . ID

    ID              shift and go to state 98


state 60

    (15) const_declaration -> CONST const_list SEMICOLON .

    BEGIN           reduce using rule 15 (const_declaration -> CONST const_list SEMICOLON .)
    VAR             reduce using rule 15 (const_declaration -> CONST const_list SEMICOLON .)
    CONST           reduce using rule 15 (const_declaration -> CONST const_list SEMICOLON .)
    PROCEDURE       reduce using rule 15 (const_declaration -> CONST const_list SEMICOLON .)
    TYPE            reduce using rule 15 (const_declaration -> CONST const_list SEMICOLON .)


state 61

    (16) const_list -> const_list COMMA . ID EQUAL constant

    ID              shift and go to state 99


state 62

    (17) const_list -> ID EQUAL . constant
    (75) constant -> . INTEGER_CONST
    (76) constant -> . REAL_CONST
    (77) constant -> . STRING_LITERAL
    (78) constant -> . NIL

    INTEGER_CONST   shift and go to state 101
    REAL_CONST      shift and go to state 102
    STRING_LITERAL  shift and go to state 103
    NIL             shift and go to state 104

    constant                       shift and go to state 100

state 63

    (18) procedure_declaration -> PROCEDURE ID LPAREN . param_list RPAREN SEMICOLON block
    (20) param_list -> . param_list SEMICOLON param
    (21) param_list -> . param
    (22) param_list -> . empty
    (23) param -> . ID COLON type
    (79) empty -> .

    ID              shift and go to state 105
    RPAREN          reduce using rule 79 (empty -> .)
    SEMICOLON       reduce using rule 79 (empty -> .)

    param_list                     shift and go to state 106
    param                          shift and go to state 107
    empty                          shift and go to state 108

state 64

    (19) type_declaration -> TYPE ID EQUAL . type SEMICOLON
    (24) type -> . INTEGER
    (25) type -> . REAL
    (26) type -> . BOOLEAN
    (27) type -> . STRING
    (28) type -> . ARRAY LBRACKET INTEGER_CONST RBRACKET OF type
    (29) type -> . RECORD record_fields END
    (30) type -> . SET LBRACKET type RBRACKET

    INTEGER         shift and go to state 91
    REAL            shift and go to state 92
    BOOLEAN         shift and go to state 93
    STRING          shift and go to state 94
    ARRAY           shift and go to state 95
    RECORD          shift and go to state 96
    SET             shift and go to state 97

    type                           shift and go to state 109

state 65

    (43) assignment_statement -> ID ASSIGN expression . SEMICOLON
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

    SEMICOLON       shift and go to state 110
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85


state 66

    (51) procedure_call -> ID LPAREN args . RPAREN SEMICOLON
    (52) args -> args . COMMA expression

    RPAREN          shift and go to state 111
    COMMA           shift and go to state 112


state 67

    (53) args -> expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

    RPAREN          reduce using rule 53 (args -> expression .)
    COMMA           reduce using rule 53 (args -> expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85


state 68

    (54) args -> empty .

    RPAREN          reduce using rule 54 (args -> empty .)
    COMMA           reduce using rule 54 (args -> empty .)


state 69

    (44) record_assignment -> ID DOT ID . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 113


state 70

    (45) if_statement -> IF expression THEN . statement else_part
    (35) statement -> . assignment_statement
    (36) statement -> . if_statement
    (37) statement -> . while_statement
    (38) statement -> . repeat_statement
    (39) statement -> . for_statement
    (40) statement -> . procedure_call
    (41) statement -> . record_assignment
    (42) statement -> . empty
    (43) assignment_statement -> . ID ASSIGN expression SEMICOLON
    (45) if_statement -> . IF expression THEN statement else_part
    (48) while_statement -> . WHILE expression DO statement
    (49) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (50) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (51) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (44) record_assignment -> . ID DOT ID ASSIGN expression SEMICOLON
    (79) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ID              shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    ELSE            reduce using rule 79 (empty -> .)
    END             reduce using rule 79 (empty -> .)
    UNTIL           reduce using rule 79 (empty -> .)

  ! ID              [ reduce using rule 79 (empty -> .) ]
  ! IF              [ reduce using rule 79 (empty -> .) ]
  ! WHILE           [ reduce using rule 79 (empty -> .) ]
  ! REPEAT          [ reduce using rule 79 (empty -> .) ]
  ! FOR             [ reduce using rule 79 (empty -> .) ]

    statement                      shift and go to state 114
    assignment_statement           shift and go to state 21
    if_statement                   shift and go to state 22
    while_statement                shift and go to state 23
    repeat_statement               shift and go to state 24
    for_statement                  shift and go to state 25
    procedure_call                 shift and go to state 26
    record_assignment              shift and go to state 27
    empty                          shift and go to state 28

state 71

    (55) expression -> expression PLUS . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 115

state 72

    (56) expression -> expression MINUS . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 116

state 73

    (57) expression -> expression TIMES . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 117

state 74

    (58) expression -> expression DIVIDE . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 118

state 75

    (59) expression -> expression DIVIDE_INT . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 119

state 76

    (60) expression -> expression MODULO . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 120

state 77

    (61) expression -> expression EQUAL . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 121

state 78

    (62) expression -> expression NEQUAL . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 122

state 79

    (63) expression -> expression LT . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 123

state 80

    (64) expression -> expression GT . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 124

state 81

    (65) expression -> expression LE . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 125

state 82

    (66) expression -> expression GE . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 126

state 83

    (67) expression -> expression AND . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 127

state 84

    (68) expression -> expression OR . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 128

state 85

    (69) expression -> expression XOR . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 129

state 86

    (70) expression -> LPAREN expression . RPAREN
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

    RPAREN          shift and go to state 130
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85


state 87

    (48) while_statement -> WHILE expression DO . statement
    (35) statement -> . assignment_statement
    (36) statement -> . if_statement
    (37) statement -> . while_statement
    (38) statement -> . repeat_statement
    (39) statement -> . for_statement
    (40) statement -> . procedure_call
    (41) statement -> . record_assignment
    (42) statement -> . empty
    (43) assignment_statement -> . ID ASSIGN expression SEMICOLON
    (45) if_statement -> . IF expression THEN statement else_part
    (48) while_statement -> . WHILE expression DO statement
    (49) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (50) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (51) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (44) record_assignment -> . ID DOT ID ASSIGN expression SEMICOLON
    (79) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ID              shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    ELSE            reduce using rule 79 (empty -> .)
    END             reduce using rule 79 (empty -> .)
    UNTIL           reduce using rule 79 (empty -> .)

  ! ID              [ reduce using rule 79 (empty -> .) ]
  ! IF              [ reduce using rule 79 (empty -> .) ]
  ! WHILE           [ reduce using rule 79 (empty -> .) ]
  ! REPEAT          [ reduce using rule 79 (empty -> .) ]
  ! FOR             [ reduce using rule 79 (empty -> .) ]

    statement                      shift and go to state 131
    assignment_statement           shift and go to state 21
    if_statement                   shift and go to state 22
    while_statement                shift and go to state 23
    repeat_statement               shift and go to state 24
    for_statement                  shift and go to state 25
    procedure_call                 shift and go to state 26
    record_assignment              shift and go to state 27
    empty                          shift and go to state 28

state 88

    (49) repeat_statement -> REPEAT statement_list UNTIL . expression SEMICOLON
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 132

state 89

    (50) for_statement -> FOR ID ASSIGN . expression TO expression DO statement
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 133

state 90

    (12) var_decl -> id_list COLON type . SEMICOLON

    SEMICOLON       shift and go to state 134


state 91

    (24) type -> INTEGER .

    SEMICOLON       reduce using rule 24 (type -> INTEGER .)
    RBRACKET        reduce using rule 24 (type -> INTEGER .)
    RPAREN          reduce using rule 24 (type -> INTEGER .)


state 92

    (25) type -> REAL .

    SEMICOLON       reduce using rule 25 (type -> REAL .)
    RBRACKET        reduce using rule 25 (type -> REAL .)
    RPAREN          reduce using rule 25 (type -> REAL .)


state 93

    (26) type -> BOOLEAN .

    SEMICOLON       reduce using rule 26 (type -> BOOLEAN .)
    RBRACKET        reduce using rule 26 (type -> BOOLEAN .)
    RPAREN          reduce using rule 26 (type -> BOOLEAN .)


state 94

    (27) type -> STRING .

    SEMICOLON       reduce using rule 27 (type -> STRING .)
    RBRACKET        reduce using rule 27 (type -> STRING .)
    RPAREN          reduce using rule 27 (type -> STRING .)


state 95

    (28) type -> ARRAY . LBRACKET INTEGER_CONST RBRACKET OF type

    LBRACKET        shift and go to state 135


state 96

    (29) type -> RECORD . record_fields END
    (31) record_fields -> . record_fields var_declaration
    (32) record_fields -> . var_declaration
    (9) var_declaration -> . VAR var_decl_list SEMICOLON

    VAR             shift and go to state 15

    record_fields                  shift and go to state 136
    var_declaration                shift and go to state 137

state 97

    (30) type -> SET . LBRACKET type RBRACKET

    LBRACKET        shift and go to state 138


state 98

    (13) id_list -> id_list COMMA ID .

    COLON           reduce using rule 13 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 13 (id_list -> id_list COMMA ID .)


state 99

    (16) const_list -> const_list COMMA ID . EQUAL constant

    EQUAL           shift and go to state 139


state 100

    (17) const_list -> ID EQUAL constant .

    SEMICOLON       reduce using rule 17 (const_list -> ID EQUAL constant .)
    COMMA           reduce using rule 17 (const_list -> ID EQUAL constant .)


state 101

    (75) constant -> INTEGER_CONST .

    SEMICOLON       reduce using rule 75 (constant -> INTEGER_CONST .)
    COMMA           reduce using rule 75 (constant -> INTEGER_CONST .)


state 102

    (76) constant -> REAL_CONST .

    SEMICOLON       reduce using rule 76 (constant -> REAL_CONST .)
    COMMA           reduce using rule 76 (constant -> REAL_CONST .)


state 103

    (77) constant -> STRING_LITERAL .

    SEMICOLON       reduce using rule 77 (constant -> STRING_LITERAL .)
    COMMA           reduce using rule 77 (constant -> STRING_LITERAL .)


state 104

    (78) constant -> NIL .

    SEMICOLON       reduce using rule 78 (constant -> NIL .)
    COMMA           reduce using rule 78 (constant -> NIL .)


state 105

    (23) param -> ID . COLON type

    COLON           shift and go to state 140


state 106

    (18) procedure_declaration -> PROCEDURE ID LPAREN param_list . RPAREN SEMICOLON block
    (20) param_list -> param_list . SEMICOLON param

    RPAREN          shift and go to state 141
    SEMICOLON       shift and go to state 142


state 107

    (21) param_list -> param .

    RPAREN          reduce using rule 21 (param_list -> param .)
    SEMICOLON       reduce using rule 21 (param_list -> param .)


state 108

    (22) param_list -> empty .

    RPAREN          reduce using rule 22 (param_list -> empty .)
    SEMICOLON       reduce using rule 22 (param_list -> empty .)


state 109

    (19) type_declaration -> TYPE ID EQUAL type . SEMICOLON

    SEMICOLON       shift and go to state 143


state 110

    (43) assignment_statement -> ID ASSIGN expression SEMICOLON .

    END             reduce using rule 43 (assignment_statement -> ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 43 (assignment_statement -> ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 43 (assignment_statement -> ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 43 (assignment_statement -> ID ASSIGN expression SEMICOLON .)
    REPEAT          reduce using rule 43 (assignment_statement -> ID ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 43 (assignment_statement -> ID ASSIGN expression SEMICOLON .)
    UNTIL           reduce using rule 43 (assignment_statement -> ID ASSIGN expression SEMICOLON .)
    ELSE            reduce using rule 43 (assignment_statement -> ID ASSIGN expression SEMICOLON .)


state 111

    (51) procedure_call -> ID LPAREN args RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 144


state 112

    (52) args -> args COMMA . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 145

state 113

    (44) record_assignment -> ID DOT ID ASSIGN . expression SEMICOLON
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 146

state 114

    (45) if_statement -> IF expression THEN statement . else_part
    (46) else_part -> . ELSE statement
    (47) else_part -> . empty
    (79) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 148
    END             reduce using rule 79 (empty -> .)
    ID              reduce using rule 79 (empty -> .)
    IF              reduce using rule 79 (empty -> .)
    WHILE           reduce using rule 79 (empty -> .)
    REPEAT          reduce using rule 79 (empty -> .)
    FOR             reduce using rule 79 (empty -> .)
    UNTIL           reduce using rule 79 (empty -> .)

  ! ELSE            [ reduce using rule 79 (empty -> .) ]

    else_part                      shift and go to state 147
    empty                          shift and go to state 149

state 115

    (55) expression -> expression PLUS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIVIDE_INT resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    THEN            reduce using rule 55 (expression -> expression PLUS expression .)
    DO              reduce using rule 55 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 55 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 55 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 55 (expression -> expression PLUS expression .)
    TO              reduce using rule 55 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85

  ! PLUS            [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! DIVIDE_INT      [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! EQUAL           [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! NEQUAL          [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! LT              [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! LE              [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! GE              [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! XOR             [ reduce using rule 55 (expression -> expression PLUS expression .) ]


state 116

    (56) expression -> expression MINUS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIVIDE_INT resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    THEN            reduce using rule 56 (expression -> expression MINUS expression .)
    DO              reduce using rule 56 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 56 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 56 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 56 (expression -> expression MINUS expression .)
    TO              reduce using rule 56 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85

  ! PLUS            [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! DIVIDE_INT      [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! EQUAL           [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! NEQUAL          [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! LT              [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! LE              [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! GE              [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! XOR             [ reduce using rule 56 (expression -> expression MINUS expression .) ]


state 117

    (57) expression -> expression TIMES expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIVIDE_INT resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    THEN            reduce using rule 57 (expression -> expression TIMES expression .)
    DO              reduce using rule 57 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 57 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 57 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 57 (expression -> expression TIMES expression .)
    TO              reduce using rule 57 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85

  ! PLUS            [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! DIVIDE_INT      [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! MODULO          [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! EQUAL           [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! NEQUAL          [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! LT              [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! GT              [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! LE              [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! GE              [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! AND             [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! OR              [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! XOR             [ reduce using rule 57 (expression -> expression TIMES expression .) ]


state 118

    (58) expression -> expression DIVIDE expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIVIDE_INT resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    THEN            reduce using rule 58 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 58 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 58 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 58 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 58 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 58 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85

  ! PLUS            [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE_INT      [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! MODULO          [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! EQUAL           [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! NEQUAL          [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! LT              [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! GT              [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! LE              [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! GE              [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! XOR             [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]


state 119

    (59) expression -> expression DIVIDE_INT expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIVIDE_INT resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    THEN            reduce using rule 59 (expression -> expression DIVIDE_INT expression .)
    DO              reduce using rule 59 (expression -> expression DIVIDE_INT expression .)
    SEMICOLON       reduce using rule 59 (expression -> expression DIVIDE_INT expression .)
    RPAREN          reduce using rule 59 (expression -> expression DIVIDE_INT expression .)
    COMMA           reduce using rule 59 (expression -> expression DIVIDE_INT expression .)
    TO              reduce using rule 59 (expression -> expression DIVIDE_INT expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85

  ! PLUS            [ reduce using rule 59 (expression -> expression DIVIDE_INT expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression DIVIDE_INT expression .) ]
  ! TIMES           [ reduce using rule 59 (expression -> expression DIVIDE_INT expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> expression DIVIDE_INT expression .) ]
  ! DIVIDE_INT      [ reduce using rule 59 (expression -> expression DIVIDE_INT expression .) ]
  ! MODULO          [ reduce using rule 59 (expression -> expression DIVIDE_INT expression .) ]
  ! EQUAL           [ reduce using rule 59 (expression -> expression DIVIDE_INT expression .) ]
  ! NEQUAL          [ reduce using rule 59 (expression -> expression DIVIDE_INT expression .) ]
  ! LT              [ reduce using rule 59 (expression -> expression DIVIDE_INT expression .) ]
  ! GT              [ reduce using rule 59 (expression -> expression DIVIDE_INT expression .) ]
  ! LE              [ reduce using rule 59 (expression -> expression DIVIDE_INT expression .) ]
  ! GE              [ reduce using rule 59 (expression -> expression DIVIDE_INT expression .) ]
  ! AND             [ reduce using rule 59 (expression -> expression DIVIDE_INT expression .) ]
  ! OR              [ reduce using rule 59 (expression -> expression DIVIDE_INT expression .) ]
  ! XOR             [ reduce using rule 59 (expression -> expression DIVIDE_INT expression .) ]


state 120

    (60) expression -> expression MODULO expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIVIDE_INT resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    THEN            reduce using rule 60 (expression -> expression MODULO expression .)
    DO              reduce using rule 60 (expression -> expression MODULO expression .)
    SEMICOLON       reduce using rule 60 (expression -> expression MODULO expression .)
    RPAREN          reduce using rule 60 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 60 (expression -> expression MODULO expression .)
    TO              reduce using rule 60 (expression -> expression MODULO expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85

  ! PLUS            [ reduce using rule 60 (expression -> expression MODULO expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression MODULO expression .) ]
  ! TIMES           [ reduce using rule 60 (expression -> expression MODULO expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> expression MODULO expression .) ]
  ! DIVIDE_INT      [ reduce using rule 60 (expression -> expression MODULO expression .) ]
  ! MODULO          [ reduce using rule 60 (expression -> expression MODULO expression .) ]
  ! EQUAL           [ reduce using rule 60 (expression -> expression MODULO expression .) ]
  ! NEQUAL          [ reduce using rule 60 (expression -> expression MODULO expression .) ]
  ! LT              [ reduce using rule 60 (expression -> expression MODULO expression .) ]
  ! GT              [ reduce using rule 60 (expression -> expression MODULO expression .) ]
  ! LE              [ reduce using rule 60 (expression -> expression MODULO expression .) ]
  ! GE              [ reduce using rule 60 (expression -> expression MODULO expression .) ]
  ! AND             [ reduce using rule 60 (expression -> expression MODULO expression .) ]
  ! OR              [ reduce using rule 60 (expression -> expression MODULO expression .) ]
  ! XOR             [ reduce using rule 60 (expression -> expression MODULO expression .) ]


state 121

    (61) expression -> expression EQUAL expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIVIDE_INT resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    THEN            reduce using rule 61 (expression -> expression EQUAL expression .)
    DO              reduce using rule 61 (expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 61 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 61 (expression -> expression EQUAL expression .)
    COMMA           reduce using rule 61 (expression -> expression EQUAL expression .)
    TO              reduce using rule 61 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85

  ! PLUS            [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! TIMES           [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! DIVIDE_INT      [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! MODULO          [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! NEQUAL          [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! LT              [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! GT              [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! LE              [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! GE              [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! AND             [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! OR              [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! XOR             [ reduce using rule 61 (expression -> expression EQUAL expression .) ]


state 122

    (62) expression -> expression NEQUAL expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIVIDE_INT resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    THEN            reduce using rule 62 (expression -> expression NEQUAL expression .)
    DO              reduce using rule 62 (expression -> expression NEQUAL expression .)
    SEMICOLON       reduce using rule 62 (expression -> expression NEQUAL expression .)
    RPAREN          reduce using rule 62 (expression -> expression NEQUAL expression .)
    COMMA           reduce using rule 62 (expression -> expression NEQUAL expression .)
    TO              reduce using rule 62 (expression -> expression NEQUAL expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85

  ! PLUS            [ reduce using rule 62 (expression -> expression NEQUAL expression .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression NEQUAL expression .) ]
  ! TIMES           [ reduce using rule 62 (expression -> expression NEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 62 (expression -> expression NEQUAL expression .) ]
  ! DIVIDE_INT      [ reduce using rule 62 (expression -> expression NEQUAL expression .) ]
  ! MODULO          [ reduce using rule 62 (expression -> expression NEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 62 (expression -> expression NEQUAL expression .) ]
  ! NEQUAL          [ reduce using rule 62 (expression -> expression NEQUAL expression .) ]
  ! LT              [ reduce using rule 62 (expression -> expression NEQUAL expression .) ]
  ! GT              [ reduce using rule 62 (expression -> expression NEQUAL expression .) ]
  ! LE              [ reduce using rule 62 (expression -> expression NEQUAL expression .) ]
  ! GE              [ reduce using rule 62 (expression -> expression NEQUAL expression .) ]
  ! AND             [ reduce using rule 62 (expression -> expression NEQUAL expression .) ]
  ! OR              [ reduce using rule 62 (expression -> expression NEQUAL expression .) ]
  ! XOR             [ reduce using rule 62 (expression -> expression NEQUAL expression .) ]


state 123

    (63) expression -> expression LT expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIVIDE_INT resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    THEN            reduce using rule 63 (expression -> expression LT expression .)
    DO              reduce using rule 63 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 63 (expression -> expression LT expression .)
    RPAREN          reduce using rule 63 (expression -> expression LT expression .)
    COMMA           reduce using rule 63 (expression -> expression LT expression .)
    TO              reduce using rule 63 (expression -> expression LT expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85

  ! PLUS            [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! DIVIDE_INT      [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! MODULO          [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! EQUAL           [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! NEQUAL          [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! LE              [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! GE              [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! AND             [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! OR              [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! XOR             [ reduce using rule 63 (expression -> expression LT expression .) ]


state 124

    (64) expression -> expression GT expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIVIDE_INT resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    THEN            reduce using rule 64 (expression -> expression GT expression .)
    DO              reduce using rule 64 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 64 (expression -> expression GT expression .)
    RPAREN          reduce using rule 64 (expression -> expression GT expression .)
    COMMA           reduce using rule 64 (expression -> expression GT expression .)
    TO              reduce using rule 64 (expression -> expression GT expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85

  ! PLUS            [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! DIVIDE_INT      [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! MODULO          [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! EQUAL           [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! NEQUAL          [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! LE              [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! GE              [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! AND             [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! OR              [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! XOR             [ reduce using rule 64 (expression -> expression GT expression .) ]


state 125

    (65) expression -> expression LE expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIVIDE_INT resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    THEN            reduce using rule 65 (expression -> expression LE expression .)
    DO              reduce using rule 65 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 65 (expression -> expression LE expression .)
    RPAREN          reduce using rule 65 (expression -> expression LE expression .)
    COMMA           reduce using rule 65 (expression -> expression LE expression .)
    TO              reduce using rule 65 (expression -> expression LE expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85

  ! PLUS            [ reduce using rule 65 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 65 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> expression LE expression .) ]
  ! DIVIDE_INT      [ reduce using rule 65 (expression -> expression LE expression .) ]
  ! MODULO          [ reduce using rule 65 (expression -> expression LE expression .) ]
  ! EQUAL           [ reduce using rule 65 (expression -> expression LE expression .) ]
  ! NEQUAL          [ reduce using rule 65 (expression -> expression LE expression .) ]
  ! LT              [ reduce using rule 65 (expression -> expression LE expression .) ]
  ! GT              [ reduce using rule 65 (expression -> expression LE expression .) ]
  ! LE              [ reduce using rule 65 (expression -> expression LE expression .) ]
  ! GE              [ reduce using rule 65 (expression -> expression LE expression .) ]
  ! AND             [ reduce using rule 65 (expression -> expression LE expression .) ]
  ! OR              [ reduce using rule 65 (expression -> expression LE expression .) ]
  ! XOR             [ reduce using rule 65 (expression -> expression LE expression .) ]


state 126

    (66) expression -> expression GE expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIVIDE_INT resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    THEN            reduce using rule 66 (expression -> expression GE expression .)
    DO              reduce using rule 66 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 66 (expression -> expression GE expression .)
    RPAREN          reduce using rule 66 (expression -> expression GE expression .)
    COMMA           reduce using rule 66 (expression -> expression GE expression .)
    TO              reduce using rule 66 (expression -> expression GE expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85

  ! PLUS            [ reduce using rule 66 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 66 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression -> expression GE expression .) ]
  ! DIVIDE_INT      [ reduce using rule 66 (expression -> expression GE expression .) ]
  ! MODULO          [ reduce using rule 66 (expression -> expression GE expression .) ]
  ! EQUAL           [ reduce using rule 66 (expression -> expression GE expression .) ]
  ! NEQUAL          [ reduce using rule 66 (expression -> expression GE expression .) ]
  ! LT              [ reduce using rule 66 (expression -> expression GE expression .) ]
  ! GT              [ reduce using rule 66 (expression -> expression GE expression .) ]
  ! LE              [ reduce using rule 66 (expression -> expression GE expression .) ]
  ! GE              [ reduce using rule 66 (expression -> expression GE expression .) ]
  ! AND             [ reduce using rule 66 (expression -> expression GE expression .) ]
  ! OR              [ reduce using rule 66 (expression -> expression GE expression .) ]
  ! XOR             [ reduce using rule 66 (expression -> expression GE expression .) ]


state 127

    (67) expression -> expression AND expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIVIDE_INT resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    THEN            reduce using rule 67 (expression -> expression AND expression .)
    DO              reduce using rule 67 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 67 (expression -> expression AND expression .)
    RPAREN          reduce using rule 67 (expression -> expression AND expression .)
    COMMA           reduce using rule 67 (expression -> expression AND expression .)
    TO              reduce using rule 67 (expression -> expression AND expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85

  ! PLUS            [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! DIVIDE_INT      [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! NEQUAL          [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! XOR             [ reduce using rule 67 (expression -> expression AND expression .) ]


state 128

    (68) expression -> expression OR expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIVIDE_INT resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    THEN            reduce using rule 68 (expression -> expression OR expression .)
    DO              reduce using rule 68 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 68 (expression -> expression OR expression .)
    RPAREN          reduce using rule 68 (expression -> expression OR expression .)
    COMMA           reduce using rule 68 (expression -> expression OR expression .)
    TO              reduce using rule 68 (expression -> expression OR expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85

  ! PLUS            [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! DIVIDE_INT      [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! NEQUAL          [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! XOR             [ reduce using rule 68 (expression -> expression OR expression .) ]


state 129

    (69) expression -> expression XOR expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIVIDE_INT resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    THEN            reduce using rule 69 (expression -> expression XOR expression .)
    DO              reduce using rule 69 (expression -> expression XOR expression .)
    SEMICOLON       reduce using rule 69 (expression -> expression XOR expression .)
    RPAREN          reduce using rule 69 (expression -> expression XOR expression .)
    COMMA           reduce using rule 69 (expression -> expression XOR expression .)
    TO              reduce using rule 69 (expression -> expression XOR expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85

  ! PLUS            [ reduce using rule 69 (expression -> expression XOR expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> expression XOR expression .) ]
  ! TIMES           [ reduce using rule 69 (expression -> expression XOR expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression -> expression XOR expression .) ]
  ! DIVIDE_INT      [ reduce using rule 69 (expression -> expression XOR expression .) ]
  ! MODULO          [ reduce using rule 69 (expression -> expression XOR expression .) ]
  ! EQUAL           [ reduce using rule 69 (expression -> expression XOR expression .) ]
  ! NEQUAL          [ reduce using rule 69 (expression -> expression XOR expression .) ]
  ! LT              [ reduce using rule 69 (expression -> expression XOR expression .) ]
  ! GT              [ reduce using rule 69 (expression -> expression XOR expression .) ]
  ! LE              [ reduce using rule 69 (expression -> expression XOR expression .) ]
  ! GE              [ reduce using rule 69 (expression -> expression XOR expression .) ]
  ! AND             [ reduce using rule 69 (expression -> expression XOR expression .) ]
  ! OR              [ reduce using rule 69 (expression -> expression XOR expression .) ]
  ! XOR             [ reduce using rule 69 (expression -> expression XOR expression .) ]


state 130

    (70) expression -> LPAREN expression RPAREN .

    THEN            reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    DIVIDE_INT      reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    NEQUAL          reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 70 (expression -> LPAREN expression RPAREN .)


state 131

    (48) while_statement -> WHILE expression DO statement .

    END             reduce using rule 48 (while_statement -> WHILE expression DO statement .)
    ID              reduce using rule 48 (while_statement -> WHILE expression DO statement .)
    IF              reduce using rule 48 (while_statement -> WHILE expression DO statement .)
    WHILE           reduce using rule 48 (while_statement -> WHILE expression DO statement .)
    REPEAT          reduce using rule 48 (while_statement -> WHILE expression DO statement .)
    FOR             reduce using rule 48 (while_statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 48 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 48 (while_statement -> WHILE expression DO statement .)


state 132

    (49) repeat_statement -> REPEAT statement_list UNTIL expression . SEMICOLON
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

    SEMICOLON       shift and go to state 150
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85


state 133

    (50) for_statement -> FOR ID ASSIGN expression . TO expression DO statement
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

    TO              shift and go to state 151
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85


state 134

    (12) var_decl -> id_list COLON type SEMICOLON .

    SEMICOLON       reduce using rule 12 (var_decl -> id_list COLON type SEMICOLON .)
    ID              reduce using rule 12 (var_decl -> id_list COLON type SEMICOLON .)


state 135

    (28) type -> ARRAY LBRACKET . INTEGER_CONST RBRACKET OF type

    INTEGER_CONST   shift and go to state 152


state 136

    (29) type -> RECORD record_fields . END
    (31) record_fields -> record_fields . var_declaration
    (9) var_declaration -> . VAR var_decl_list SEMICOLON

    END             shift and go to state 153
    VAR             shift and go to state 15

    var_declaration                shift and go to state 154

state 137

    (32) record_fields -> var_declaration .

    END             reduce using rule 32 (record_fields -> var_declaration .)
    VAR             reduce using rule 32 (record_fields -> var_declaration .)


state 138

    (30) type -> SET LBRACKET . type RBRACKET
    (24) type -> . INTEGER
    (25) type -> . REAL
    (26) type -> . BOOLEAN
    (27) type -> . STRING
    (28) type -> . ARRAY LBRACKET INTEGER_CONST RBRACKET OF type
    (29) type -> . RECORD record_fields END
    (30) type -> . SET LBRACKET type RBRACKET

    INTEGER         shift and go to state 91
    REAL            shift and go to state 92
    BOOLEAN         shift and go to state 93
    STRING          shift and go to state 94
    ARRAY           shift and go to state 95
    RECORD          shift and go to state 96
    SET             shift and go to state 97

    type                           shift and go to state 155

state 139

    (16) const_list -> const_list COMMA ID EQUAL . constant
    (75) constant -> . INTEGER_CONST
    (76) constant -> . REAL_CONST
    (77) constant -> . STRING_LITERAL
    (78) constant -> . NIL

    INTEGER_CONST   shift and go to state 101
    REAL_CONST      shift and go to state 102
    STRING_LITERAL  shift and go to state 103
    NIL             shift and go to state 104

    constant                       shift and go to state 156

state 140

    (23) param -> ID COLON . type
    (24) type -> . INTEGER
    (25) type -> . REAL
    (26) type -> . BOOLEAN
    (27) type -> . STRING
    (28) type -> . ARRAY LBRACKET INTEGER_CONST RBRACKET OF type
    (29) type -> . RECORD record_fields END
    (30) type -> . SET LBRACKET type RBRACKET

    INTEGER         shift and go to state 91
    REAL            shift and go to state 92
    BOOLEAN         shift and go to state 93
    STRING          shift and go to state 94
    ARRAY           shift and go to state 95
    RECORD          shift and go to state 96
    SET             shift and go to state 97

    type                           shift and go to state 157

state 141

    (18) procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN . SEMICOLON block

    SEMICOLON       shift and go to state 158


state 142

    (20) param_list -> param_list SEMICOLON . param
    (23) param -> . ID COLON type

    ID              shift and go to state 105

    param                          shift and go to state 159

state 143

    (19) type_declaration -> TYPE ID EQUAL type SEMICOLON .

    BEGIN           reduce using rule 19 (type_declaration -> TYPE ID EQUAL type SEMICOLON .)
    VAR             reduce using rule 19 (type_declaration -> TYPE ID EQUAL type SEMICOLON .)
    CONST           reduce using rule 19 (type_declaration -> TYPE ID EQUAL type SEMICOLON .)
    PROCEDURE       reduce using rule 19 (type_declaration -> TYPE ID EQUAL type SEMICOLON .)
    TYPE            reduce using rule 19 (type_declaration -> TYPE ID EQUAL type SEMICOLON .)


state 144

    (51) procedure_call -> ID LPAREN args RPAREN SEMICOLON .

    END             reduce using rule 51 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
    ID              reduce using rule 51 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
    IF              reduce using rule 51 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
    WHILE           reduce using rule 51 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
    REPEAT          reduce using rule 51 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
    FOR             reduce using rule 51 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
    UNTIL           reduce using rule 51 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)
    ELSE            reduce using rule 51 (procedure_call -> ID LPAREN args RPAREN SEMICOLON .)


state 145

    (52) args -> args COMMA expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

    RPAREN          reduce using rule 52 (args -> args COMMA expression .)
    COMMA           reduce using rule 52 (args -> args COMMA expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85


state 146

    (44) record_assignment -> ID DOT ID ASSIGN expression . SEMICOLON
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

    SEMICOLON       shift and go to state 160
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85


state 147

    (45) if_statement -> IF expression THEN statement else_part .

    END             reduce using rule 45 (if_statement -> IF expression THEN statement else_part .)
    ID              reduce using rule 45 (if_statement -> IF expression THEN statement else_part .)
    IF              reduce using rule 45 (if_statement -> IF expression THEN statement else_part .)
    WHILE           reduce using rule 45 (if_statement -> IF expression THEN statement else_part .)
    REPEAT          reduce using rule 45 (if_statement -> IF expression THEN statement else_part .)
    FOR             reduce using rule 45 (if_statement -> IF expression THEN statement else_part .)
    UNTIL           reduce using rule 45 (if_statement -> IF expression THEN statement else_part .)
    ELSE            reduce using rule 45 (if_statement -> IF expression THEN statement else_part .)


state 148

    (46) else_part -> ELSE . statement
    (35) statement -> . assignment_statement
    (36) statement -> . if_statement
    (37) statement -> . while_statement
    (38) statement -> . repeat_statement
    (39) statement -> . for_statement
    (40) statement -> . procedure_call
    (41) statement -> . record_assignment
    (42) statement -> . empty
    (43) assignment_statement -> . ID ASSIGN expression SEMICOLON
    (45) if_statement -> . IF expression THEN statement else_part
    (48) while_statement -> . WHILE expression DO statement
    (49) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (50) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (51) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (44) record_assignment -> . ID DOT ID ASSIGN expression SEMICOLON
    (79) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ID              shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    ELSE            reduce using rule 79 (empty -> .)
    END             reduce using rule 79 (empty -> .)
    UNTIL           reduce using rule 79 (empty -> .)

  ! ID              [ reduce using rule 79 (empty -> .) ]
  ! IF              [ reduce using rule 79 (empty -> .) ]
  ! WHILE           [ reduce using rule 79 (empty -> .) ]
  ! REPEAT          [ reduce using rule 79 (empty -> .) ]
  ! FOR             [ reduce using rule 79 (empty -> .) ]

    statement                      shift and go to state 161
    assignment_statement           shift and go to state 21
    if_statement                   shift and go to state 22
    while_statement                shift and go to state 23
    repeat_statement               shift and go to state 24
    for_statement                  shift and go to state 25
    procedure_call                 shift and go to state 26
    record_assignment              shift and go to state 27
    empty                          shift and go to state 28

state 149

    (47) else_part -> empty .

    ELSE            reduce using rule 47 (else_part -> empty .)
    END             reduce using rule 47 (else_part -> empty .)
    ID              reduce using rule 47 (else_part -> empty .)
    IF              reduce using rule 47 (else_part -> empty .)
    WHILE           reduce using rule 47 (else_part -> empty .)
    REPEAT          reduce using rule 47 (else_part -> empty .)
    FOR             reduce using rule 47 (else_part -> empty .)
    UNTIL           reduce using rule 47 (else_part -> empty .)


state 150

    (49) repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .

    END             reduce using rule 49 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    ID              reduce using rule 49 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    IF              reduce using rule 49 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    WHILE           reduce using rule 49 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    REPEAT          reduce using rule 49 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    FOR             reduce using rule 49 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    UNTIL           reduce using rule 49 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)
    ELSE            reduce using rule 49 (repeat_statement -> REPEAT statement_list UNTIL expression SEMICOLON .)


state 151

    (50) for_statement -> FOR ID ASSIGN expression TO . expression DO statement
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression DIVIDE_INT expression
    (60) expression -> . expression MODULO expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NEQUAL expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression LE expression
    (66) expression -> . expression GE expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression XOR expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . INTEGER_CONST
    (72) expression -> . REAL_CONST
    (73) expression -> . STRING_LITERAL
    (74) expression -> . ID

    LPAREN          shift and go to state 48
    INTEGER_CONST   shift and go to state 49
    REAL_CONST      shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    ID              shift and go to state 52

    expression                     shift and go to state 162

state 152

    (28) type -> ARRAY LBRACKET INTEGER_CONST . RBRACKET OF type

    RBRACKET        shift and go to state 163


state 153

    (29) type -> RECORD record_fields END .

    SEMICOLON       reduce using rule 29 (type -> RECORD record_fields END .)
    RBRACKET        reduce using rule 29 (type -> RECORD record_fields END .)
    RPAREN          reduce using rule 29 (type -> RECORD record_fields END .)


state 154

    (31) record_fields -> record_fields var_declaration .

    END             reduce using rule 31 (record_fields -> record_fields var_declaration .)
    VAR             reduce using rule 31 (record_fields -> record_fields var_declaration .)


state 155

    (30) type -> SET LBRACKET type . RBRACKET

    RBRACKET        shift and go to state 164


state 156

    (16) const_list -> const_list COMMA ID EQUAL constant .

    SEMICOLON       reduce using rule 16 (const_list -> const_list COMMA ID EQUAL constant .)
    COMMA           reduce using rule 16 (const_list -> const_list COMMA ID EQUAL constant .)


state 157

    (23) param -> ID COLON type .

    RPAREN          reduce using rule 23 (param -> ID COLON type .)
    SEMICOLON       reduce using rule 23 (param -> ID COLON type .)


state 158

    (18) procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON . block
    (2) block -> . declarations BEGIN statement_list END
    (3) declarations -> . declarations declaration
    (4) declarations -> . empty
    (79) empty -> .

    BEGIN           reduce using rule 79 (empty -> .)
    VAR             reduce using rule 79 (empty -> .)
    CONST           reduce using rule 79 (empty -> .)
    PROCEDURE       reduce using rule 79 (empty -> .)
    TYPE            reduce using rule 79 (empty -> .)

    block                          shift and go to state 165
    declarations                   shift and go to state 6
    empty                          shift and go to state 7

state 159

    (20) param_list -> param_list SEMICOLON param .

    RPAREN          reduce using rule 20 (param_list -> param_list SEMICOLON param .)
    SEMICOLON       reduce using rule 20 (param_list -> param_list SEMICOLON param .)


state 160

    (44) record_assignment -> ID DOT ID ASSIGN expression SEMICOLON .

    END             reduce using rule 44 (record_assignment -> ID DOT ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 44 (record_assignment -> ID DOT ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 44 (record_assignment -> ID DOT ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 44 (record_assignment -> ID DOT ID ASSIGN expression SEMICOLON .)
    REPEAT          reduce using rule 44 (record_assignment -> ID DOT ID ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 44 (record_assignment -> ID DOT ID ASSIGN expression SEMICOLON .)
    UNTIL           reduce using rule 44 (record_assignment -> ID DOT ID ASSIGN expression SEMICOLON .)
    ELSE            reduce using rule 44 (record_assignment -> ID DOT ID ASSIGN expression SEMICOLON .)


state 161

    (46) else_part -> ELSE statement .

    ELSE            reduce using rule 46 (else_part -> ELSE statement .)
    END             reduce using rule 46 (else_part -> ELSE statement .)
    ID              reduce using rule 46 (else_part -> ELSE statement .)
    IF              reduce using rule 46 (else_part -> ELSE statement .)
    WHILE           reduce using rule 46 (else_part -> ELSE statement .)
    REPEAT          reduce using rule 46 (else_part -> ELSE statement .)
    FOR             reduce using rule 46 (else_part -> ELSE statement .)
    UNTIL           reduce using rule 46 (else_part -> ELSE statement .)


state 162

    (50) for_statement -> FOR ID ASSIGN expression TO expression . DO statement
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . DIVIDE_INT expression
    (60) expression -> expression . MODULO expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NEQUAL expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . LE expression
    (66) expression -> expression . GE expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . XOR expression

    DO              shift and go to state 166
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    DIVIDE_INT      shift and go to state 75
    MODULO          shift and go to state 76
    EQUAL           shift and go to state 77
    NEQUAL          shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84
    XOR             shift and go to state 85


state 163

    (28) type -> ARRAY LBRACKET INTEGER_CONST RBRACKET . OF type

    OF              shift and go to state 167


state 164

    (30) type -> SET LBRACKET type RBRACKET .

    SEMICOLON       reduce using rule 30 (type -> SET LBRACKET type RBRACKET .)
    RBRACKET        reduce using rule 30 (type -> SET LBRACKET type RBRACKET .)
    RPAREN          reduce using rule 30 (type -> SET LBRACKET type RBRACKET .)


state 165

    (18) procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .

    BEGIN           reduce using rule 18 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .)
    VAR             reduce using rule 18 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .)
    CONST           reduce using rule 18 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .)
    PROCEDURE       reduce using rule 18 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .)
    TYPE            reduce using rule 18 (procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON block .)


state 166

    (50) for_statement -> FOR ID ASSIGN expression TO expression DO . statement
    (35) statement -> . assignment_statement
    (36) statement -> . if_statement
    (37) statement -> . while_statement
    (38) statement -> . repeat_statement
    (39) statement -> . for_statement
    (40) statement -> . procedure_call
    (41) statement -> . record_assignment
    (42) statement -> . empty
    (43) assignment_statement -> . ID ASSIGN expression SEMICOLON
    (45) if_statement -> . IF expression THEN statement else_part
    (48) while_statement -> . WHILE expression DO statement
    (49) repeat_statement -> . REPEAT statement_list UNTIL expression SEMICOLON
    (50) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (51) procedure_call -> . ID LPAREN args RPAREN SEMICOLON
    (44) record_assignment -> . ID DOT ID ASSIGN expression SEMICOLON
    (79) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ID              shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    ELSE            reduce using rule 79 (empty -> .)
    END             reduce using rule 79 (empty -> .)
    UNTIL           reduce using rule 79 (empty -> .)

  ! ID              [ reduce using rule 79 (empty -> .) ]
  ! IF              [ reduce using rule 79 (empty -> .) ]
  ! WHILE           [ reduce using rule 79 (empty -> .) ]
  ! REPEAT          [ reduce using rule 79 (empty -> .) ]
  ! FOR             [ reduce using rule 79 (empty -> .) ]

    statement                      shift and go to state 168
    assignment_statement           shift and go to state 21
    if_statement                   shift and go to state 22
    while_statement                shift and go to state 23
    repeat_statement               shift and go to state 24
    for_statement                  shift and go to state 25
    procedure_call                 shift and go to state 26
    record_assignment              shift and go to state 27
    empty                          shift and go to state 28

state 167

    (28) type -> ARRAY LBRACKET INTEGER_CONST RBRACKET OF . type
    (24) type -> . INTEGER
    (25) type -> . REAL
    (26) type -> . BOOLEAN
    (27) type -> . STRING
    (28) type -> . ARRAY LBRACKET INTEGER_CONST RBRACKET OF type
    (29) type -> . RECORD record_fields END
    (30) type -> . SET LBRACKET type RBRACKET

    INTEGER         shift and go to state 91
    REAL            shift and go to state 92
    BOOLEAN         shift and go to state 93
    STRING          shift and go to state 94
    ARRAY           shift and go to state 95
    RECORD          shift and go to state 96
    SET             shift and go to state 97

    type                           shift and go to state 169

state 168

    (50) for_statement -> FOR ID ASSIGN expression TO expression DO statement .

    END             reduce using rule 50 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ID              reduce using rule 50 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    IF              reduce using rule 50 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    WHILE           reduce using rule 50 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    REPEAT          reduce using rule 50 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    FOR             reduce using rule 50 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    UNTIL           reduce using rule 50 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 50 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)


state 169

    (28) type -> ARRAY LBRACKET INTEGER_CONST RBRACKET OF type .

    SEMICOLON       reduce using rule 28 (type -> ARRAY LBRACKET INTEGER_CONST RBRACKET OF type .)
    RBRACKET        reduce using rule 28 (type -> ARRAY LBRACKET INTEGER_CONST RBRACKET OF type .)
    RPAREN          reduce using rule 28 (type -> ARRAY LBRACKET INTEGER_CONST RBRACKET OF type .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 9 resolved as shift
WARNING: shift/reduce conflict for IF in state 9 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 9 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 9 resolved as shift
WARNING: shift/reduce conflict for FOR in state 9 resolved as shift
WARNING: shift/reduce conflict for END in state 19 resolved as shift
WARNING: shift/reduce conflict for ID in state 19 resolved as shift
WARNING: shift/reduce conflict for IF in state 19 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 19 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 19 resolved as shift
WARNING: shift/reduce conflict for FOR in state 19 resolved as shift
WARNING: shift/reduce conflict for ID in state 32 resolved as shift
WARNING: shift/reduce conflict for IF in state 32 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 32 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 32 resolved as shift
WARNING: shift/reduce conflict for FOR in state 32 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
WARNING: shift/reduce conflict for IF in state 54 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 54 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 54 resolved as shift
WARNING: shift/reduce conflict for FOR in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for IF in state 70 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 70 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 70 resolved as shift
WARNING: shift/reduce conflict for FOR in state 70 resolved as shift
WARNING: shift/reduce conflict for ID in state 87 resolved as shift
WARNING: shift/reduce conflict for IF in state 87 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 87 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 87 resolved as shift
WARNING: shift/reduce conflict for FOR in state 87 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 115 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 115 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_INT in state 115 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 115 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for LT in state 115 resolved as shift
WARNING: shift/reduce conflict for GT in state 115 resolved as shift
WARNING: shift/reduce conflict for LE in state 115 resolved as shift
WARNING: shift/reduce conflict for GE in state 115 resolved as shift
WARNING: shift/reduce conflict for AND in state 115 resolved as shift
WARNING: shift/reduce conflict for OR in state 115 resolved as shift
WARNING: shift/reduce conflict for XOR in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 116 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 116 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_INT in state 116 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 116 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for LT in state 116 resolved as shift
WARNING: shift/reduce conflict for GT in state 116 resolved as shift
WARNING: shift/reduce conflict for LE in state 116 resolved as shift
WARNING: shift/reduce conflict for GE in state 116 resolved as shift
WARNING: shift/reduce conflict for AND in state 116 resolved as shift
WARNING: shift/reduce conflict for OR in state 116 resolved as shift
WARNING: shift/reduce conflict for XOR in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 117 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 117 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_INT in state 117 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 117 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for LT in state 117 resolved as shift
WARNING: shift/reduce conflict for GT in state 117 resolved as shift
WARNING: shift/reduce conflict for LE in state 117 resolved as shift
WARNING: shift/reduce conflict for GE in state 117 resolved as shift
WARNING: shift/reduce conflict for AND in state 117 resolved as shift
WARNING: shift/reduce conflict for OR in state 117 resolved as shift
WARNING: shift/reduce conflict for XOR in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 118 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 118 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_INT in state 118 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 118 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for LT in state 118 resolved as shift
WARNING: shift/reduce conflict for GT in state 118 resolved as shift
WARNING: shift/reduce conflict for LE in state 118 resolved as shift
WARNING: shift/reduce conflict for GE in state 118 resolved as shift
WARNING: shift/reduce conflict for AND in state 118 resolved as shift
WARNING: shift/reduce conflict for OR in state 118 resolved as shift
WARNING: shift/reduce conflict for XOR in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 119 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 119 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_INT in state 119 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 119 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for LT in state 119 resolved as shift
WARNING: shift/reduce conflict for GT in state 119 resolved as shift
WARNING: shift/reduce conflict for LE in state 119 resolved as shift
WARNING: shift/reduce conflict for GE in state 119 resolved as shift
WARNING: shift/reduce conflict for AND in state 119 resolved as shift
WARNING: shift/reduce conflict for OR in state 119 resolved as shift
WARNING: shift/reduce conflict for XOR in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 120 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 120 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_INT in state 120 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 120 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for LT in state 120 resolved as shift
WARNING: shift/reduce conflict for GT in state 120 resolved as shift
WARNING: shift/reduce conflict for LE in state 120 resolved as shift
WARNING: shift/reduce conflict for GE in state 120 resolved as shift
WARNING: shift/reduce conflict for AND in state 120 resolved as shift
WARNING: shift/reduce conflict for OR in state 120 resolved as shift
WARNING: shift/reduce conflict for XOR in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 121 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 121 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_INT in state 121 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 121 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for LT in state 121 resolved as shift
WARNING: shift/reduce conflict for GT in state 121 resolved as shift
WARNING: shift/reduce conflict for LE in state 121 resolved as shift
WARNING: shift/reduce conflict for GE in state 121 resolved as shift
WARNING: shift/reduce conflict for AND in state 121 resolved as shift
WARNING: shift/reduce conflict for OR in state 121 resolved as shift
WARNING: shift/reduce conflict for XOR in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 122 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 122 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_INT in state 122 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 122 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 122 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 122 resolved as shift
WARNING: shift/reduce conflict for LT in state 122 resolved as shift
WARNING: shift/reduce conflict for GT in state 122 resolved as shift
WARNING: shift/reduce conflict for LE in state 122 resolved as shift
WARNING: shift/reduce conflict for GE in state 122 resolved as shift
WARNING: shift/reduce conflict for AND in state 122 resolved as shift
WARNING: shift/reduce conflict for OR in state 122 resolved as shift
WARNING: shift/reduce conflict for XOR in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 123 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 123 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_INT in state 123 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 123 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for LT in state 123 resolved as shift
WARNING: shift/reduce conflict for GT in state 123 resolved as shift
WARNING: shift/reduce conflict for LE in state 123 resolved as shift
WARNING: shift/reduce conflict for GE in state 123 resolved as shift
WARNING: shift/reduce conflict for AND in state 123 resolved as shift
WARNING: shift/reduce conflict for OR in state 123 resolved as shift
WARNING: shift/reduce conflict for XOR in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 124 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 124 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_INT in state 124 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 124 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for LT in state 124 resolved as shift
WARNING: shift/reduce conflict for GT in state 124 resolved as shift
WARNING: shift/reduce conflict for LE in state 124 resolved as shift
WARNING: shift/reduce conflict for GE in state 124 resolved as shift
WARNING: shift/reduce conflict for AND in state 124 resolved as shift
WARNING: shift/reduce conflict for OR in state 124 resolved as shift
WARNING: shift/reduce conflict for XOR in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 125 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 125 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_INT in state 125 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 125 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for LT in state 125 resolved as shift
WARNING: shift/reduce conflict for GT in state 125 resolved as shift
WARNING: shift/reduce conflict for LE in state 125 resolved as shift
WARNING: shift/reduce conflict for GE in state 125 resolved as shift
WARNING: shift/reduce conflict for AND in state 125 resolved as shift
WARNING: shift/reduce conflict for OR in state 125 resolved as shift
WARNING: shift/reduce conflict for XOR in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 126 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 126 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_INT in state 126 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 126 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for LT in state 126 resolved as shift
WARNING: shift/reduce conflict for GT in state 126 resolved as shift
WARNING: shift/reduce conflict for LE in state 126 resolved as shift
WARNING: shift/reduce conflict for GE in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for OR in state 126 resolved as shift
WARNING: shift/reduce conflict for XOR in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 127 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 127 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_INT in state 127 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 127 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for LT in state 127 resolved as shift
WARNING: shift/reduce conflict for GT in state 127 resolved as shift
WARNING: shift/reduce conflict for LE in state 127 resolved as shift
WARNING: shift/reduce conflict for GE in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 127 resolved as shift
WARNING: shift/reduce conflict for OR in state 127 resolved as shift
WARNING: shift/reduce conflict for XOR in state 127 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 128 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 128 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 128 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_INT in state 128 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 128 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 128 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 128 resolved as shift
WARNING: shift/reduce conflict for LT in state 128 resolved as shift
WARNING: shift/reduce conflict for GT in state 128 resolved as shift
WARNING: shift/reduce conflict for LE in state 128 resolved as shift
WARNING: shift/reduce conflict for GE in state 128 resolved as shift
WARNING: shift/reduce conflict for AND in state 128 resolved as shift
WARNING: shift/reduce conflict for OR in state 128 resolved as shift
WARNING: shift/reduce conflict for XOR in state 128 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 129 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 129 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_INT in state 129 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 129 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 129 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 129 resolved as shift
WARNING: shift/reduce conflict for LT in state 129 resolved as shift
WARNING: shift/reduce conflict for GT in state 129 resolved as shift
WARNING: shift/reduce conflict for LE in state 129 resolved as shift
WARNING: shift/reduce conflict for GE in state 129 resolved as shift
WARNING: shift/reduce conflict for AND in state 129 resolved as shift
WARNING: shift/reduce conflict for OR in state 129 resolved as shift
WARNING: shift/reduce conflict for XOR in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 148 resolved as shift
WARNING: shift/reduce conflict for IF in state 148 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 148 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 148 resolved as shift
WARNING: shift/reduce conflict for FOR in state 148 resolved as shift
WARNING: shift/reduce conflict for ID in state 166 resolved as shift
WARNING: shift/reduce conflict for IF in state 166 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 166 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 166 resolved as shift
WARNING: shift/reduce conflict for FOR in state 166 resolved as shift
