Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSOLUTE
    ASM
    DESTRUCTOR
    EXTERNAL
    FILE
    FORWARD
    GOTO
    IMPLEMENTATION
    IN
    INLINE
    INTERFACE
    INTERRUPT
    LABEL
    NIL
    OBJECT
    OFF
    PACKED
    PRIVATE
    SET
    UNIT
    VIRTUAL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON uses_clause_opt block DOT
Rule 2     uses_clause_opt -> uses_clause
Rule 3     uses_clause_opt -> empty
Rule 4     unit_list -> unit_list COMMA ID
Rule 5     unit_list -> ID
Rule 6     uses_clause -> USES unit_list SEMICOLON
Rule 7     block -> declarations compound_statement
Rule 8     declarations -> declaration_list
Rule 9     declarations -> empty
Rule 10    declaration_list -> declaration_list declaration
Rule 11    declaration_list -> declaration
Rule 12    declaration -> var_declaration
Rule 13    declaration -> const_declaration
Rule 14    declaration -> type_declaration
Rule 15    declaration -> procedure_declaration
Rule 16    declaration -> function_declaration
Rule 17    var_declaration -> VAR var_declaration_list
Rule 18    var_declaration_list -> var_declaration_list var_decl
Rule 19    var_declaration_list -> var_decl
Rule 20    var_decl -> id_list COLON type SEMICOLON
Rule 21    id_list -> id_list COMMA ID
Rule 22    id_list -> ID
Rule 23    const_declaration -> CONST const_list
Rule 24    const_list -> const_list const_definition SEMICOLON
Rule 25    const_list -> const_definition SEMICOLON
Rule 26    const_definition -> ID EQUAL constant
Rule 27    formal_parameter_list_opt -> LPAREN formal_parameter_list RPAREN
Rule 28    formal_parameter_list_opt -> empty
Rule 29    formal_parameter_list -> formal_parameter_list SEMICOLON formal_parameter
Rule 30    formal_parameter_list -> formal_parameter
Rule 31    formal_parameter -> id_list COLON type
Rule 32    type_declaration -> TYPE type_list
Rule 33    type_list -> type_list type_definition SEMICOLON
Rule 34    type_list -> type_definition SEMICOLON
Rule 35    type_definition -> ID EQUAL type
Rule 36    type -> simple_type
Rule 37    type -> array_type
Rule 38    type -> record_type
Rule 39    type -> class_type
Rule 40    class_type -> CLASS class_body END
Rule 41    class_body -> class_member_list
Rule 42    class_member_list -> class_member_list class_member
Rule 43    class_member_list -> class_member
Rule 44    class_member -> class_variable_declaration
Rule 45    class_member -> constructor_declaration
Rule 46    class_member -> class_function_declaration
Rule 47    class_member -> class_procedure_declaration
Rule 48    class_variable_declaration -> ID COLON type SEMICOLON
Rule 49    constructor_declaration -> CONSTRUCTOR ID formal_parameter_list_opt SEMICOLON
Rule 50    class_function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON
Rule 51    function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON
Rule 52    procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON
Rule 53    class_procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON
Rule 54    simple_type -> subrange_type
Rule 55    simple_type -> type_identifier
Rule 56    subrange_type -> constant DOTDOT constant
Rule 57    array_type -> ARRAY LBRACKET index_type RBRACKET OF type
Rule 58    index_type -> simple_type
Rule 59    record_type -> RECORD record_fields END
Rule 60    record_fields -> field_list
Rule 61    field_list -> field_list field_declaration SEMICOLON
Rule 62    field_list -> field_declaration SEMICOLON
Rule 63    field_declaration -> id_list COLON type
Rule 64    type_identifier -> ID
Rule 65    type_identifier -> predefined_type
Rule 66    predefined_type -> INTEGER
Rule 67    predefined_type -> REAL
Rule 68    predefined_type -> BOOLEAN
Rule 69    predefined_type -> STRING
Rule 70    compound_statement -> BEGIN statement_list END
Rule 71    statement_list -> statement
Rule 72    statement_list -> statement_list SEMICOLON statement
Rule 73    statement -> simple_statement
Rule 74    statement -> structured_statement
Rule 75    simple_statement -> assignment_statement
Rule 76    simple_statement -> procedure_call_statement
Rule 77    simple_statement -> empty
Rule 78    assignment_statement -> variable ASSIGN expression
Rule 79    variable -> ID
Rule 80    variable -> variable DOT ID
Rule 81    variable -> variable LBRACKET expression_list RBRACKET
Rule 82    expression_list -> expression
Rule 83    expression_list -> expression_list COMMA expression
Rule 84    procedure_call_statement -> procedure_call
Rule 85    procedure_call -> ID LPAREN args_optional RPAREN
Rule 86    args -> args COMMA expression
Rule 87    args -> expression
Rule 88    structured_statement -> compound_statement
Rule 89    structured_statement -> if_statement
Rule 90    structured_statement -> while_statement
Rule 91    structured_statement -> repeat_statement
Rule 92    structured_statement -> for_statement
Rule 93    structured_statement -> case_statement
Rule 94    structured_statement -> record_assignment
Rule 95    if_statement -> IF expression THEN statement else_part
Rule 96    else_part -> ELSE statement
Rule 97    else_part -> empty
Rule 98    while_statement -> WHILE expression DO statement
Rule 99    repeat_statement -> REPEAT statement_list UNTIL expression
Rule 100   for_statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 101   for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement
Rule 102   case_statement -> CASE expression OF case_element_list else_clause_optional END
Rule 103   case_element_list -> case_element_list semicolon_optional case_element
Rule 104   case_element_list -> case_element
Rule 105   case_element -> case_label_list COLON statement
Rule 106   case_label_list -> case_label_list COMMA case_label
Rule 107   case_label_list -> case_label
Rule 108   case_label -> constant
Rule 109   else_clause_optional -> semicolon_optional ELSE statement semicolon_optional
Rule 110   else_clause_optional -> empty
Rule 111   semicolon_optional -> SEMICOLON
Rule 112   semicolon_optional -> empty
Rule 113   record_assignment -> ID DOT ID ASSIGN expression
Rule 114   expression -> expression PLUS expression
Rule 115   expression -> expression MINUS expression
Rule 116   expression -> expression TIMES expression
Rule 117   expression -> expression DIVIDE expression
Rule 118   expression -> expression DIVIDE_INT expression
Rule 119   expression -> expression MODULO expression
Rule 120   expression -> expression SHL expression
Rule 121   expression -> expression SHR expression
Rule 122   expression -> expression EQUAL expression
Rule 123   expression -> expression NEQUAL expression
Rule 124   expression -> expression LT expression
Rule 125   expression -> expression GT expression
Rule 126   expression -> expression LE expression
Rule 127   expression -> expression GE expression
Rule 128   expression -> expression AND expression
Rule 129   expression -> expression OR expression
Rule 130   expression -> expression XOR expression
Rule 131   expression -> NOT expression
Rule 132   expression -> LPAREN expression RPAREN
Rule 133   expression -> function_call
Rule 134   expression -> variable
Rule 135   expression -> INTEGER_CONST
Rule 136   expression -> REAL_CONST
Rule 137   expression -> STRING_LITERAL
Rule 138   function_call -> ID LPAREN args_optional RPAREN
Rule 139   args_optional -> args
Rule 140   args_optional -> empty
Rule 141   constant -> UNSIGNED_NUMBER
Rule 142   constant -> sign UNSIGNED_NUMBER
Rule 143   constant -> STRING_LITERAL
Rule 144   constant -> constant_identifier
Rule 145   UNSIGNED_NUMBER -> INTEGER_CONST
Rule 146   UNSIGNED_NUMBER -> REAL_CONST
Rule 147   sign -> PLUS
Rule 148   sign -> MINUS
Rule 149   constant_identifier -> ID
Rule 150   empty -> <empty>

Terminals, with rules where they appear

ABSOLUTE             : 
AND                  : 128
ARRAY                : 57
ASM                  : 
ASSIGN               : 78 100 101 113
BEGIN                : 70
BOOLEAN              : 68
CASE                 : 102
CLASS                : 40
COLON                : 20 31 48 50 51 63 105
COMMA                : 4 21 83 86 106
CONST                : 23
CONSTRUCTOR          : 49
DESTRUCTOR           : 
DIVIDE               : 117
DIVIDE_INT           : 118
DO                   : 98 100 101
DOT                  : 1 80 113
DOTDOT               : 56
DOWNTO               : 101
ELSE                 : 96 109
END                  : 40 59 70 102
EQUAL                : 26 35 122
EXTERNAL             : 
FILE                 : 
FOR                  : 100 101
FORWARD              : 
FUNCTION             : 50 51
GE                   : 127
GOTO                 : 
GT                   : 125
ID                   : 1 4 5 21 22 26 35 48 49 50 51 52 53 64 79 80 85 100 101 113 113 138 149
IF                   : 95
IMPLEMENTATION       : 
IN                   : 
INLINE               : 
INTEGER              : 66
INTEGER_CONST        : 135 145
INTERFACE            : 
INTERRUPT            : 
LABEL                : 
LBRACKET             : 57 81
LE                   : 126
LPAREN               : 27 85 132 138
LT                   : 124
MINUS                : 115 148
MODULO               : 119
NEQUAL               : 123
NIL                  : 
NOT                  : 131
OBJECT               : 
OF                   : 57 102
OFF                  : 
OR                   : 129
PACKED               : 
PLUS                 : 114 147
PRIVATE              : 
PROCEDURE            : 52 53
PROGRAM              : 1
RBRACKET             : 57 81
REAL                 : 67
REAL_CONST           : 136 146
RECORD               : 59
REPEAT               : 99
RPAREN               : 27 85 132 138
SEMICOLON            : 1 6 20 24 25 29 33 34 48 49 50 51 51 52 52 53 61 62 72 111
SET                  : 
SHL                  : 120
SHR                  : 121
STRING               : 69
STRING_LITERAL       : 137 143
THEN                 : 95
TIMES                : 116
TO                   : 100
TYPE                 : 32
UNIT                 : 
UNTIL                : 99
USES                 : 6
VAR                  : 17
VIRTUAL              : 
WHILE                : 98
WITH                 : 
XOR                  : 130
error                : 

Nonterminals, with rules where they appear

UNSIGNED_NUMBER      : 141 142
args                 : 86 139
args_optional        : 85 138
array_type           : 37
assignment_statement : 75
block                : 1 51 52
case_element         : 103 104
case_element_list    : 102 103
case_label           : 106 107
case_label_list      : 105 106
case_statement       : 93
class_body           : 40
class_function_declaration : 46
class_member         : 42 43
class_member_list    : 41 42
class_procedure_declaration : 47
class_type           : 39
class_variable_declaration : 44
compound_statement   : 7 88
const_declaration    : 13
const_definition     : 24 25
const_list           : 23 24
constant             : 26 56 56 108
constant_identifier  : 144
constructor_declaration : 45
declaration          : 10 11
declaration_list     : 8 10
declarations         : 7
else_clause_optional : 102
else_part            : 95
empty                : 3 9 28 77 97 110 112 140
expression           : 78 82 83 86 87 95 98 99 100 100 101 101 102 113 114 114 115 115 116 116 117 117 118 118 119 119 120 120 121 121 122 122 123 123 124 124 125 125 126 126 127 127 128 128 129 129 130 130 131 132
expression_list      : 81 83
field_declaration    : 61 62
field_list           : 60 61
for_statement        : 92
formal_parameter     : 29 30
formal_parameter_list : 27 29
formal_parameter_list_opt : 49 50 51 52 53
function_call        : 133
function_declaration : 16
id_list              : 20 21 31 63
if_statement         : 89
index_type           : 57
predefined_type      : 65
procedure_call       : 84
procedure_call_statement : 76
procedure_declaration : 15
program              : 0
record_assignment    : 94
record_fields        : 59
record_type          : 38
repeat_statement     : 91
semicolon_optional   : 103 109 109
sign                 : 142
simple_statement     : 73
simple_type          : 36 58
statement            : 71 72 95 96 98 100 101 105 109
statement_list       : 70 72 99
structured_statement : 74
subrange_type        : 54
type                 : 20 31 35 48 50 51 57 63
type_declaration     : 14
type_definition      : 33 34
type_identifier      : 55
type_list            : 32 33
unit_list            : 4 6
uses_clause          : 2
uses_clause_opt      : 1
var_decl             : 18 19
var_declaration      : 12
var_declaration_list : 17 18
variable             : 78 80 81 134
while_statement      : 90

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON uses_clause_opt block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON uses_clause_opt block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON uses_clause_opt block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . uses_clause_opt block DOT
    (2) uses_clause_opt -> . uses_clause
    (3) uses_clause_opt -> . empty
    (6) uses_clause -> . USES unit_list SEMICOLON
    (150) empty -> .

    USES            shift and go to state 8
    VAR             reduce using rule 150 (empty -> .)
    CONST           reduce using rule 150 (empty -> .)
    TYPE            reduce using rule 150 (empty -> .)
    PROCEDURE       reduce using rule 150 (empty -> .)
    FUNCTION        reduce using rule 150 (empty -> .)
    BEGIN           reduce using rule 150 (empty -> .)

    uses_clause_opt                shift and go to state 5
    uses_clause                    shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON uses_clause_opt . block DOT
    (7) block -> . declarations compound_statement
    (8) declarations -> . declaration_list
    (9) declarations -> . empty
    (10) declaration_list -> . declaration_list declaration
    (11) declaration_list -> . declaration
    (150) empty -> .
    (12) declaration -> . var_declaration
    (13) declaration -> . const_declaration
    (14) declaration -> . type_declaration
    (15) declaration -> . procedure_declaration
    (16) declaration -> . function_declaration
    (17) var_declaration -> . VAR var_declaration_list
    (23) const_declaration -> . CONST const_list
    (32) type_declaration -> . TYPE type_list
    (52) procedure_declaration -> . PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON
    (51) function_declaration -> . FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON

    BEGIN           reduce using rule 150 (empty -> .)
    VAR             shift and go to state 19
    CONST           shift and go to state 20
    TYPE            shift and go to state 21
    PROCEDURE       shift and go to state 22
    FUNCTION        shift and go to state 23

    block                          shift and go to state 9
    declarations                   shift and go to state 10
    declaration_list               shift and go to state 11
    empty                          shift and go to state 12
    declaration                    shift and go to state 13
    var_declaration                shift and go to state 14
    const_declaration              shift and go to state 15
    type_declaration               shift and go to state 16
    procedure_declaration          shift and go to state 17
    function_declaration           shift and go to state 18

state 6

    (2) uses_clause_opt -> uses_clause .

    VAR             reduce using rule 2 (uses_clause_opt -> uses_clause .)
    CONST           reduce using rule 2 (uses_clause_opt -> uses_clause .)
    TYPE            reduce using rule 2 (uses_clause_opt -> uses_clause .)
    PROCEDURE       reduce using rule 2 (uses_clause_opt -> uses_clause .)
    FUNCTION        reduce using rule 2 (uses_clause_opt -> uses_clause .)
    BEGIN           reduce using rule 2 (uses_clause_opt -> uses_clause .)


state 7

    (3) uses_clause_opt -> empty .

    VAR             reduce using rule 3 (uses_clause_opt -> empty .)
    CONST           reduce using rule 3 (uses_clause_opt -> empty .)
    TYPE            reduce using rule 3 (uses_clause_opt -> empty .)
    PROCEDURE       reduce using rule 3 (uses_clause_opt -> empty .)
    FUNCTION        reduce using rule 3 (uses_clause_opt -> empty .)
    BEGIN           reduce using rule 3 (uses_clause_opt -> empty .)


state 8

    (6) uses_clause -> USES . unit_list SEMICOLON
    (4) unit_list -> . unit_list COMMA ID
    (5) unit_list -> . ID

    ID              shift and go to state 25

    unit_list                      shift and go to state 24

state 9

    (1) program -> PROGRAM ID SEMICOLON uses_clause_opt block . DOT

    DOT             shift and go to state 26


state 10

    (7) block -> declarations . compound_statement
    (70) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 28

    compound_statement             shift and go to state 27

state 11

    (8) declarations -> declaration_list .
    (10) declaration_list -> declaration_list . declaration
    (12) declaration -> . var_declaration
    (13) declaration -> . const_declaration
    (14) declaration -> . type_declaration
    (15) declaration -> . procedure_declaration
    (16) declaration -> . function_declaration
    (17) var_declaration -> . VAR var_declaration_list
    (23) const_declaration -> . CONST const_list
    (32) type_declaration -> . TYPE type_list
    (52) procedure_declaration -> . PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON
    (51) function_declaration -> . FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON

    BEGIN           reduce using rule 8 (declarations -> declaration_list .)
    VAR             shift and go to state 19
    CONST           shift and go to state 20
    TYPE            shift and go to state 21
    PROCEDURE       shift and go to state 22
    FUNCTION        shift and go to state 23

    declaration                    shift and go to state 29
    var_declaration                shift and go to state 14
    const_declaration              shift and go to state 15
    type_declaration               shift and go to state 16
    procedure_declaration          shift and go to state 17
    function_declaration           shift and go to state 18

state 12

    (9) declarations -> empty .

    BEGIN           reduce using rule 9 (declarations -> empty .)


state 13

    (11) declaration_list -> declaration .

    VAR             reduce using rule 11 (declaration_list -> declaration .)
    CONST           reduce using rule 11 (declaration_list -> declaration .)
    TYPE            reduce using rule 11 (declaration_list -> declaration .)
    PROCEDURE       reduce using rule 11 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 11 (declaration_list -> declaration .)
    BEGIN           reduce using rule 11 (declaration_list -> declaration .)


state 14

    (12) declaration -> var_declaration .

    VAR             reduce using rule 12 (declaration -> var_declaration .)
    CONST           reduce using rule 12 (declaration -> var_declaration .)
    TYPE            reduce using rule 12 (declaration -> var_declaration .)
    PROCEDURE       reduce using rule 12 (declaration -> var_declaration .)
    FUNCTION        reduce using rule 12 (declaration -> var_declaration .)
    BEGIN           reduce using rule 12 (declaration -> var_declaration .)


state 15

    (13) declaration -> const_declaration .

    VAR             reduce using rule 13 (declaration -> const_declaration .)
    CONST           reduce using rule 13 (declaration -> const_declaration .)
    TYPE            reduce using rule 13 (declaration -> const_declaration .)
    PROCEDURE       reduce using rule 13 (declaration -> const_declaration .)
    FUNCTION        reduce using rule 13 (declaration -> const_declaration .)
    BEGIN           reduce using rule 13 (declaration -> const_declaration .)


state 16

    (14) declaration -> type_declaration .

    VAR             reduce using rule 14 (declaration -> type_declaration .)
    CONST           reduce using rule 14 (declaration -> type_declaration .)
    TYPE            reduce using rule 14 (declaration -> type_declaration .)
    PROCEDURE       reduce using rule 14 (declaration -> type_declaration .)
    FUNCTION        reduce using rule 14 (declaration -> type_declaration .)
    BEGIN           reduce using rule 14 (declaration -> type_declaration .)


state 17

    (15) declaration -> procedure_declaration .

    VAR             reduce using rule 15 (declaration -> procedure_declaration .)
    CONST           reduce using rule 15 (declaration -> procedure_declaration .)
    TYPE            reduce using rule 15 (declaration -> procedure_declaration .)
    PROCEDURE       reduce using rule 15 (declaration -> procedure_declaration .)
    FUNCTION        reduce using rule 15 (declaration -> procedure_declaration .)
    BEGIN           reduce using rule 15 (declaration -> procedure_declaration .)


state 18

    (16) declaration -> function_declaration .

    VAR             reduce using rule 16 (declaration -> function_declaration .)
    CONST           reduce using rule 16 (declaration -> function_declaration .)
    TYPE            reduce using rule 16 (declaration -> function_declaration .)
    PROCEDURE       reduce using rule 16 (declaration -> function_declaration .)
    FUNCTION        reduce using rule 16 (declaration -> function_declaration .)
    BEGIN           reduce using rule 16 (declaration -> function_declaration .)


state 19

    (17) var_declaration -> VAR . var_declaration_list
    (18) var_declaration_list -> . var_declaration_list var_decl
    (19) var_declaration_list -> . var_decl
    (20) var_decl -> . id_list COLON type SEMICOLON
    (21) id_list -> . id_list COMMA ID
    (22) id_list -> . ID

    ID              shift and go to state 33

    var_declaration_list           shift and go to state 30
    var_decl                       shift and go to state 31
    id_list                        shift and go to state 32

state 20

    (23) const_declaration -> CONST . const_list
    (24) const_list -> . const_list const_definition SEMICOLON
    (25) const_list -> . const_definition SEMICOLON
    (26) const_definition -> . ID EQUAL constant

    ID              shift and go to state 36

    const_list                     shift and go to state 34
    const_definition               shift and go to state 35

state 21

    (32) type_declaration -> TYPE . type_list
    (33) type_list -> . type_list type_definition SEMICOLON
    (34) type_list -> . type_definition SEMICOLON
    (35) type_definition -> . ID EQUAL type

    ID              shift and go to state 39

    type_list                      shift and go to state 37
    type_definition                shift and go to state 38

state 22

    (52) procedure_declaration -> PROCEDURE . ID formal_parameter_list_opt SEMICOLON block SEMICOLON

    ID              shift and go to state 40


state 23

    (51) function_declaration -> FUNCTION . ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON

    ID              shift and go to state 41


state 24

    (6) uses_clause -> USES unit_list . SEMICOLON
    (4) unit_list -> unit_list . COMMA ID

    SEMICOLON       shift and go to state 42
    COMMA           shift and go to state 43


state 25

    (5) unit_list -> ID .

    SEMICOLON       reduce using rule 5 (unit_list -> ID .)
    COMMA           reduce using rule 5 (unit_list -> ID .)


state 26

    (1) program -> PROGRAM ID SEMICOLON uses_clause_opt block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON uses_clause_opt block DOT .)


state 27

    (7) block -> declarations compound_statement .

    DOT             reduce using rule 7 (block -> declarations compound_statement .)
    SEMICOLON       reduce using rule 7 (block -> declarations compound_statement .)


state 28

    (70) compound_statement -> BEGIN . statement_list END
    (71) statement_list -> . statement
    (72) statement_list -> . statement_list SEMICOLON statement
    (73) statement -> . simple_statement
    (74) statement -> . structured_statement
    (75) simple_statement -> . assignment_statement
    (76) simple_statement -> . procedure_call_statement
    (77) simple_statement -> . empty
    (88) structured_statement -> . compound_statement
    (89) structured_statement -> . if_statement
    (90) structured_statement -> . while_statement
    (91) structured_statement -> . repeat_statement
    (92) structured_statement -> . for_statement
    (93) structured_statement -> . case_statement
    (94) structured_statement -> . record_assignment
    (78) assignment_statement -> . variable ASSIGN expression
    (84) procedure_call_statement -> . procedure_call
    (150) empty -> .
    (70) compound_statement -> . BEGIN statement_list END
    (95) if_statement -> . IF expression THEN statement else_part
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_list UNTIL expression
    (100) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (101) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (102) case_statement -> . CASE expression OF case_element_list else_clause_optional END
    (113) record_assignment -> . ID DOT ID ASSIGN expression
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET
    (85) procedure_call -> . ID LPAREN args_optional RPAREN

    END             reduce using rule 150 (empty -> .)
    SEMICOLON       reduce using rule 150 (empty -> .)
    BEGIN           shift and go to state 28
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    REPEAT          shift and go to state 62
    FOR             shift and go to state 63
    CASE            shift and go to state 65
    ID              shift and go to state 64

    statement_list                 shift and go to state 44
    statement                      shift and go to state 45
    simple_statement               shift and go to state 46
    structured_statement           shift and go to state 47
    assignment_statement           shift and go to state 48
    procedure_call_statement       shift and go to state 49
    empty                          shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    while_statement                shift and go to state 53
    repeat_statement               shift and go to state 54
    for_statement                  shift and go to state 55
    case_statement                 shift and go to state 56
    record_assignment              shift and go to state 57
    variable                       shift and go to state 58
    procedure_call                 shift and go to state 59

state 29

    (10) declaration_list -> declaration_list declaration .

    VAR             reduce using rule 10 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 10 (declaration_list -> declaration_list declaration .)
    TYPE            reduce using rule 10 (declaration_list -> declaration_list declaration .)
    PROCEDURE       reduce using rule 10 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 10 (declaration_list -> declaration_list declaration .)
    BEGIN           reduce using rule 10 (declaration_list -> declaration_list declaration .)


state 30

    (17) var_declaration -> VAR var_declaration_list .
    (18) var_declaration_list -> var_declaration_list . var_decl
    (20) var_decl -> . id_list COLON type SEMICOLON
    (21) id_list -> . id_list COMMA ID
    (22) id_list -> . ID

    VAR             reduce using rule 17 (var_declaration -> VAR var_declaration_list .)
    CONST           reduce using rule 17 (var_declaration -> VAR var_declaration_list .)
    TYPE            reduce using rule 17 (var_declaration -> VAR var_declaration_list .)
    PROCEDURE       reduce using rule 17 (var_declaration -> VAR var_declaration_list .)
    FUNCTION        reduce using rule 17 (var_declaration -> VAR var_declaration_list .)
    BEGIN           reduce using rule 17 (var_declaration -> VAR var_declaration_list .)
    ID              shift and go to state 33

    var_decl                       shift and go to state 66
    id_list                        shift and go to state 32

state 31

    (19) var_declaration_list -> var_decl .

    ID              reduce using rule 19 (var_declaration_list -> var_decl .)
    VAR             reduce using rule 19 (var_declaration_list -> var_decl .)
    CONST           reduce using rule 19 (var_declaration_list -> var_decl .)
    TYPE            reduce using rule 19 (var_declaration_list -> var_decl .)
    PROCEDURE       reduce using rule 19 (var_declaration_list -> var_decl .)
    FUNCTION        reduce using rule 19 (var_declaration_list -> var_decl .)
    BEGIN           reduce using rule 19 (var_declaration_list -> var_decl .)


state 32

    (20) var_decl -> id_list . COLON type SEMICOLON
    (21) id_list -> id_list . COMMA ID

    COLON           shift and go to state 67
    COMMA           shift and go to state 68


state 33

    (22) id_list -> ID .

    COLON           reduce using rule 22 (id_list -> ID .)
    COMMA           reduce using rule 22 (id_list -> ID .)


state 34

    (23) const_declaration -> CONST const_list .
    (24) const_list -> const_list . const_definition SEMICOLON
    (26) const_definition -> . ID EQUAL constant

    VAR             reduce using rule 23 (const_declaration -> CONST const_list .)
    CONST           reduce using rule 23 (const_declaration -> CONST const_list .)
    TYPE            reduce using rule 23 (const_declaration -> CONST const_list .)
    PROCEDURE       reduce using rule 23 (const_declaration -> CONST const_list .)
    FUNCTION        reduce using rule 23 (const_declaration -> CONST const_list .)
    BEGIN           reduce using rule 23 (const_declaration -> CONST const_list .)
    ID              shift and go to state 36

    const_definition               shift and go to state 69

state 35

    (25) const_list -> const_definition . SEMICOLON

    SEMICOLON       shift and go to state 70


state 36

    (26) const_definition -> ID . EQUAL constant

    EQUAL           shift and go to state 71


state 37

    (32) type_declaration -> TYPE type_list .
    (33) type_list -> type_list . type_definition SEMICOLON
    (35) type_definition -> . ID EQUAL type

    VAR             reduce using rule 32 (type_declaration -> TYPE type_list .)
    CONST           reduce using rule 32 (type_declaration -> TYPE type_list .)
    TYPE            reduce using rule 32 (type_declaration -> TYPE type_list .)
    PROCEDURE       reduce using rule 32 (type_declaration -> TYPE type_list .)
    FUNCTION        reduce using rule 32 (type_declaration -> TYPE type_list .)
    BEGIN           reduce using rule 32 (type_declaration -> TYPE type_list .)
    ID              shift and go to state 39

    type_definition                shift and go to state 72

state 38

    (34) type_list -> type_definition . SEMICOLON

    SEMICOLON       shift and go to state 73


state 39

    (35) type_definition -> ID . EQUAL type

    EQUAL           shift and go to state 74


state 40

    (52) procedure_declaration -> PROCEDURE ID . formal_parameter_list_opt SEMICOLON block SEMICOLON
    (27) formal_parameter_list_opt -> . LPAREN formal_parameter_list RPAREN
    (28) formal_parameter_list_opt -> . empty
    (150) empty -> .

    LPAREN          shift and go to state 76
    SEMICOLON       reduce using rule 150 (empty -> .)

    formal_parameter_list_opt      shift and go to state 75
    empty                          shift and go to state 77

state 41

    (51) function_declaration -> FUNCTION ID . formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON
    (27) formal_parameter_list_opt -> . LPAREN formal_parameter_list RPAREN
    (28) formal_parameter_list_opt -> . empty
    (150) empty -> .

    LPAREN          shift and go to state 76
    COLON           reduce using rule 150 (empty -> .)

    formal_parameter_list_opt      shift and go to state 78
    empty                          shift and go to state 77

state 42

    (6) uses_clause -> USES unit_list SEMICOLON .

    VAR             reduce using rule 6 (uses_clause -> USES unit_list SEMICOLON .)
    CONST           reduce using rule 6 (uses_clause -> USES unit_list SEMICOLON .)
    TYPE            reduce using rule 6 (uses_clause -> USES unit_list SEMICOLON .)
    PROCEDURE       reduce using rule 6 (uses_clause -> USES unit_list SEMICOLON .)
    FUNCTION        reduce using rule 6 (uses_clause -> USES unit_list SEMICOLON .)
    BEGIN           reduce using rule 6 (uses_clause -> USES unit_list SEMICOLON .)


state 43

    (4) unit_list -> unit_list COMMA . ID

    ID              shift and go to state 79


state 44

    (70) compound_statement -> BEGIN statement_list . END
    (72) statement_list -> statement_list . SEMICOLON statement

    END             shift and go to state 80
    SEMICOLON       shift and go to state 81


state 45

    (71) statement_list -> statement .

    END             reduce using rule 71 (statement_list -> statement .)
    SEMICOLON       reduce using rule 71 (statement_list -> statement .)
    UNTIL           reduce using rule 71 (statement_list -> statement .)


state 46

    (73) statement -> simple_statement .

    END             reduce using rule 73 (statement -> simple_statement .)
    SEMICOLON       reduce using rule 73 (statement -> simple_statement .)
    UNTIL           reduce using rule 73 (statement -> simple_statement .)
    ELSE            reduce using rule 73 (statement -> simple_statement .)
    STRING_LITERAL  reduce using rule 73 (statement -> simple_statement .)
    INTEGER_CONST   reduce using rule 73 (statement -> simple_statement .)
    REAL_CONST      reduce using rule 73 (statement -> simple_statement .)
    PLUS            reduce using rule 73 (statement -> simple_statement .)
    MINUS           reduce using rule 73 (statement -> simple_statement .)
    ID              reduce using rule 73 (statement -> simple_statement .)


state 47

    (74) statement -> structured_statement .

    END             reduce using rule 74 (statement -> structured_statement .)
    SEMICOLON       reduce using rule 74 (statement -> structured_statement .)
    UNTIL           reduce using rule 74 (statement -> structured_statement .)
    ELSE            reduce using rule 74 (statement -> structured_statement .)
    STRING_LITERAL  reduce using rule 74 (statement -> structured_statement .)
    INTEGER_CONST   reduce using rule 74 (statement -> structured_statement .)
    REAL_CONST      reduce using rule 74 (statement -> structured_statement .)
    PLUS            reduce using rule 74 (statement -> structured_statement .)
    MINUS           reduce using rule 74 (statement -> structured_statement .)
    ID              reduce using rule 74 (statement -> structured_statement .)


state 48

    (75) simple_statement -> assignment_statement .

    END             reduce using rule 75 (simple_statement -> assignment_statement .)
    SEMICOLON       reduce using rule 75 (simple_statement -> assignment_statement .)
    UNTIL           reduce using rule 75 (simple_statement -> assignment_statement .)
    ELSE            reduce using rule 75 (simple_statement -> assignment_statement .)
    STRING_LITERAL  reduce using rule 75 (simple_statement -> assignment_statement .)
    INTEGER_CONST   reduce using rule 75 (simple_statement -> assignment_statement .)
    REAL_CONST      reduce using rule 75 (simple_statement -> assignment_statement .)
    PLUS            reduce using rule 75 (simple_statement -> assignment_statement .)
    MINUS           reduce using rule 75 (simple_statement -> assignment_statement .)
    ID              reduce using rule 75 (simple_statement -> assignment_statement .)


state 49

    (76) simple_statement -> procedure_call_statement .

    END             reduce using rule 76 (simple_statement -> procedure_call_statement .)
    SEMICOLON       reduce using rule 76 (simple_statement -> procedure_call_statement .)
    UNTIL           reduce using rule 76 (simple_statement -> procedure_call_statement .)
    ELSE            reduce using rule 76 (simple_statement -> procedure_call_statement .)
    STRING_LITERAL  reduce using rule 76 (simple_statement -> procedure_call_statement .)
    INTEGER_CONST   reduce using rule 76 (simple_statement -> procedure_call_statement .)
    REAL_CONST      reduce using rule 76 (simple_statement -> procedure_call_statement .)
    PLUS            reduce using rule 76 (simple_statement -> procedure_call_statement .)
    MINUS           reduce using rule 76 (simple_statement -> procedure_call_statement .)
    ID              reduce using rule 76 (simple_statement -> procedure_call_statement .)


state 50

    (77) simple_statement -> empty .

    END             reduce using rule 77 (simple_statement -> empty .)
    SEMICOLON       reduce using rule 77 (simple_statement -> empty .)
    UNTIL           reduce using rule 77 (simple_statement -> empty .)
    ELSE            reduce using rule 77 (simple_statement -> empty .)
    STRING_LITERAL  reduce using rule 77 (simple_statement -> empty .)
    INTEGER_CONST   reduce using rule 77 (simple_statement -> empty .)
    REAL_CONST      reduce using rule 77 (simple_statement -> empty .)
    PLUS            reduce using rule 77 (simple_statement -> empty .)
    MINUS           reduce using rule 77 (simple_statement -> empty .)
    ID              reduce using rule 77 (simple_statement -> empty .)


state 51

    (88) structured_statement -> compound_statement .

    END             reduce using rule 88 (structured_statement -> compound_statement .)
    SEMICOLON       reduce using rule 88 (structured_statement -> compound_statement .)
    UNTIL           reduce using rule 88 (structured_statement -> compound_statement .)
    ELSE            reduce using rule 88 (structured_statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 88 (structured_statement -> compound_statement .)
    INTEGER_CONST   reduce using rule 88 (structured_statement -> compound_statement .)
    REAL_CONST      reduce using rule 88 (structured_statement -> compound_statement .)
    PLUS            reduce using rule 88 (structured_statement -> compound_statement .)
    MINUS           reduce using rule 88 (structured_statement -> compound_statement .)
    ID              reduce using rule 88 (structured_statement -> compound_statement .)


state 52

    (89) structured_statement -> if_statement .

    END             reduce using rule 89 (structured_statement -> if_statement .)
    SEMICOLON       reduce using rule 89 (structured_statement -> if_statement .)
    UNTIL           reduce using rule 89 (structured_statement -> if_statement .)
    ELSE            reduce using rule 89 (structured_statement -> if_statement .)
    STRING_LITERAL  reduce using rule 89 (structured_statement -> if_statement .)
    INTEGER_CONST   reduce using rule 89 (structured_statement -> if_statement .)
    REAL_CONST      reduce using rule 89 (structured_statement -> if_statement .)
    PLUS            reduce using rule 89 (structured_statement -> if_statement .)
    MINUS           reduce using rule 89 (structured_statement -> if_statement .)
    ID              reduce using rule 89 (structured_statement -> if_statement .)


state 53

    (90) structured_statement -> while_statement .

    END             reduce using rule 90 (structured_statement -> while_statement .)
    SEMICOLON       reduce using rule 90 (structured_statement -> while_statement .)
    UNTIL           reduce using rule 90 (structured_statement -> while_statement .)
    ELSE            reduce using rule 90 (structured_statement -> while_statement .)
    STRING_LITERAL  reduce using rule 90 (structured_statement -> while_statement .)
    INTEGER_CONST   reduce using rule 90 (structured_statement -> while_statement .)
    REAL_CONST      reduce using rule 90 (structured_statement -> while_statement .)
    PLUS            reduce using rule 90 (structured_statement -> while_statement .)
    MINUS           reduce using rule 90 (structured_statement -> while_statement .)
    ID              reduce using rule 90 (structured_statement -> while_statement .)


state 54

    (91) structured_statement -> repeat_statement .

    END             reduce using rule 91 (structured_statement -> repeat_statement .)
    SEMICOLON       reduce using rule 91 (structured_statement -> repeat_statement .)
    UNTIL           reduce using rule 91 (structured_statement -> repeat_statement .)
    ELSE            reduce using rule 91 (structured_statement -> repeat_statement .)
    STRING_LITERAL  reduce using rule 91 (structured_statement -> repeat_statement .)
    INTEGER_CONST   reduce using rule 91 (structured_statement -> repeat_statement .)
    REAL_CONST      reduce using rule 91 (structured_statement -> repeat_statement .)
    PLUS            reduce using rule 91 (structured_statement -> repeat_statement .)
    MINUS           reduce using rule 91 (structured_statement -> repeat_statement .)
    ID              reduce using rule 91 (structured_statement -> repeat_statement .)


state 55

    (92) structured_statement -> for_statement .

    END             reduce using rule 92 (structured_statement -> for_statement .)
    SEMICOLON       reduce using rule 92 (structured_statement -> for_statement .)
    UNTIL           reduce using rule 92 (structured_statement -> for_statement .)
    ELSE            reduce using rule 92 (structured_statement -> for_statement .)
    STRING_LITERAL  reduce using rule 92 (structured_statement -> for_statement .)
    INTEGER_CONST   reduce using rule 92 (structured_statement -> for_statement .)
    REAL_CONST      reduce using rule 92 (structured_statement -> for_statement .)
    PLUS            reduce using rule 92 (structured_statement -> for_statement .)
    MINUS           reduce using rule 92 (structured_statement -> for_statement .)
    ID              reduce using rule 92 (structured_statement -> for_statement .)


state 56

    (93) structured_statement -> case_statement .

    END             reduce using rule 93 (structured_statement -> case_statement .)
    SEMICOLON       reduce using rule 93 (structured_statement -> case_statement .)
    UNTIL           reduce using rule 93 (structured_statement -> case_statement .)
    ELSE            reduce using rule 93 (structured_statement -> case_statement .)
    STRING_LITERAL  reduce using rule 93 (structured_statement -> case_statement .)
    INTEGER_CONST   reduce using rule 93 (structured_statement -> case_statement .)
    REAL_CONST      reduce using rule 93 (structured_statement -> case_statement .)
    PLUS            reduce using rule 93 (structured_statement -> case_statement .)
    MINUS           reduce using rule 93 (structured_statement -> case_statement .)
    ID              reduce using rule 93 (structured_statement -> case_statement .)


state 57

    (94) structured_statement -> record_assignment .

    END             reduce using rule 94 (structured_statement -> record_assignment .)
    SEMICOLON       reduce using rule 94 (structured_statement -> record_assignment .)
    UNTIL           reduce using rule 94 (structured_statement -> record_assignment .)
    ELSE            reduce using rule 94 (structured_statement -> record_assignment .)
    STRING_LITERAL  reduce using rule 94 (structured_statement -> record_assignment .)
    INTEGER_CONST   reduce using rule 94 (structured_statement -> record_assignment .)
    REAL_CONST      reduce using rule 94 (structured_statement -> record_assignment .)
    PLUS            reduce using rule 94 (structured_statement -> record_assignment .)
    MINUS           reduce using rule 94 (structured_statement -> record_assignment .)
    ID              reduce using rule 94 (structured_statement -> record_assignment .)


state 58

    (78) assignment_statement -> variable . ASSIGN expression
    (80) variable -> variable . DOT ID
    (81) variable -> variable . LBRACKET expression_list RBRACKET

    ASSIGN          shift and go to state 82
    DOT             shift and go to state 83
    LBRACKET        shift and go to state 84


state 59

    (84) procedure_call_statement -> procedure_call .

    END             reduce using rule 84 (procedure_call_statement -> procedure_call .)
    SEMICOLON       reduce using rule 84 (procedure_call_statement -> procedure_call .)
    UNTIL           reduce using rule 84 (procedure_call_statement -> procedure_call .)
    ELSE            reduce using rule 84 (procedure_call_statement -> procedure_call .)
    STRING_LITERAL  reduce using rule 84 (procedure_call_statement -> procedure_call .)
    INTEGER_CONST   reduce using rule 84 (procedure_call_statement -> procedure_call .)
    REAL_CONST      reduce using rule 84 (procedure_call_statement -> procedure_call .)
    PLUS            reduce using rule 84 (procedure_call_statement -> procedure_call .)
    MINUS           reduce using rule 84 (procedure_call_statement -> procedure_call .)
    ID              reduce using rule 84 (procedure_call_statement -> procedure_call .)


state 60

    (95) if_statement -> IF . expression THEN statement else_part
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 85
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 61

    (98) while_statement -> WHILE . expression DO statement
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 94
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 62

    (99) repeat_statement -> REPEAT . statement_list UNTIL expression
    (71) statement_list -> . statement
    (72) statement_list -> . statement_list SEMICOLON statement
    (73) statement -> . simple_statement
    (74) statement -> . structured_statement
    (75) simple_statement -> . assignment_statement
    (76) simple_statement -> . procedure_call_statement
    (77) simple_statement -> . empty
    (88) structured_statement -> . compound_statement
    (89) structured_statement -> . if_statement
    (90) structured_statement -> . while_statement
    (91) structured_statement -> . repeat_statement
    (92) structured_statement -> . for_statement
    (93) structured_statement -> . case_statement
    (94) structured_statement -> . record_assignment
    (78) assignment_statement -> . variable ASSIGN expression
    (84) procedure_call_statement -> . procedure_call
    (150) empty -> .
    (70) compound_statement -> . BEGIN statement_list END
    (95) if_statement -> . IF expression THEN statement else_part
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_list UNTIL expression
    (100) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (101) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (102) case_statement -> . CASE expression OF case_element_list else_clause_optional END
    (113) record_assignment -> . ID DOT ID ASSIGN expression
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET
    (85) procedure_call -> . ID LPAREN args_optional RPAREN

    UNTIL           reduce using rule 150 (empty -> .)
    SEMICOLON       reduce using rule 150 (empty -> .)
    BEGIN           shift and go to state 28
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    REPEAT          shift and go to state 62
    FOR             shift and go to state 63
    CASE            shift and go to state 65
    ID              shift and go to state 64

    statement_list                 shift and go to state 95
    statement                      shift and go to state 45
    simple_statement               shift and go to state 46
    structured_statement           shift and go to state 47
    assignment_statement           shift and go to state 48
    procedure_call_statement       shift and go to state 49
    empty                          shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    while_statement                shift and go to state 53
    repeat_statement               shift and go to state 54
    for_statement                  shift and go to state 55
    case_statement                 shift and go to state 56
    record_assignment              shift and go to state 57
    variable                       shift and go to state 58
    procedure_call                 shift and go to state 59

state 63

    (100) for_statement -> FOR . ID ASSIGN expression TO expression DO statement
    (101) for_statement -> FOR . ID ASSIGN expression DOWNTO expression DO statement

    ID              shift and go to state 96


state 64

    (113) record_assignment -> ID . DOT ID ASSIGN expression
    (79) variable -> ID .
    (85) procedure_call -> ID . LPAREN args_optional RPAREN

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 97
    ASSIGN          reduce using rule 79 (variable -> ID .)
    LBRACKET        reduce using rule 79 (variable -> ID .)
    LPAREN          shift and go to state 98

  ! DOT             [ reduce using rule 79 (variable -> ID .) ]


state 65

    (102) case_statement -> CASE . expression OF case_element_list else_clause_optional END
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 99
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 66

    (18) var_declaration_list -> var_declaration_list var_decl .

    ID              reduce using rule 18 (var_declaration_list -> var_declaration_list var_decl .)
    VAR             reduce using rule 18 (var_declaration_list -> var_declaration_list var_decl .)
    CONST           reduce using rule 18 (var_declaration_list -> var_declaration_list var_decl .)
    TYPE            reduce using rule 18 (var_declaration_list -> var_declaration_list var_decl .)
    PROCEDURE       reduce using rule 18 (var_declaration_list -> var_declaration_list var_decl .)
    FUNCTION        reduce using rule 18 (var_declaration_list -> var_declaration_list var_decl .)
    BEGIN           reduce using rule 18 (var_declaration_list -> var_declaration_list var_decl .)


state 67

    (20) var_decl -> id_list COLON . type SEMICOLON
    (36) type -> . simple_type
    (37) type -> . array_type
    (38) type -> . record_type
    (39) type -> . class_type
    (54) simple_type -> . subrange_type
    (55) simple_type -> . type_identifier
    (57) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (59) record_type -> . RECORD record_fields END
    (40) class_type -> . CLASS class_body END
    (56) subrange_type -> . constant DOTDOT constant
    (64) type_identifier -> . ID
    (65) type_identifier -> . predefined_type
    (141) constant -> . UNSIGNED_NUMBER
    (142) constant -> . sign UNSIGNED_NUMBER
    (143) constant -> . STRING_LITERAL
    (144) constant -> . constant_identifier
    (66) predefined_type -> . INTEGER
    (67) predefined_type -> . REAL
    (68) predefined_type -> . BOOLEAN
    (69) predefined_type -> . STRING
    (145) UNSIGNED_NUMBER -> . INTEGER_CONST
    (146) UNSIGNED_NUMBER -> . REAL_CONST
    (147) sign -> . PLUS
    (148) sign -> . MINUS
    (149) constant_identifier -> . ID

    ARRAY           shift and go to state 107
    RECORD          shift and go to state 108
    CLASS           shift and go to state 109
    ID              shift and go to state 111
    STRING_LITERAL  shift and go to state 115
    INTEGER         shift and go to state 117
    REAL            shift and go to state 118
    BOOLEAN         shift and go to state 119
    STRING          shift and go to state 120
    INTEGER_CONST   shift and go to state 121
    REAL_CONST      shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124

    type                           shift and go to state 100
    simple_type                    shift and go to state 101
    array_type                     shift and go to state 102
    record_type                    shift and go to state 103
    class_type                     shift and go to state 104
    subrange_type                  shift and go to state 105
    type_identifier                shift and go to state 106
    constant                       shift and go to state 110
    predefined_type                shift and go to state 112
    UNSIGNED_NUMBER                shift and go to state 113
    sign                           shift and go to state 114
    constant_identifier            shift and go to state 116

state 68

    (21) id_list -> id_list COMMA . ID

    ID              shift and go to state 125


state 69

    (24) const_list -> const_list const_definition . SEMICOLON

    SEMICOLON       shift and go to state 126


state 70

    (25) const_list -> const_definition SEMICOLON .

    ID              reduce using rule 25 (const_list -> const_definition SEMICOLON .)
    VAR             reduce using rule 25 (const_list -> const_definition SEMICOLON .)
    CONST           reduce using rule 25 (const_list -> const_definition SEMICOLON .)
    TYPE            reduce using rule 25 (const_list -> const_definition SEMICOLON .)
    PROCEDURE       reduce using rule 25 (const_list -> const_definition SEMICOLON .)
    FUNCTION        reduce using rule 25 (const_list -> const_definition SEMICOLON .)
    BEGIN           reduce using rule 25 (const_list -> const_definition SEMICOLON .)


state 71

    (26) const_definition -> ID EQUAL . constant
    (141) constant -> . UNSIGNED_NUMBER
    (142) constant -> . sign UNSIGNED_NUMBER
    (143) constant -> . STRING_LITERAL
    (144) constant -> . constant_identifier
    (145) UNSIGNED_NUMBER -> . INTEGER_CONST
    (146) UNSIGNED_NUMBER -> . REAL_CONST
    (147) sign -> . PLUS
    (148) sign -> . MINUS
    (149) constant_identifier -> . ID

    STRING_LITERAL  shift and go to state 115
    INTEGER_CONST   shift and go to state 121
    REAL_CONST      shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    ID              shift and go to state 127

    constant                       shift and go to state 128
    UNSIGNED_NUMBER                shift and go to state 113
    sign                           shift and go to state 114
    constant_identifier            shift and go to state 116

state 72

    (33) type_list -> type_list type_definition . SEMICOLON

    SEMICOLON       shift and go to state 129


state 73

    (34) type_list -> type_definition SEMICOLON .

    ID              reduce using rule 34 (type_list -> type_definition SEMICOLON .)
    VAR             reduce using rule 34 (type_list -> type_definition SEMICOLON .)
    CONST           reduce using rule 34 (type_list -> type_definition SEMICOLON .)
    TYPE            reduce using rule 34 (type_list -> type_definition SEMICOLON .)
    PROCEDURE       reduce using rule 34 (type_list -> type_definition SEMICOLON .)
    FUNCTION        reduce using rule 34 (type_list -> type_definition SEMICOLON .)
    BEGIN           reduce using rule 34 (type_list -> type_definition SEMICOLON .)


state 74

    (35) type_definition -> ID EQUAL . type
    (36) type -> . simple_type
    (37) type -> . array_type
    (38) type -> . record_type
    (39) type -> . class_type
    (54) simple_type -> . subrange_type
    (55) simple_type -> . type_identifier
    (57) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (59) record_type -> . RECORD record_fields END
    (40) class_type -> . CLASS class_body END
    (56) subrange_type -> . constant DOTDOT constant
    (64) type_identifier -> . ID
    (65) type_identifier -> . predefined_type
    (141) constant -> . UNSIGNED_NUMBER
    (142) constant -> . sign UNSIGNED_NUMBER
    (143) constant -> . STRING_LITERAL
    (144) constant -> . constant_identifier
    (66) predefined_type -> . INTEGER
    (67) predefined_type -> . REAL
    (68) predefined_type -> . BOOLEAN
    (69) predefined_type -> . STRING
    (145) UNSIGNED_NUMBER -> . INTEGER_CONST
    (146) UNSIGNED_NUMBER -> . REAL_CONST
    (147) sign -> . PLUS
    (148) sign -> . MINUS
    (149) constant_identifier -> . ID

    ARRAY           shift and go to state 107
    RECORD          shift and go to state 108
    CLASS           shift and go to state 109
    ID              shift and go to state 111
    STRING_LITERAL  shift and go to state 115
    INTEGER         shift and go to state 117
    REAL            shift and go to state 118
    BOOLEAN         shift and go to state 119
    STRING          shift and go to state 120
    INTEGER_CONST   shift and go to state 121
    REAL_CONST      shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124

    type                           shift and go to state 130
    simple_type                    shift and go to state 101
    array_type                     shift and go to state 102
    record_type                    shift and go to state 103
    class_type                     shift and go to state 104
    subrange_type                  shift and go to state 105
    type_identifier                shift and go to state 106
    constant                       shift and go to state 110
    predefined_type                shift and go to state 112
    UNSIGNED_NUMBER                shift and go to state 113
    sign                           shift and go to state 114
    constant_identifier            shift and go to state 116

state 75

    (52) procedure_declaration -> PROCEDURE ID formal_parameter_list_opt . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 131


state 76

    (27) formal_parameter_list_opt -> LPAREN . formal_parameter_list RPAREN
    (29) formal_parameter_list -> . formal_parameter_list SEMICOLON formal_parameter
    (30) formal_parameter_list -> . formal_parameter
    (31) formal_parameter -> . id_list COLON type
    (21) id_list -> . id_list COMMA ID
    (22) id_list -> . ID

    ID              shift and go to state 33

    formal_parameter_list          shift and go to state 132
    formal_parameter               shift and go to state 133
    id_list                        shift and go to state 134

state 77

    (28) formal_parameter_list_opt -> empty .

    SEMICOLON       reduce using rule 28 (formal_parameter_list_opt -> empty .)
    COLON           reduce using rule 28 (formal_parameter_list_opt -> empty .)


state 78

    (51) function_declaration -> FUNCTION ID formal_parameter_list_opt . COLON type SEMICOLON block SEMICOLON

    COLON           shift and go to state 135


state 79

    (4) unit_list -> unit_list COMMA ID .

    SEMICOLON       reduce using rule 4 (unit_list -> unit_list COMMA ID .)
    COMMA           reduce using rule 4 (unit_list -> unit_list COMMA ID .)


state 80

    (70) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 70 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 70 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 70 (compound_statement -> BEGIN statement_list END .)
    UNTIL           reduce using rule 70 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 70 (compound_statement -> BEGIN statement_list END .)
    STRING_LITERAL  reduce using rule 70 (compound_statement -> BEGIN statement_list END .)
    INTEGER_CONST   reduce using rule 70 (compound_statement -> BEGIN statement_list END .)
    REAL_CONST      reduce using rule 70 (compound_statement -> BEGIN statement_list END .)
    PLUS            reduce using rule 70 (compound_statement -> BEGIN statement_list END .)
    MINUS           reduce using rule 70 (compound_statement -> BEGIN statement_list END .)
    ID              reduce using rule 70 (compound_statement -> BEGIN statement_list END .)


state 81

    (72) statement_list -> statement_list SEMICOLON . statement
    (73) statement -> . simple_statement
    (74) statement -> . structured_statement
    (75) simple_statement -> . assignment_statement
    (76) simple_statement -> . procedure_call_statement
    (77) simple_statement -> . empty
    (88) structured_statement -> . compound_statement
    (89) structured_statement -> . if_statement
    (90) structured_statement -> . while_statement
    (91) structured_statement -> . repeat_statement
    (92) structured_statement -> . for_statement
    (93) structured_statement -> . case_statement
    (94) structured_statement -> . record_assignment
    (78) assignment_statement -> . variable ASSIGN expression
    (84) procedure_call_statement -> . procedure_call
    (150) empty -> .
    (70) compound_statement -> . BEGIN statement_list END
    (95) if_statement -> . IF expression THEN statement else_part
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_list UNTIL expression
    (100) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (101) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (102) case_statement -> . CASE expression OF case_element_list else_clause_optional END
    (113) record_assignment -> . ID DOT ID ASSIGN expression
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET
    (85) procedure_call -> . ID LPAREN args_optional RPAREN

    END             reduce using rule 150 (empty -> .)
    SEMICOLON       reduce using rule 150 (empty -> .)
    UNTIL           reduce using rule 150 (empty -> .)
    BEGIN           shift and go to state 28
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    REPEAT          shift and go to state 62
    FOR             shift and go to state 63
    CASE            shift and go to state 65
    ID              shift and go to state 64

    statement                      shift and go to state 136
    simple_statement               shift and go to state 46
    structured_statement           shift and go to state 47
    assignment_statement           shift and go to state 48
    procedure_call_statement       shift and go to state 49
    empty                          shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    while_statement                shift and go to state 53
    repeat_statement               shift and go to state 54
    for_statement                  shift and go to state 55
    case_statement                 shift and go to state 56
    record_assignment              shift and go to state 57
    variable                       shift and go to state 58
    procedure_call                 shift and go to state 59

state 82

    (78) assignment_statement -> variable ASSIGN . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    variable                       shift and go to state 89
    expression                     shift and go to state 137
    function_call                  shift and go to state 88

state 83

    (80) variable -> variable DOT . ID

    ID              shift and go to state 138


state 84

    (81) variable -> variable LBRACKET . expression_list RBRACKET
    (82) expression_list -> . expression
    (83) expression_list -> . expression_list COMMA expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    variable                       shift and go to state 89
    expression_list                shift and go to state 139
    expression                     shift and go to state 140
    function_call                  shift and go to state 88

state 85

    (95) if_statement -> IF expression . THEN statement else_part
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    XOR             shift and go to state 158


state 86

    (131) expression -> NOT . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 159
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 87

    (132) expression -> LPAREN . expression RPAREN
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 160
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 88

    (133) expression -> function_call .

    THEN            reduce using rule 133 (expression -> function_call .)
    PLUS            reduce using rule 133 (expression -> function_call .)
    MINUS           reduce using rule 133 (expression -> function_call .)
    TIMES           reduce using rule 133 (expression -> function_call .)
    DIVIDE          reduce using rule 133 (expression -> function_call .)
    DIVIDE_INT      reduce using rule 133 (expression -> function_call .)
    MODULO          reduce using rule 133 (expression -> function_call .)
    SHL             reduce using rule 133 (expression -> function_call .)
    SHR             reduce using rule 133 (expression -> function_call .)
    EQUAL           reduce using rule 133 (expression -> function_call .)
    NEQUAL          reduce using rule 133 (expression -> function_call .)
    LT              reduce using rule 133 (expression -> function_call .)
    GT              reduce using rule 133 (expression -> function_call .)
    LE              reduce using rule 133 (expression -> function_call .)
    GE              reduce using rule 133 (expression -> function_call .)
    AND             reduce using rule 133 (expression -> function_call .)
    OR              reduce using rule 133 (expression -> function_call .)
    XOR             reduce using rule 133 (expression -> function_call .)
    DO              reduce using rule 133 (expression -> function_call .)
    OF              reduce using rule 133 (expression -> function_call .)
    END             reduce using rule 133 (expression -> function_call .)
    SEMICOLON       reduce using rule 133 (expression -> function_call .)
    UNTIL           reduce using rule 133 (expression -> function_call .)
    ELSE            reduce using rule 133 (expression -> function_call .)
    STRING_LITERAL  reduce using rule 133 (expression -> function_call .)
    INTEGER_CONST   reduce using rule 133 (expression -> function_call .)
    REAL_CONST      reduce using rule 133 (expression -> function_call .)
    ID              reduce using rule 133 (expression -> function_call .)
    RBRACKET        reduce using rule 133 (expression -> function_call .)
    COMMA           reduce using rule 133 (expression -> function_call .)
    RPAREN          reduce using rule 133 (expression -> function_call .)
    TO              reduce using rule 133 (expression -> function_call .)
    DOWNTO          reduce using rule 133 (expression -> function_call .)


state 89

    (134) expression -> variable .
    (80) variable -> variable . DOT ID
    (81) variable -> variable . LBRACKET expression_list RBRACKET

    THEN            reduce using rule 134 (expression -> variable .)
    PLUS            reduce using rule 134 (expression -> variable .)
    MINUS           reduce using rule 134 (expression -> variable .)
    TIMES           reduce using rule 134 (expression -> variable .)
    DIVIDE          reduce using rule 134 (expression -> variable .)
    DIVIDE_INT      reduce using rule 134 (expression -> variable .)
    MODULO          reduce using rule 134 (expression -> variable .)
    SHL             reduce using rule 134 (expression -> variable .)
    SHR             reduce using rule 134 (expression -> variable .)
    EQUAL           reduce using rule 134 (expression -> variable .)
    NEQUAL          reduce using rule 134 (expression -> variable .)
    LT              reduce using rule 134 (expression -> variable .)
    GT              reduce using rule 134 (expression -> variable .)
    LE              reduce using rule 134 (expression -> variable .)
    GE              reduce using rule 134 (expression -> variable .)
    AND             reduce using rule 134 (expression -> variable .)
    OR              reduce using rule 134 (expression -> variable .)
    XOR             reduce using rule 134 (expression -> variable .)
    DO              reduce using rule 134 (expression -> variable .)
    OF              reduce using rule 134 (expression -> variable .)
    END             reduce using rule 134 (expression -> variable .)
    SEMICOLON       reduce using rule 134 (expression -> variable .)
    UNTIL           reduce using rule 134 (expression -> variable .)
    ELSE            reduce using rule 134 (expression -> variable .)
    STRING_LITERAL  reduce using rule 134 (expression -> variable .)
    INTEGER_CONST   reduce using rule 134 (expression -> variable .)
    REAL_CONST      reduce using rule 134 (expression -> variable .)
    ID              reduce using rule 134 (expression -> variable .)
    RBRACKET        reduce using rule 134 (expression -> variable .)
    COMMA           reduce using rule 134 (expression -> variable .)
    RPAREN          reduce using rule 134 (expression -> variable .)
    TO              reduce using rule 134 (expression -> variable .)
    DOWNTO          reduce using rule 134 (expression -> variable .)
    DOT             shift and go to state 83
    LBRACKET        shift and go to state 84


state 90

    (135) expression -> INTEGER_CONST .

    THEN            reduce using rule 135 (expression -> INTEGER_CONST .)
    PLUS            reduce using rule 135 (expression -> INTEGER_CONST .)
    MINUS           reduce using rule 135 (expression -> INTEGER_CONST .)
    TIMES           reduce using rule 135 (expression -> INTEGER_CONST .)
    DIVIDE          reduce using rule 135 (expression -> INTEGER_CONST .)
    DIVIDE_INT      reduce using rule 135 (expression -> INTEGER_CONST .)
    MODULO          reduce using rule 135 (expression -> INTEGER_CONST .)
    SHL             reduce using rule 135 (expression -> INTEGER_CONST .)
    SHR             reduce using rule 135 (expression -> INTEGER_CONST .)
    EQUAL           reduce using rule 135 (expression -> INTEGER_CONST .)
    NEQUAL          reduce using rule 135 (expression -> INTEGER_CONST .)
    LT              reduce using rule 135 (expression -> INTEGER_CONST .)
    GT              reduce using rule 135 (expression -> INTEGER_CONST .)
    LE              reduce using rule 135 (expression -> INTEGER_CONST .)
    GE              reduce using rule 135 (expression -> INTEGER_CONST .)
    AND             reduce using rule 135 (expression -> INTEGER_CONST .)
    OR              reduce using rule 135 (expression -> INTEGER_CONST .)
    XOR             reduce using rule 135 (expression -> INTEGER_CONST .)
    DO              reduce using rule 135 (expression -> INTEGER_CONST .)
    OF              reduce using rule 135 (expression -> INTEGER_CONST .)
    END             reduce using rule 135 (expression -> INTEGER_CONST .)
    SEMICOLON       reduce using rule 135 (expression -> INTEGER_CONST .)
    UNTIL           reduce using rule 135 (expression -> INTEGER_CONST .)
    ELSE            reduce using rule 135 (expression -> INTEGER_CONST .)
    STRING_LITERAL  reduce using rule 135 (expression -> INTEGER_CONST .)
    INTEGER_CONST   reduce using rule 135 (expression -> INTEGER_CONST .)
    REAL_CONST      reduce using rule 135 (expression -> INTEGER_CONST .)
    ID              reduce using rule 135 (expression -> INTEGER_CONST .)
    RBRACKET        reduce using rule 135 (expression -> INTEGER_CONST .)
    COMMA           reduce using rule 135 (expression -> INTEGER_CONST .)
    RPAREN          reduce using rule 135 (expression -> INTEGER_CONST .)
    TO              reduce using rule 135 (expression -> INTEGER_CONST .)
    DOWNTO          reduce using rule 135 (expression -> INTEGER_CONST .)


state 91

    (136) expression -> REAL_CONST .

    THEN            reduce using rule 136 (expression -> REAL_CONST .)
    PLUS            reduce using rule 136 (expression -> REAL_CONST .)
    MINUS           reduce using rule 136 (expression -> REAL_CONST .)
    TIMES           reduce using rule 136 (expression -> REAL_CONST .)
    DIVIDE          reduce using rule 136 (expression -> REAL_CONST .)
    DIVIDE_INT      reduce using rule 136 (expression -> REAL_CONST .)
    MODULO          reduce using rule 136 (expression -> REAL_CONST .)
    SHL             reduce using rule 136 (expression -> REAL_CONST .)
    SHR             reduce using rule 136 (expression -> REAL_CONST .)
    EQUAL           reduce using rule 136 (expression -> REAL_CONST .)
    NEQUAL          reduce using rule 136 (expression -> REAL_CONST .)
    LT              reduce using rule 136 (expression -> REAL_CONST .)
    GT              reduce using rule 136 (expression -> REAL_CONST .)
    LE              reduce using rule 136 (expression -> REAL_CONST .)
    GE              reduce using rule 136 (expression -> REAL_CONST .)
    AND             reduce using rule 136 (expression -> REAL_CONST .)
    OR              reduce using rule 136 (expression -> REAL_CONST .)
    XOR             reduce using rule 136 (expression -> REAL_CONST .)
    DO              reduce using rule 136 (expression -> REAL_CONST .)
    OF              reduce using rule 136 (expression -> REAL_CONST .)
    END             reduce using rule 136 (expression -> REAL_CONST .)
    SEMICOLON       reduce using rule 136 (expression -> REAL_CONST .)
    UNTIL           reduce using rule 136 (expression -> REAL_CONST .)
    ELSE            reduce using rule 136 (expression -> REAL_CONST .)
    STRING_LITERAL  reduce using rule 136 (expression -> REAL_CONST .)
    INTEGER_CONST   reduce using rule 136 (expression -> REAL_CONST .)
    REAL_CONST      reduce using rule 136 (expression -> REAL_CONST .)
    ID              reduce using rule 136 (expression -> REAL_CONST .)
    RBRACKET        reduce using rule 136 (expression -> REAL_CONST .)
    COMMA           reduce using rule 136 (expression -> REAL_CONST .)
    RPAREN          reduce using rule 136 (expression -> REAL_CONST .)
    TO              reduce using rule 136 (expression -> REAL_CONST .)
    DOWNTO          reduce using rule 136 (expression -> REAL_CONST .)


state 92

    (137) expression -> STRING_LITERAL .

    THEN            reduce using rule 137 (expression -> STRING_LITERAL .)
    PLUS            reduce using rule 137 (expression -> STRING_LITERAL .)
    MINUS           reduce using rule 137 (expression -> STRING_LITERAL .)
    TIMES           reduce using rule 137 (expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 137 (expression -> STRING_LITERAL .)
    DIVIDE_INT      reduce using rule 137 (expression -> STRING_LITERAL .)
    MODULO          reduce using rule 137 (expression -> STRING_LITERAL .)
    SHL             reduce using rule 137 (expression -> STRING_LITERAL .)
    SHR             reduce using rule 137 (expression -> STRING_LITERAL .)
    EQUAL           reduce using rule 137 (expression -> STRING_LITERAL .)
    NEQUAL          reduce using rule 137 (expression -> STRING_LITERAL .)
    LT              reduce using rule 137 (expression -> STRING_LITERAL .)
    GT              reduce using rule 137 (expression -> STRING_LITERAL .)
    LE              reduce using rule 137 (expression -> STRING_LITERAL .)
    GE              reduce using rule 137 (expression -> STRING_LITERAL .)
    AND             reduce using rule 137 (expression -> STRING_LITERAL .)
    OR              reduce using rule 137 (expression -> STRING_LITERAL .)
    XOR             reduce using rule 137 (expression -> STRING_LITERAL .)
    DO              reduce using rule 137 (expression -> STRING_LITERAL .)
    OF              reduce using rule 137 (expression -> STRING_LITERAL .)
    END             reduce using rule 137 (expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 137 (expression -> STRING_LITERAL .)
    UNTIL           reduce using rule 137 (expression -> STRING_LITERAL .)
    ELSE            reduce using rule 137 (expression -> STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 137 (expression -> STRING_LITERAL .)
    INTEGER_CONST   reduce using rule 137 (expression -> STRING_LITERAL .)
    REAL_CONST      reduce using rule 137 (expression -> STRING_LITERAL .)
    ID              reduce using rule 137 (expression -> STRING_LITERAL .)
    RBRACKET        reduce using rule 137 (expression -> STRING_LITERAL .)
    COMMA           reduce using rule 137 (expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 137 (expression -> STRING_LITERAL .)
    TO              reduce using rule 137 (expression -> STRING_LITERAL .)
    DOWNTO          reduce using rule 137 (expression -> STRING_LITERAL .)


state 93

    (138) function_call -> ID . LPAREN args_optional RPAREN
    (79) variable -> ID .

    LPAREN          shift and go to state 161
    DOT             reduce using rule 79 (variable -> ID .)
    LBRACKET        reduce using rule 79 (variable -> ID .)
    THEN            reduce using rule 79 (variable -> ID .)
    PLUS            reduce using rule 79 (variable -> ID .)
    MINUS           reduce using rule 79 (variable -> ID .)
    TIMES           reduce using rule 79 (variable -> ID .)
    DIVIDE          reduce using rule 79 (variable -> ID .)
    DIVIDE_INT      reduce using rule 79 (variable -> ID .)
    MODULO          reduce using rule 79 (variable -> ID .)
    SHL             reduce using rule 79 (variable -> ID .)
    SHR             reduce using rule 79 (variable -> ID .)
    EQUAL           reduce using rule 79 (variable -> ID .)
    NEQUAL          reduce using rule 79 (variable -> ID .)
    LT              reduce using rule 79 (variable -> ID .)
    GT              reduce using rule 79 (variable -> ID .)
    LE              reduce using rule 79 (variable -> ID .)
    GE              reduce using rule 79 (variable -> ID .)
    AND             reduce using rule 79 (variable -> ID .)
    OR              reduce using rule 79 (variable -> ID .)
    XOR             reduce using rule 79 (variable -> ID .)
    DO              reduce using rule 79 (variable -> ID .)
    OF              reduce using rule 79 (variable -> ID .)
    END             reduce using rule 79 (variable -> ID .)
    SEMICOLON       reduce using rule 79 (variable -> ID .)
    UNTIL           reduce using rule 79 (variable -> ID .)
    ELSE            reduce using rule 79 (variable -> ID .)
    STRING_LITERAL  reduce using rule 79 (variable -> ID .)
    INTEGER_CONST   reduce using rule 79 (variable -> ID .)
    REAL_CONST      reduce using rule 79 (variable -> ID .)
    ID              reduce using rule 79 (variable -> ID .)
    RBRACKET        reduce using rule 79 (variable -> ID .)
    COMMA           reduce using rule 79 (variable -> ID .)
    RPAREN          reduce using rule 79 (variable -> ID .)
    TO              reduce using rule 79 (variable -> ID .)
    DOWNTO          reduce using rule 79 (variable -> ID .)


state 94

    (98) while_statement -> WHILE expression . DO statement
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    DO              shift and go to state 162
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    XOR             shift and go to state 158


state 95

    (99) repeat_statement -> REPEAT statement_list . UNTIL expression
    (72) statement_list -> statement_list . SEMICOLON statement

    UNTIL           shift and go to state 163
    SEMICOLON       shift and go to state 81


state 96

    (100) for_statement -> FOR ID . ASSIGN expression TO expression DO statement
    (101) for_statement -> FOR ID . ASSIGN expression DOWNTO expression DO statement

    ASSIGN          shift and go to state 164


state 97

    (113) record_assignment -> ID DOT . ID ASSIGN expression

    ID              shift and go to state 165


state 98

    (85) procedure_call -> ID LPAREN . args_optional RPAREN
    (139) args_optional -> . args
    (140) args_optional -> . empty
    (86) args -> . args COMMA expression
    (87) args -> . expression
    (150) empty -> .
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    RPAREN          reduce using rule 150 (empty -> .)
    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    args_optional                  shift and go to state 166
    args                           shift and go to state 167
    empty                          shift and go to state 168
    expression                     shift and go to state 169
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 99

    (102) case_statement -> CASE expression . OF case_element_list else_clause_optional END
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    OF              shift and go to state 170
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    XOR             shift and go to state 158


state 100

    (20) var_decl -> id_list COLON type . SEMICOLON

    SEMICOLON       shift and go to state 171


state 101

    (36) type -> simple_type .

    SEMICOLON       reduce using rule 36 (type -> simple_type .)
    RPAREN          reduce using rule 36 (type -> simple_type .)


state 102

    (37) type -> array_type .

    SEMICOLON       reduce using rule 37 (type -> array_type .)
    RPAREN          reduce using rule 37 (type -> array_type .)


state 103

    (38) type -> record_type .

    SEMICOLON       reduce using rule 38 (type -> record_type .)
    RPAREN          reduce using rule 38 (type -> record_type .)


state 104

    (39) type -> class_type .

    SEMICOLON       reduce using rule 39 (type -> class_type .)
    RPAREN          reduce using rule 39 (type -> class_type .)


state 105

    (54) simple_type -> subrange_type .

    SEMICOLON       reduce using rule 54 (simple_type -> subrange_type .)
    RBRACKET        reduce using rule 54 (simple_type -> subrange_type .)
    RPAREN          reduce using rule 54 (simple_type -> subrange_type .)


state 106

    (55) simple_type -> type_identifier .

    SEMICOLON       reduce using rule 55 (simple_type -> type_identifier .)
    RBRACKET        reduce using rule 55 (simple_type -> type_identifier .)
    RPAREN          reduce using rule 55 (simple_type -> type_identifier .)


state 107

    (57) array_type -> ARRAY . LBRACKET index_type RBRACKET OF type

    LBRACKET        shift and go to state 172


state 108

    (59) record_type -> RECORD . record_fields END
    (60) record_fields -> . field_list
    (61) field_list -> . field_list field_declaration SEMICOLON
    (62) field_list -> . field_declaration SEMICOLON
    (63) field_declaration -> . id_list COLON type
    (21) id_list -> . id_list COMMA ID
    (22) id_list -> . ID

    ID              shift and go to state 33

    record_fields                  shift and go to state 173
    field_list                     shift and go to state 174
    field_declaration              shift and go to state 175
    id_list                        shift and go to state 176

state 109

    (40) class_type -> CLASS . class_body END
    (41) class_body -> . class_member_list
    (42) class_member_list -> . class_member_list class_member
    (43) class_member_list -> . class_member
    (44) class_member -> . class_variable_declaration
    (45) class_member -> . constructor_declaration
    (46) class_member -> . class_function_declaration
    (47) class_member -> . class_procedure_declaration
    (48) class_variable_declaration -> . ID COLON type SEMICOLON
    (49) constructor_declaration -> . CONSTRUCTOR ID formal_parameter_list_opt SEMICOLON
    (50) class_function_declaration -> . FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON
    (53) class_procedure_declaration -> . PROCEDURE ID formal_parameter_list_opt SEMICOLON

    ID              shift and go to state 184
    CONSTRUCTOR     shift and go to state 185
    FUNCTION        shift and go to state 186
    PROCEDURE       shift and go to state 187

    class_body                     shift and go to state 177
    class_member_list              shift and go to state 178
    class_member                   shift and go to state 179
    class_variable_declaration     shift and go to state 180
    constructor_declaration        shift and go to state 181
    class_function_declaration     shift and go to state 182
    class_procedure_declaration    shift and go to state 183

state 110

    (56) subrange_type -> constant . DOTDOT constant

    DOTDOT          shift and go to state 188


state 111

    (64) type_identifier -> ID .
    (149) constant_identifier -> ID .

    SEMICOLON       reduce using rule 64 (type_identifier -> ID .)
    RBRACKET        reduce using rule 64 (type_identifier -> ID .)
    RPAREN          reduce using rule 64 (type_identifier -> ID .)
    DOTDOT          reduce using rule 149 (constant_identifier -> ID .)


state 112

    (65) type_identifier -> predefined_type .

    SEMICOLON       reduce using rule 65 (type_identifier -> predefined_type .)
    RBRACKET        reduce using rule 65 (type_identifier -> predefined_type .)
    RPAREN          reduce using rule 65 (type_identifier -> predefined_type .)


state 113

    (141) constant -> UNSIGNED_NUMBER .

    DOTDOT          reduce using rule 141 (constant -> UNSIGNED_NUMBER .)
    SEMICOLON       reduce using rule 141 (constant -> UNSIGNED_NUMBER .)
    COLON           reduce using rule 141 (constant -> UNSIGNED_NUMBER .)
    COMMA           reduce using rule 141 (constant -> UNSIGNED_NUMBER .)
    RBRACKET        reduce using rule 141 (constant -> UNSIGNED_NUMBER .)
    RPAREN          reduce using rule 141 (constant -> UNSIGNED_NUMBER .)


state 114

    (142) constant -> sign . UNSIGNED_NUMBER
    (145) UNSIGNED_NUMBER -> . INTEGER_CONST
    (146) UNSIGNED_NUMBER -> . REAL_CONST

    INTEGER_CONST   shift and go to state 121
    REAL_CONST      shift and go to state 122

    UNSIGNED_NUMBER                shift and go to state 189

state 115

    (143) constant -> STRING_LITERAL .

    DOTDOT          reduce using rule 143 (constant -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 143 (constant -> STRING_LITERAL .)
    COLON           reduce using rule 143 (constant -> STRING_LITERAL .)
    COMMA           reduce using rule 143 (constant -> STRING_LITERAL .)
    RBRACKET        reduce using rule 143 (constant -> STRING_LITERAL .)
    RPAREN          reduce using rule 143 (constant -> STRING_LITERAL .)


state 116

    (144) constant -> constant_identifier .

    DOTDOT          reduce using rule 144 (constant -> constant_identifier .)
    SEMICOLON       reduce using rule 144 (constant -> constant_identifier .)
    COLON           reduce using rule 144 (constant -> constant_identifier .)
    COMMA           reduce using rule 144 (constant -> constant_identifier .)
    RBRACKET        reduce using rule 144 (constant -> constant_identifier .)
    RPAREN          reduce using rule 144 (constant -> constant_identifier .)


state 117

    (66) predefined_type -> INTEGER .

    SEMICOLON       reduce using rule 66 (predefined_type -> INTEGER .)
    RBRACKET        reduce using rule 66 (predefined_type -> INTEGER .)
    RPAREN          reduce using rule 66 (predefined_type -> INTEGER .)


state 118

    (67) predefined_type -> REAL .

    SEMICOLON       reduce using rule 67 (predefined_type -> REAL .)
    RBRACKET        reduce using rule 67 (predefined_type -> REAL .)
    RPAREN          reduce using rule 67 (predefined_type -> REAL .)


state 119

    (68) predefined_type -> BOOLEAN .

    SEMICOLON       reduce using rule 68 (predefined_type -> BOOLEAN .)
    RBRACKET        reduce using rule 68 (predefined_type -> BOOLEAN .)
    RPAREN          reduce using rule 68 (predefined_type -> BOOLEAN .)


state 120

    (69) predefined_type -> STRING .

    SEMICOLON       reduce using rule 69 (predefined_type -> STRING .)
    RBRACKET        reduce using rule 69 (predefined_type -> STRING .)
    RPAREN          reduce using rule 69 (predefined_type -> STRING .)


state 121

    (145) UNSIGNED_NUMBER -> INTEGER_CONST .

    DOTDOT          reduce using rule 145 (UNSIGNED_NUMBER -> INTEGER_CONST .)
    SEMICOLON       reduce using rule 145 (UNSIGNED_NUMBER -> INTEGER_CONST .)
    COLON           reduce using rule 145 (UNSIGNED_NUMBER -> INTEGER_CONST .)
    COMMA           reduce using rule 145 (UNSIGNED_NUMBER -> INTEGER_CONST .)
    RBRACKET        reduce using rule 145 (UNSIGNED_NUMBER -> INTEGER_CONST .)
    RPAREN          reduce using rule 145 (UNSIGNED_NUMBER -> INTEGER_CONST .)


state 122

    (146) UNSIGNED_NUMBER -> REAL_CONST .

    DOTDOT          reduce using rule 146 (UNSIGNED_NUMBER -> REAL_CONST .)
    SEMICOLON       reduce using rule 146 (UNSIGNED_NUMBER -> REAL_CONST .)
    COLON           reduce using rule 146 (UNSIGNED_NUMBER -> REAL_CONST .)
    COMMA           reduce using rule 146 (UNSIGNED_NUMBER -> REAL_CONST .)
    RBRACKET        reduce using rule 146 (UNSIGNED_NUMBER -> REAL_CONST .)
    RPAREN          reduce using rule 146 (UNSIGNED_NUMBER -> REAL_CONST .)


state 123

    (147) sign -> PLUS .

    INTEGER_CONST   reduce using rule 147 (sign -> PLUS .)
    REAL_CONST      reduce using rule 147 (sign -> PLUS .)


state 124

    (148) sign -> MINUS .

    INTEGER_CONST   reduce using rule 148 (sign -> MINUS .)
    REAL_CONST      reduce using rule 148 (sign -> MINUS .)


state 125

    (21) id_list -> id_list COMMA ID .

    COLON           reduce using rule 21 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 21 (id_list -> id_list COMMA ID .)


state 126

    (24) const_list -> const_list const_definition SEMICOLON .

    ID              reduce using rule 24 (const_list -> const_list const_definition SEMICOLON .)
    VAR             reduce using rule 24 (const_list -> const_list const_definition SEMICOLON .)
    CONST           reduce using rule 24 (const_list -> const_list const_definition SEMICOLON .)
    TYPE            reduce using rule 24 (const_list -> const_list const_definition SEMICOLON .)
    PROCEDURE       reduce using rule 24 (const_list -> const_list const_definition SEMICOLON .)
    FUNCTION        reduce using rule 24 (const_list -> const_list const_definition SEMICOLON .)
    BEGIN           reduce using rule 24 (const_list -> const_list const_definition SEMICOLON .)


state 127

    (149) constant_identifier -> ID .

    SEMICOLON       reduce using rule 149 (constant_identifier -> ID .)
    COLON           reduce using rule 149 (constant_identifier -> ID .)
    COMMA           reduce using rule 149 (constant_identifier -> ID .)
    RBRACKET        reduce using rule 149 (constant_identifier -> ID .)
    RPAREN          reduce using rule 149 (constant_identifier -> ID .)


state 128

    (26) const_definition -> ID EQUAL constant .

    SEMICOLON       reduce using rule 26 (const_definition -> ID EQUAL constant .)


state 129

    (33) type_list -> type_list type_definition SEMICOLON .

    ID              reduce using rule 33 (type_list -> type_list type_definition SEMICOLON .)
    VAR             reduce using rule 33 (type_list -> type_list type_definition SEMICOLON .)
    CONST           reduce using rule 33 (type_list -> type_list type_definition SEMICOLON .)
    TYPE            reduce using rule 33 (type_list -> type_list type_definition SEMICOLON .)
    PROCEDURE       reduce using rule 33 (type_list -> type_list type_definition SEMICOLON .)
    FUNCTION        reduce using rule 33 (type_list -> type_list type_definition SEMICOLON .)
    BEGIN           reduce using rule 33 (type_list -> type_list type_definition SEMICOLON .)


state 130

    (35) type_definition -> ID EQUAL type .

    SEMICOLON       reduce using rule 35 (type_definition -> ID EQUAL type .)


state 131

    (52) procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON . block SEMICOLON
    (7) block -> . declarations compound_statement
    (8) declarations -> . declaration_list
    (9) declarations -> . empty
    (10) declaration_list -> . declaration_list declaration
    (11) declaration_list -> . declaration
    (150) empty -> .
    (12) declaration -> . var_declaration
    (13) declaration -> . const_declaration
    (14) declaration -> . type_declaration
    (15) declaration -> . procedure_declaration
    (16) declaration -> . function_declaration
    (17) var_declaration -> . VAR var_declaration_list
    (23) const_declaration -> . CONST const_list
    (32) type_declaration -> . TYPE type_list
    (52) procedure_declaration -> . PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON
    (51) function_declaration -> . FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON

    BEGIN           reduce using rule 150 (empty -> .)
    VAR             shift and go to state 19
    CONST           shift and go to state 20
    TYPE            shift and go to state 21
    PROCEDURE       shift and go to state 22
    FUNCTION        shift and go to state 23

    block                          shift and go to state 190
    declarations                   shift and go to state 10
    declaration_list               shift and go to state 11
    empty                          shift and go to state 12
    declaration                    shift and go to state 13
    var_declaration                shift and go to state 14
    const_declaration              shift and go to state 15
    type_declaration               shift and go to state 16
    procedure_declaration          shift and go to state 17
    function_declaration           shift and go to state 18

state 132

    (27) formal_parameter_list_opt -> LPAREN formal_parameter_list . RPAREN
    (29) formal_parameter_list -> formal_parameter_list . SEMICOLON formal_parameter

    RPAREN          shift and go to state 191
    SEMICOLON       shift and go to state 192


state 133

    (30) formal_parameter_list -> formal_parameter .

    RPAREN          reduce using rule 30 (formal_parameter_list -> formal_parameter .)
    SEMICOLON       reduce using rule 30 (formal_parameter_list -> formal_parameter .)


state 134

    (31) formal_parameter -> id_list . COLON type
    (21) id_list -> id_list . COMMA ID

    COLON           shift and go to state 193
    COMMA           shift and go to state 68


state 135

    (51) function_declaration -> FUNCTION ID formal_parameter_list_opt COLON . type SEMICOLON block SEMICOLON
    (36) type -> . simple_type
    (37) type -> . array_type
    (38) type -> . record_type
    (39) type -> . class_type
    (54) simple_type -> . subrange_type
    (55) simple_type -> . type_identifier
    (57) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (59) record_type -> . RECORD record_fields END
    (40) class_type -> . CLASS class_body END
    (56) subrange_type -> . constant DOTDOT constant
    (64) type_identifier -> . ID
    (65) type_identifier -> . predefined_type
    (141) constant -> . UNSIGNED_NUMBER
    (142) constant -> . sign UNSIGNED_NUMBER
    (143) constant -> . STRING_LITERAL
    (144) constant -> . constant_identifier
    (66) predefined_type -> . INTEGER
    (67) predefined_type -> . REAL
    (68) predefined_type -> . BOOLEAN
    (69) predefined_type -> . STRING
    (145) UNSIGNED_NUMBER -> . INTEGER_CONST
    (146) UNSIGNED_NUMBER -> . REAL_CONST
    (147) sign -> . PLUS
    (148) sign -> . MINUS
    (149) constant_identifier -> . ID

    ARRAY           shift and go to state 107
    RECORD          shift and go to state 108
    CLASS           shift and go to state 109
    ID              shift and go to state 111
    STRING_LITERAL  shift and go to state 115
    INTEGER         shift and go to state 117
    REAL            shift and go to state 118
    BOOLEAN         shift and go to state 119
    STRING          shift and go to state 120
    INTEGER_CONST   shift and go to state 121
    REAL_CONST      shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124

    type                           shift and go to state 194
    simple_type                    shift and go to state 101
    array_type                     shift and go to state 102
    record_type                    shift and go to state 103
    class_type                     shift and go to state 104
    subrange_type                  shift and go to state 105
    type_identifier                shift and go to state 106
    constant                       shift and go to state 110
    predefined_type                shift and go to state 112
    UNSIGNED_NUMBER                shift and go to state 113
    sign                           shift and go to state 114
    constant_identifier            shift and go to state 116

state 136

    (72) statement_list -> statement_list SEMICOLON statement .

    END             reduce using rule 72 (statement_list -> statement_list SEMICOLON statement .)
    SEMICOLON       reduce using rule 72 (statement_list -> statement_list SEMICOLON statement .)
    UNTIL           reduce using rule 72 (statement_list -> statement_list SEMICOLON statement .)


state 137

    (78) assignment_statement -> variable ASSIGN expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    END             reduce using rule 78 (assignment_statement -> variable ASSIGN expression .)
    SEMICOLON       reduce using rule 78 (assignment_statement -> variable ASSIGN expression .)
    UNTIL           reduce using rule 78 (assignment_statement -> variable ASSIGN expression .)
    ELSE            reduce using rule 78 (assignment_statement -> variable ASSIGN expression .)
    STRING_LITERAL  reduce using rule 78 (assignment_statement -> variable ASSIGN expression .)
    INTEGER_CONST   reduce using rule 78 (assignment_statement -> variable ASSIGN expression .)
    REAL_CONST      reduce using rule 78 (assignment_statement -> variable ASSIGN expression .)
    ID              reduce using rule 78 (assignment_statement -> variable ASSIGN expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    XOR             shift and go to state 158

  ! PLUS            [ reduce using rule 78 (assignment_statement -> variable ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 78 (assignment_statement -> variable ASSIGN expression .) ]


state 138

    (80) variable -> variable DOT ID .

    ASSIGN          reduce using rule 80 (variable -> variable DOT ID .)
    DOT             reduce using rule 80 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 80 (variable -> variable DOT ID .)
    THEN            reduce using rule 80 (variable -> variable DOT ID .)
    PLUS            reduce using rule 80 (variable -> variable DOT ID .)
    MINUS           reduce using rule 80 (variable -> variable DOT ID .)
    TIMES           reduce using rule 80 (variable -> variable DOT ID .)
    DIVIDE          reduce using rule 80 (variable -> variable DOT ID .)
    DIVIDE_INT      reduce using rule 80 (variable -> variable DOT ID .)
    MODULO          reduce using rule 80 (variable -> variable DOT ID .)
    SHL             reduce using rule 80 (variable -> variable DOT ID .)
    SHR             reduce using rule 80 (variable -> variable DOT ID .)
    EQUAL           reduce using rule 80 (variable -> variable DOT ID .)
    NEQUAL          reduce using rule 80 (variable -> variable DOT ID .)
    LT              reduce using rule 80 (variable -> variable DOT ID .)
    GT              reduce using rule 80 (variable -> variable DOT ID .)
    LE              reduce using rule 80 (variable -> variable DOT ID .)
    GE              reduce using rule 80 (variable -> variable DOT ID .)
    AND             reduce using rule 80 (variable -> variable DOT ID .)
    OR              reduce using rule 80 (variable -> variable DOT ID .)
    XOR             reduce using rule 80 (variable -> variable DOT ID .)
    DO              reduce using rule 80 (variable -> variable DOT ID .)
    OF              reduce using rule 80 (variable -> variable DOT ID .)
    END             reduce using rule 80 (variable -> variable DOT ID .)
    SEMICOLON       reduce using rule 80 (variable -> variable DOT ID .)
    UNTIL           reduce using rule 80 (variable -> variable DOT ID .)
    ELSE            reduce using rule 80 (variable -> variable DOT ID .)
    STRING_LITERAL  reduce using rule 80 (variable -> variable DOT ID .)
    INTEGER_CONST   reduce using rule 80 (variable -> variable DOT ID .)
    REAL_CONST      reduce using rule 80 (variable -> variable DOT ID .)
    ID              reduce using rule 80 (variable -> variable DOT ID .)
    RBRACKET        reduce using rule 80 (variable -> variable DOT ID .)
    COMMA           reduce using rule 80 (variable -> variable DOT ID .)
    RPAREN          reduce using rule 80 (variable -> variable DOT ID .)
    TO              reduce using rule 80 (variable -> variable DOT ID .)
    DOWNTO          reduce using rule 80 (variable -> variable DOT ID .)


state 139

    (81) variable -> variable LBRACKET expression_list . RBRACKET
    (83) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 195
    COMMA           shift and go to state 196


state 140

    (82) expression_list -> expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    RBRACKET        reduce using rule 82 (expression_list -> expression .)
    COMMA           reduce using rule 82 (expression_list -> expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    XOR             shift and go to state 158


state 141

    (95) if_statement -> IF expression THEN . statement else_part
    (73) statement -> . simple_statement
    (74) statement -> . structured_statement
    (75) simple_statement -> . assignment_statement
    (76) simple_statement -> . procedure_call_statement
    (77) simple_statement -> . empty
    (88) structured_statement -> . compound_statement
    (89) structured_statement -> . if_statement
    (90) structured_statement -> . while_statement
    (91) structured_statement -> . repeat_statement
    (92) structured_statement -> . for_statement
    (93) structured_statement -> . case_statement
    (94) structured_statement -> . record_assignment
    (78) assignment_statement -> . variable ASSIGN expression
    (84) procedure_call_statement -> . procedure_call
    (150) empty -> .
    (70) compound_statement -> . BEGIN statement_list END
    (95) if_statement -> . IF expression THEN statement else_part
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_list UNTIL expression
    (100) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (101) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (102) case_statement -> . CASE expression OF case_element_list else_clause_optional END
    (113) record_assignment -> . ID DOT ID ASSIGN expression
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET
    (85) procedure_call -> . ID LPAREN args_optional RPAREN

  ! shift/reduce conflict for ID resolved as shift
    ELSE            reduce using rule 150 (empty -> .)
    END             reduce using rule 150 (empty -> .)
    SEMICOLON       reduce using rule 150 (empty -> .)
    UNTIL           reduce using rule 150 (empty -> .)
    STRING_LITERAL  reduce using rule 150 (empty -> .)
    INTEGER_CONST   reduce using rule 150 (empty -> .)
    REAL_CONST      reduce using rule 150 (empty -> .)
    PLUS            reduce using rule 150 (empty -> .)
    MINUS           reduce using rule 150 (empty -> .)
    BEGIN           shift and go to state 28
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    REPEAT          shift and go to state 62
    FOR             shift and go to state 63
    CASE            shift and go to state 65
    ID              shift and go to state 64

  ! ID              [ reduce using rule 150 (empty -> .) ]

    statement                      shift and go to state 197
    simple_statement               shift and go to state 46
    structured_statement           shift and go to state 47
    assignment_statement           shift and go to state 48
    procedure_call_statement       shift and go to state 49
    empty                          shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    while_statement                shift and go to state 53
    repeat_statement               shift and go to state 54
    for_statement                  shift and go to state 55
    case_statement                 shift and go to state 56
    record_assignment              shift and go to state 57
    variable                       shift and go to state 58
    procedure_call                 shift and go to state 59

state 142

    (114) expression -> expression PLUS . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 198
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 143

    (115) expression -> expression MINUS . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 199
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 144

    (116) expression -> expression TIMES . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 200
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 145

    (117) expression -> expression DIVIDE . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 201
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 146

    (118) expression -> expression DIVIDE_INT . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 202
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 147

    (119) expression -> expression MODULO . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 203
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 148

    (120) expression -> expression SHL . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 204
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 149

    (121) expression -> expression SHR . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 205
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 150

    (122) expression -> expression EQUAL . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 206
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 151

    (123) expression -> expression NEQUAL . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 207
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 152

    (124) expression -> expression LT . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 208
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 153

    (125) expression -> expression GT . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 209
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 154

    (126) expression -> expression LE . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 210
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 155

    (127) expression -> expression GE . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 211
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 156

    (128) expression -> expression AND . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 212
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 157

    (129) expression -> expression OR . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 213
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 158

    (130) expression -> expression XOR . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 214
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 159

    (131) expression -> NOT expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 131 (expression -> NOT expression .)
    PLUS            reduce using rule 131 (expression -> NOT expression .)
    MINUS           reduce using rule 131 (expression -> NOT expression .)
    TIMES           reduce using rule 131 (expression -> NOT expression .)
    DIVIDE          reduce using rule 131 (expression -> NOT expression .)
    DIVIDE_INT      reduce using rule 131 (expression -> NOT expression .)
    MODULO          reduce using rule 131 (expression -> NOT expression .)
    SHL             reduce using rule 131 (expression -> NOT expression .)
    SHR             reduce using rule 131 (expression -> NOT expression .)
    EQUAL           reduce using rule 131 (expression -> NOT expression .)
    NEQUAL          reduce using rule 131 (expression -> NOT expression .)
    LT              reduce using rule 131 (expression -> NOT expression .)
    GT              reduce using rule 131 (expression -> NOT expression .)
    LE              reduce using rule 131 (expression -> NOT expression .)
    GE              reduce using rule 131 (expression -> NOT expression .)
    AND             reduce using rule 131 (expression -> NOT expression .)
    OR              reduce using rule 131 (expression -> NOT expression .)
    XOR             reduce using rule 131 (expression -> NOT expression .)
    DO              reduce using rule 131 (expression -> NOT expression .)
    OF              reduce using rule 131 (expression -> NOT expression .)
    END             reduce using rule 131 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 131 (expression -> NOT expression .)
    UNTIL           reduce using rule 131 (expression -> NOT expression .)
    ELSE            reduce using rule 131 (expression -> NOT expression .)
    STRING_LITERAL  reduce using rule 131 (expression -> NOT expression .)
    INTEGER_CONST   reduce using rule 131 (expression -> NOT expression .)
    REAL_CONST      reduce using rule 131 (expression -> NOT expression .)
    ID              reduce using rule 131 (expression -> NOT expression .)
    RBRACKET        reduce using rule 131 (expression -> NOT expression .)
    COMMA           reduce using rule 131 (expression -> NOT expression .)
    RPAREN          reduce using rule 131 (expression -> NOT expression .)
    TO              reduce using rule 131 (expression -> NOT expression .)
    DOWNTO          reduce using rule 131 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! TIMES           [ shift and go to state 144 ]
  ! DIVIDE          [ shift and go to state 145 ]
  ! DIVIDE_INT      [ shift and go to state 146 ]
  ! MODULO          [ shift and go to state 147 ]
  ! SHL             [ shift and go to state 148 ]
  ! SHR             [ shift and go to state 149 ]
  ! EQUAL           [ shift and go to state 150 ]
  ! NEQUAL          [ shift and go to state 151 ]
  ! LT              [ shift and go to state 152 ]
  ! GT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GE              [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 160

    (132) expression -> LPAREN expression . RPAREN
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    RPAREN          shift and go to state 215
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    XOR             shift and go to state 158


state 161

    (138) function_call -> ID LPAREN . args_optional RPAREN
    (139) args_optional -> . args
    (140) args_optional -> . empty
    (86) args -> . args COMMA expression
    (87) args -> . expression
    (150) empty -> .
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    RPAREN          reduce using rule 150 (empty -> .)
    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    args_optional                  shift and go to state 216
    args                           shift and go to state 167
    empty                          shift and go to state 168
    expression                     shift and go to state 169
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 162

    (98) while_statement -> WHILE expression DO . statement
    (73) statement -> . simple_statement
    (74) statement -> . structured_statement
    (75) simple_statement -> . assignment_statement
    (76) simple_statement -> . procedure_call_statement
    (77) simple_statement -> . empty
    (88) structured_statement -> . compound_statement
    (89) structured_statement -> . if_statement
    (90) structured_statement -> . while_statement
    (91) structured_statement -> . repeat_statement
    (92) structured_statement -> . for_statement
    (93) structured_statement -> . case_statement
    (94) structured_statement -> . record_assignment
    (78) assignment_statement -> . variable ASSIGN expression
    (84) procedure_call_statement -> . procedure_call
    (150) empty -> .
    (70) compound_statement -> . BEGIN statement_list END
    (95) if_statement -> . IF expression THEN statement else_part
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_list UNTIL expression
    (100) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (101) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (102) case_statement -> . CASE expression OF case_element_list else_clause_optional END
    (113) record_assignment -> . ID DOT ID ASSIGN expression
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET
    (85) procedure_call -> . ID LPAREN args_optional RPAREN

  ! shift/reduce conflict for ID resolved as shift
    ELSE            reduce using rule 150 (empty -> .)
    END             reduce using rule 150 (empty -> .)
    SEMICOLON       reduce using rule 150 (empty -> .)
    UNTIL           reduce using rule 150 (empty -> .)
    STRING_LITERAL  reduce using rule 150 (empty -> .)
    INTEGER_CONST   reduce using rule 150 (empty -> .)
    REAL_CONST      reduce using rule 150 (empty -> .)
    PLUS            reduce using rule 150 (empty -> .)
    MINUS           reduce using rule 150 (empty -> .)
    BEGIN           shift and go to state 28
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    REPEAT          shift and go to state 62
    FOR             shift and go to state 63
    CASE            shift and go to state 65
    ID              shift and go to state 64

  ! ID              [ reduce using rule 150 (empty -> .) ]

    statement                      shift and go to state 217
    simple_statement               shift and go to state 46
    structured_statement           shift and go to state 47
    assignment_statement           shift and go to state 48
    procedure_call_statement       shift and go to state 49
    empty                          shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    while_statement                shift and go to state 53
    repeat_statement               shift and go to state 54
    for_statement                  shift and go to state 55
    case_statement                 shift and go to state 56
    record_assignment              shift and go to state 57
    variable                       shift and go to state 58
    procedure_call                 shift and go to state 59

state 163

    (99) repeat_statement -> REPEAT statement_list UNTIL . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 218
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 164

    (100) for_statement -> FOR ID ASSIGN . expression TO expression DO statement
    (101) for_statement -> FOR ID ASSIGN . expression DOWNTO expression DO statement
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 219
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 165

    (113) record_assignment -> ID DOT ID . ASSIGN expression

    ASSIGN          shift and go to state 220


state 166

    (85) procedure_call -> ID LPAREN args_optional . RPAREN

    RPAREN          shift and go to state 221


state 167

    (139) args_optional -> args .
    (86) args -> args . COMMA expression

    RPAREN          reduce using rule 139 (args_optional -> args .)
    COMMA           shift and go to state 222


state 168

    (140) args_optional -> empty .

    RPAREN          reduce using rule 140 (args_optional -> empty .)


state 169

    (87) args -> expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    COMMA           reduce using rule 87 (args -> expression .)
    RPAREN          reduce using rule 87 (args -> expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    XOR             shift and go to state 158


state 170

    (102) case_statement -> CASE expression OF . case_element_list else_clause_optional END
    (103) case_element_list -> . case_element_list semicolon_optional case_element
    (104) case_element_list -> . case_element
    (105) case_element -> . case_label_list COLON statement
    (106) case_label_list -> . case_label_list COMMA case_label
    (107) case_label_list -> . case_label
    (108) case_label -> . constant
    (141) constant -> . UNSIGNED_NUMBER
    (142) constant -> . sign UNSIGNED_NUMBER
    (143) constant -> . STRING_LITERAL
    (144) constant -> . constant_identifier
    (145) UNSIGNED_NUMBER -> . INTEGER_CONST
    (146) UNSIGNED_NUMBER -> . REAL_CONST
    (147) sign -> . PLUS
    (148) sign -> . MINUS
    (149) constant_identifier -> . ID

    STRING_LITERAL  shift and go to state 115
    INTEGER_CONST   shift and go to state 121
    REAL_CONST      shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    ID              shift and go to state 127

    case_element_list              shift and go to state 223
    case_element                   shift and go to state 224
    case_label_list                shift and go to state 225
    case_label                     shift and go to state 226
    constant                       shift and go to state 227
    UNSIGNED_NUMBER                shift and go to state 113
    sign                           shift and go to state 114
    constant_identifier            shift and go to state 116

state 171

    (20) var_decl -> id_list COLON type SEMICOLON .

    ID              reduce using rule 20 (var_decl -> id_list COLON type SEMICOLON .)
    VAR             reduce using rule 20 (var_decl -> id_list COLON type SEMICOLON .)
    CONST           reduce using rule 20 (var_decl -> id_list COLON type SEMICOLON .)
    TYPE            reduce using rule 20 (var_decl -> id_list COLON type SEMICOLON .)
    PROCEDURE       reduce using rule 20 (var_decl -> id_list COLON type SEMICOLON .)
    FUNCTION        reduce using rule 20 (var_decl -> id_list COLON type SEMICOLON .)
    BEGIN           reduce using rule 20 (var_decl -> id_list COLON type SEMICOLON .)


state 172

    (57) array_type -> ARRAY LBRACKET . index_type RBRACKET OF type
    (58) index_type -> . simple_type
    (54) simple_type -> . subrange_type
    (55) simple_type -> . type_identifier
    (56) subrange_type -> . constant DOTDOT constant
    (64) type_identifier -> . ID
    (65) type_identifier -> . predefined_type
    (141) constant -> . UNSIGNED_NUMBER
    (142) constant -> . sign UNSIGNED_NUMBER
    (143) constant -> . STRING_LITERAL
    (144) constant -> . constant_identifier
    (66) predefined_type -> . INTEGER
    (67) predefined_type -> . REAL
    (68) predefined_type -> . BOOLEAN
    (69) predefined_type -> . STRING
    (145) UNSIGNED_NUMBER -> . INTEGER_CONST
    (146) UNSIGNED_NUMBER -> . REAL_CONST
    (147) sign -> . PLUS
    (148) sign -> . MINUS
    (149) constant_identifier -> . ID

    ID              shift and go to state 111
    STRING_LITERAL  shift and go to state 115
    INTEGER         shift and go to state 117
    REAL            shift and go to state 118
    BOOLEAN         shift and go to state 119
    STRING          shift and go to state 120
    INTEGER_CONST   shift and go to state 121
    REAL_CONST      shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124

    index_type                     shift and go to state 228
    simple_type                    shift and go to state 229
    subrange_type                  shift and go to state 105
    type_identifier                shift and go to state 106
    constant                       shift and go to state 110
    predefined_type                shift and go to state 112
    UNSIGNED_NUMBER                shift and go to state 113
    sign                           shift and go to state 114
    constant_identifier            shift and go to state 116

state 173

    (59) record_type -> RECORD record_fields . END

    END             shift and go to state 230


state 174

    (60) record_fields -> field_list .
    (61) field_list -> field_list . field_declaration SEMICOLON
    (63) field_declaration -> . id_list COLON type
    (21) id_list -> . id_list COMMA ID
    (22) id_list -> . ID

    END             reduce using rule 60 (record_fields -> field_list .)
    ID              shift and go to state 33

    field_declaration              shift and go to state 231
    id_list                        shift and go to state 176

state 175

    (62) field_list -> field_declaration . SEMICOLON

    SEMICOLON       shift and go to state 232


state 176

    (63) field_declaration -> id_list . COLON type
    (21) id_list -> id_list . COMMA ID

    COLON           shift and go to state 233
    COMMA           shift and go to state 68


state 177

    (40) class_type -> CLASS class_body . END

    END             shift and go to state 234


state 178

    (41) class_body -> class_member_list .
    (42) class_member_list -> class_member_list . class_member
    (44) class_member -> . class_variable_declaration
    (45) class_member -> . constructor_declaration
    (46) class_member -> . class_function_declaration
    (47) class_member -> . class_procedure_declaration
    (48) class_variable_declaration -> . ID COLON type SEMICOLON
    (49) constructor_declaration -> . CONSTRUCTOR ID formal_parameter_list_opt SEMICOLON
    (50) class_function_declaration -> . FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON
    (53) class_procedure_declaration -> . PROCEDURE ID formal_parameter_list_opt SEMICOLON

    END             reduce using rule 41 (class_body -> class_member_list .)
    ID              shift and go to state 184
    CONSTRUCTOR     shift and go to state 185
    FUNCTION        shift and go to state 186
    PROCEDURE       shift and go to state 187

    class_member                   shift and go to state 235
    class_variable_declaration     shift and go to state 180
    constructor_declaration        shift and go to state 181
    class_function_declaration     shift and go to state 182
    class_procedure_declaration    shift and go to state 183

state 179

    (43) class_member_list -> class_member .

    ID              reduce using rule 43 (class_member_list -> class_member .)
    CONSTRUCTOR     reduce using rule 43 (class_member_list -> class_member .)
    FUNCTION        reduce using rule 43 (class_member_list -> class_member .)
    PROCEDURE       reduce using rule 43 (class_member_list -> class_member .)
    END             reduce using rule 43 (class_member_list -> class_member .)


state 180

    (44) class_member -> class_variable_declaration .

    ID              reduce using rule 44 (class_member -> class_variable_declaration .)
    CONSTRUCTOR     reduce using rule 44 (class_member -> class_variable_declaration .)
    FUNCTION        reduce using rule 44 (class_member -> class_variable_declaration .)
    PROCEDURE       reduce using rule 44 (class_member -> class_variable_declaration .)
    END             reduce using rule 44 (class_member -> class_variable_declaration .)


state 181

    (45) class_member -> constructor_declaration .

    ID              reduce using rule 45 (class_member -> constructor_declaration .)
    CONSTRUCTOR     reduce using rule 45 (class_member -> constructor_declaration .)
    FUNCTION        reduce using rule 45 (class_member -> constructor_declaration .)
    PROCEDURE       reduce using rule 45 (class_member -> constructor_declaration .)
    END             reduce using rule 45 (class_member -> constructor_declaration .)


state 182

    (46) class_member -> class_function_declaration .

    ID              reduce using rule 46 (class_member -> class_function_declaration .)
    CONSTRUCTOR     reduce using rule 46 (class_member -> class_function_declaration .)
    FUNCTION        reduce using rule 46 (class_member -> class_function_declaration .)
    PROCEDURE       reduce using rule 46 (class_member -> class_function_declaration .)
    END             reduce using rule 46 (class_member -> class_function_declaration .)


state 183

    (47) class_member -> class_procedure_declaration .

    ID              reduce using rule 47 (class_member -> class_procedure_declaration .)
    CONSTRUCTOR     reduce using rule 47 (class_member -> class_procedure_declaration .)
    FUNCTION        reduce using rule 47 (class_member -> class_procedure_declaration .)
    PROCEDURE       reduce using rule 47 (class_member -> class_procedure_declaration .)
    END             reduce using rule 47 (class_member -> class_procedure_declaration .)


state 184

    (48) class_variable_declaration -> ID . COLON type SEMICOLON

    COLON           shift and go to state 236


state 185

    (49) constructor_declaration -> CONSTRUCTOR . ID formal_parameter_list_opt SEMICOLON

    ID              shift and go to state 237


state 186

    (50) class_function_declaration -> FUNCTION . ID formal_parameter_list_opt COLON type SEMICOLON

    ID              shift and go to state 238


state 187

    (53) class_procedure_declaration -> PROCEDURE . ID formal_parameter_list_opt SEMICOLON

    ID              shift and go to state 239


state 188

    (56) subrange_type -> constant DOTDOT . constant
    (141) constant -> . UNSIGNED_NUMBER
    (142) constant -> . sign UNSIGNED_NUMBER
    (143) constant -> . STRING_LITERAL
    (144) constant -> . constant_identifier
    (145) UNSIGNED_NUMBER -> . INTEGER_CONST
    (146) UNSIGNED_NUMBER -> . REAL_CONST
    (147) sign -> . PLUS
    (148) sign -> . MINUS
    (149) constant_identifier -> . ID

    STRING_LITERAL  shift and go to state 115
    INTEGER_CONST   shift and go to state 121
    REAL_CONST      shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    ID              shift and go to state 127

    constant                       shift and go to state 240
    UNSIGNED_NUMBER                shift and go to state 113
    sign                           shift and go to state 114
    constant_identifier            shift and go to state 116

state 189

    (142) constant -> sign UNSIGNED_NUMBER .

    DOTDOT          reduce using rule 142 (constant -> sign UNSIGNED_NUMBER .)
    SEMICOLON       reduce using rule 142 (constant -> sign UNSIGNED_NUMBER .)
    COLON           reduce using rule 142 (constant -> sign UNSIGNED_NUMBER .)
    COMMA           reduce using rule 142 (constant -> sign UNSIGNED_NUMBER .)
    RBRACKET        reduce using rule 142 (constant -> sign UNSIGNED_NUMBER .)
    RPAREN          reduce using rule 142 (constant -> sign UNSIGNED_NUMBER .)


state 190

    (52) procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 241


state 191

    (27) formal_parameter_list_opt -> LPAREN formal_parameter_list RPAREN .

    SEMICOLON       reduce using rule 27 (formal_parameter_list_opt -> LPAREN formal_parameter_list RPAREN .)
    COLON           reduce using rule 27 (formal_parameter_list_opt -> LPAREN formal_parameter_list RPAREN .)


state 192

    (29) formal_parameter_list -> formal_parameter_list SEMICOLON . formal_parameter
    (31) formal_parameter -> . id_list COLON type
    (21) id_list -> . id_list COMMA ID
    (22) id_list -> . ID

    ID              shift and go to state 33

    formal_parameter               shift and go to state 242
    id_list                        shift and go to state 134

state 193

    (31) formal_parameter -> id_list COLON . type
    (36) type -> . simple_type
    (37) type -> . array_type
    (38) type -> . record_type
    (39) type -> . class_type
    (54) simple_type -> . subrange_type
    (55) simple_type -> . type_identifier
    (57) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (59) record_type -> . RECORD record_fields END
    (40) class_type -> . CLASS class_body END
    (56) subrange_type -> . constant DOTDOT constant
    (64) type_identifier -> . ID
    (65) type_identifier -> . predefined_type
    (141) constant -> . UNSIGNED_NUMBER
    (142) constant -> . sign UNSIGNED_NUMBER
    (143) constant -> . STRING_LITERAL
    (144) constant -> . constant_identifier
    (66) predefined_type -> . INTEGER
    (67) predefined_type -> . REAL
    (68) predefined_type -> . BOOLEAN
    (69) predefined_type -> . STRING
    (145) UNSIGNED_NUMBER -> . INTEGER_CONST
    (146) UNSIGNED_NUMBER -> . REAL_CONST
    (147) sign -> . PLUS
    (148) sign -> . MINUS
    (149) constant_identifier -> . ID

    ARRAY           shift and go to state 107
    RECORD          shift and go to state 108
    CLASS           shift and go to state 109
    ID              shift and go to state 111
    STRING_LITERAL  shift and go to state 115
    INTEGER         shift and go to state 117
    REAL            shift and go to state 118
    BOOLEAN         shift and go to state 119
    STRING          shift and go to state 120
    INTEGER_CONST   shift and go to state 121
    REAL_CONST      shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124

    type                           shift and go to state 243
    simple_type                    shift and go to state 101
    array_type                     shift and go to state 102
    record_type                    shift and go to state 103
    class_type                     shift and go to state 104
    subrange_type                  shift and go to state 105
    type_identifier                shift and go to state 106
    constant                       shift and go to state 110
    predefined_type                shift and go to state 112
    UNSIGNED_NUMBER                shift and go to state 113
    sign                           shift and go to state 114
    constant_identifier            shift and go to state 116

state 194

    (51) function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 244


state 195

    (81) variable -> variable LBRACKET expression_list RBRACKET .

    ASSIGN          reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOT             reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIVIDE_INT      reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    SHL             reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    SHR             reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    NEQUAL          reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    LT              reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    GT              reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    LE              reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    GE              reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    XOR             reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    OF              reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    END             reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    SEMICOLON       reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    UNTIL           reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    STRING_LITERAL  reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    INTEGER_CONST   reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    REAL_CONST      reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    ID              reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOWNTO          reduce using rule 81 (variable -> variable LBRACKET expression_list RBRACKET .)


state 196

    (83) expression_list -> expression_list COMMA . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 245
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 197

    (95) if_statement -> IF expression THEN statement . else_part
    (96) else_part -> . ELSE statement
    (97) else_part -> . empty
    (150) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 247
    END             reduce using rule 150 (empty -> .)
    SEMICOLON       reduce using rule 150 (empty -> .)
    UNTIL           reduce using rule 150 (empty -> .)
    STRING_LITERAL  reduce using rule 150 (empty -> .)
    INTEGER_CONST   reduce using rule 150 (empty -> .)
    REAL_CONST      reduce using rule 150 (empty -> .)
    PLUS            reduce using rule 150 (empty -> .)
    MINUS           reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)

  ! ELSE            [ reduce using rule 150 (empty -> .) ]

    else_part                      shift and go to state 246
    empty                          shift and go to state 248

state 198

    (114) expression -> expression PLUS expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 114 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 114 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 114 (expression -> expression PLUS expression .)
    SHL             reduce using rule 114 (expression -> expression PLUS expression .)
    SHR             reduce using rule 114 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 114 (expression -> expression PLUS expression .)
    NEQUAL          reduce using rule 114 (expression -> expression PLUS expression .)
    LT              reduce using rule 114 (expression -> expression PLUS expression .)
    GT              reduce using rule 114 (expression -> expression PLUS expression .)
    LE              reduce using rule 114 (expression -> expression PLUS expression .)
    GE              reduce using rule 114 (expression -> expression PLUS expression .)
    AND             reduce using rule 114 (expression -> expression PLUS expression .)
    OR              reduce using rule 114 (expression -> expression PLUS expression .)
    XOR             reduce using rule 114 (expression -> expression PLUS expression .)
    DO              reduce using rule 114 (expression -> expression PLUS expression .)
    OF              reduce using rule 114 (expression -> expression PLUS expression .)
    END             reduce using rule 114 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 114 (expression -> expression PLUS expression .)
    UNTIL           reduce using rule 114 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 114 (expression -> expression PLUS expression .)
    STRING_LITERAL  reduce using rule 114 (expression -> expression PLUS expression .)
    INTEGER_CONST   reduce using rule 114 (expression -> expression PLUS expression .)
    REAL_CONST      reduce using rule 114 (expression -> expression PLUS expression .)
    ID              reduce using rule 114 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 114 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 114 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 114 (expression -> expression PLUS expression .)
    TO              reduce using rule 114 (expression -> expression PLUS expression .)
    DOWNTO          reduce using rule 114 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147

  ! TIMES           [ reduce using rule 114 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 114 (expression -> expression PLUS expression .) ]
  ! DIVIDE_INT      [ reduce using rule 114 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 114 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! SHL             [ shift and go to state 148 ]
  ! SHR             [ shift and go to state 149 ]
  ! EQUAL           [ shift and go to state 150 ]
  ! NEQUAL          [ shift and go to state 151 ]
  ! LT              [ shift and go to state 152 ]
  ! GT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GE              [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 199

    (115) expression -> expression MINUS expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 115 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 115 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 115 (expression -> expression MINUS expression .)
    SHL             reduce using rule 115 (expression -> expression MINUS expression .)
    SHR             reduce using rule 115 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 115 (expression -> expression MINUS expression .)
    NEQUAL          reduce using rule 115 (expression -> expression MINUS expression .)
    LT              reduce using rule 115 (expression -> expression MINUS expression .)
    GT              reduce using rule 115 (expression -> expression MINUS expression .)
    LE              reduce using rule 115 (expression -> expression MINUS expression .)
    GE              reduce using rule 115 (expression -> expression MINUS expression .)
    AND             reduce using rule 115 (expression -> expression MINUS expression .)
    OR              reduce using rule 115 (expression -> expression MINUS expression .)
    XOR             reduce using rule 115 (expression -> expression MINUS expression .)
    DO              reduce using rule 115 (expression -> expression MINUS expression .)
    OF              reduce using rule 115 (expression -> expression MINUS expression .)
    END             reduce using rule 115 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 115 (expression -> expression MINUS expression .)
    UNTIL           reduce using rule 115 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 115 (expression -> expression MINUS expression .)
    STRING_LITERAL  reduce using rule 115 (expression -> expression MINUS expression .)
    INTEGER_CONST   reduce using rule 115 (expression -> expression MINUS expression .)
    REAL_CONST      reduce using rule 115 (expression -> expression MINUS expression .)
    ID              reduce using rule 115 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 115 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 115 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 115 (expression -> expression MINUS expression .)
    TO              reduce using rule 115 (expression -> expression MINUS expression .)
    DOWNTO          reduce using rule 115 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147

  ! TIMES           [ reduce using rule 115 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 115 (expression -> expression MINUS expression .) ]
  ! DIVIDE_INT      [ reduce using rule 115 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 115 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! SHL             [ shift and go to state 148 ]
  ! SHR             [ shift and go to state 149 ]
  ! EQUAL           [ shift and go to state 150 ]
  ! NEQUAL          [ shift and go to state 151 ]
  ! LT              [ shift and go to state 152 ]
  ! GT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GE              [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 200

    (116) expression -> expression TIMES expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 116 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 116 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 116 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 116 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 116 (expression -> expression TIMES expression .)
    DIVIDE_INT      reduce using rule 116 (expression -> expression TIMES expression .)
    MODULO          reduce using rule 116 (expression -> expression TIMES expression .)
    SHL             reduce using rule 116 (expression -> expression TIMES expression .)
    SHR             reduce using rule 116 (expression -> expression TIMES expression .)
    EQUAL           reduce using rule 116 (expression -> expression TIMES expression .)
    NEQUAL          reduce using rule 116 (expression -> expression TIMES expression .)
    LT              reduce using rule 116 (expression -> expression TIMES expression .)
    GT              reduce using rule 116 (expression -> expression TIMES expression .)
    LE              reduce using rule 116 (expression -> expression TIMES expression .)
    GE              reduce using rule 116 (expression -> expression TIMES expression .)
    AND             reduce using rule 116 (expression -> expression TIMES expression .)
    OR              reduce using rule 116 (expression -> expression TIMES expression .)
    XOR             reduce using rule 116 (expression -> expression TIMES expression .)
    DO              reduce using rule 116 (expression -> expression TIMES expression .)
    OF              reduce using rule 116 (expression -> expression TIMES expression .)
    END             reduce using rule 116 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 116 (expression -> expression TIMES expression .)
    UNTIL           reduce using rule 116 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 116 (expression -> expression TIMES expression .)
    STRING_LITERAL  reduce using rule 116 (expression -> expression TIMES expression .)
    INTEGER_CONST   reduce using rule 116 (expression -> expression TIMES expression .)
    REAL_CONST      reduce using rule 116 (expression -> expression TIMES expression .)
    ID              reduce using rule 116 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 116 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 116 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 116 (expression -> expression TIMES expression .)
    TO              reduce using rule 116 (expression -> expression TIMES expression .)
    DOWNTO          reduce using rule 116 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! TIMES           [ shift and go to state 144 ]
  ! DIVIDE          [ shift and go to state 145 ]
  ! DIVIDE_INT      [ shift and go to state 146 ]
  ! MODULO          [ shift and go to state 147 ]
  ! SHL             [ shift and go to state 148 ]
  ! SHR             [ shift and go to state 149 ]
  ! EQUAL           [ shift and go to state 150 ]
  ! NEQUAL          [ shift and go to state 151 ]
  ! LT              [ shift and go to state 152 ]
  ! GT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GE              [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 201

    (117) expression -> expression DIVIDE expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 117 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 117 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 117 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 117 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 117 (expression -> expression DIVIDE expression .)
    DIVIDE_INT      reduce using rule 117 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 117 (expression -> expression DIVIDE expression .)
    SHL             reduce using rule 117 (expression -> expression DIVIDE expression .)
    SHR             reduce using rule 117 (expression -> expression DIVIDE expression .)
    EQUAL           reduce using rule 117 (expression -> expression DIVIDE expression .)
    NEQUAL          reduce using rule 117 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 117 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 117 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 117 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 117 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 117 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 117 (expression -> expression DIVIDE expression .)
    XOR             reduce using rule 117 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 117 (expression -> expression DIVIDE expression .)
    OF              reduce using rule 117 (expression -> expression DIVIDE expression .)
    END             reduce using rule 117 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 117 (expression -> expression DIVIDE expression .)
    UNTIL           reduce using rule 117 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 117 (expression -> expression DIVIDE expression .)
    STRING_LITERAL  reduce using rule 117 (expression -> expression DIVIDE expression .)
    INTEGER_CONST   reduce using rule 117 (expression -> expression DIVIDE expression .)
    REAL_CONST      reduce using rule 117 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 117 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 117 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 117 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 117 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 117 (expression -> expression DIVIDE expression .)
    DOWNTO          reduce using rule 117 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! TIMES           [ shift and go to state 144 ]
  ! DIVIDE          [ shift and go to state 145 ]
  ! DIVIDE_INT      [ shift and go to state 146 ]
  ! MODULO          [ shift and go to state 147 ]
  ! SHL             [ shift and go to state 148 ]
  ! SHR             [ shift and go to state 149 ]
  ! EQUAL           [ shift and go to state 150 ]
  ! NEQUAL          [ shift and go to state 151 ]
  ! LT              [ shift and go to state 152 ]
  ! GT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GE              [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 202

    (118) expression -> expression DIVIDE_INT expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    PLUS            reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    MINUS           reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    TIMES           reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    DIVIDE          reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    DIVIDE_INT      reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    MODULO          reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    SHL             reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    SHR             reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    EQUAL           reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    NEQUAL          reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    LT              reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    GT              reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    LE              reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    GE              reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    AND             reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    OR              reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    XOR             reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    DO              reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    OF              reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    END             reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    SEMICOLON       reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    UNTIL           reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    ELSE            reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    STRING_LITERAL  reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    INTEGER_CONST   reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    REAL_CONST      reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    ID              reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    RBRACKET        reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    COMMA           reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    RPAREN          reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    TO              reduce using rule 118 (expression -> expression DIVIDE_INT expression .)
    DOWNTO          reduce using rule 118 (expression -> expression DIVIDE_INT expression .)

  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! TIMES           [ shift and go to state 144 ]
  ! DIVIDE          [ shift and go to state 145 ]
  ! DIVIDE_INT      [ shift and go to state 146 ]
  ! MODULO          [ shift and go to state 147 ]
  ! SHL             [ shift and go to state 148 ]
  ! SHR             [ shift and go to state 149 ]
  ! EQUAL           [ shift and go to state 150 ]
  ! NEQUAL          [ shift and go to state 151 ]
  ! LT              [ shift and go to state 152 ]
  ! GT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GE              [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 203

    (119) expression -> expression MODULO expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 119 (expression -> expression MODULO expression .)
    PLUS            reduce using rule 119 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 119 (expression -> expression MODULO expression .)
    TIMES           reduce using rule 119 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 119 (expression -> expression MODULO expression .)
    DIVIDE_INT      reduce using rule 119 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 119 (expression -> expression MODULO expression .)
    SHL             reduce using rule 119 (expression -> expression MODULO expression .)
    SHR             reduce using rule 119 (expression -> expression MODULO expression .)
    EQUAL           reduce using rule 119 (expression -> expression MODULO expression .)
    NEQUAL          reduce using rule 119 (expression -> expression MODULO expression .)
    LT              reduce using rule 119 (expression -> expression MODULO expression .)
    GT              reduce using rule 119 (expression -> expression MODULO expression .)
    LE              reduce using rule 119 (expression -> expression MODULO expression .)
    GE              reduce using rule 119 (expression -> expression MODULO expression .)
    AND             reduce using rule 119 (expression -> expression MODULO expression .)
    OR              reduce using rule 119 (expression -> expression MODULO expression .)
    XOR             reduce using rule 119 (expression -> expression MODULO expression .)
    DO              reduce using rule 119 (expression -> expression MODULO expression .)
    OF              reduce using rule 119 (expression -> expression MODULO expression .)
    END             reduce using rule 119 (expression -> expression MODULO expression .)
    SEMICOLON       reduce using rule 119 (expression -> expression MODULO expression .)
    UNTIL           reduce using rule 119 (expression -> expression MODULO expression .)
    ELSE            reduce using rule 119 (expression -> expression MODULO expression .)
    STRING_LITERAL  reduce using rule 119 (expression -> expression MODULO expression .)
    INTEGER_CONST   reduce using rule 119 (expression -> expression MODULO expression .)
    REAL_CONST      reduce using rule 119 (expression -> expression MODULO expression .)
    ID              reduce using rule 119 (expression -> expression MODULO expression .)
    RBRACKET        reduce using rule 119 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 119 (expression -> expression MODULO expression .)
    RPAREN          reduce using rule 119 (expression -> expression MODULO expression .)
    TO              reduce using rule 119 (expression -> expression MODULO expression .)
    DOWNTO          reduce using rule 119 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! TIMES           [ shift and go to state 144 ]
  ! DIVIDE          [ shift and go to state 145 ]
  ! DIVIDE_INT      [ shift and go to state 146 ]
  ! MODULO          [ shift and go to state 147 ]
  ! SHL             [ shift and go to state 148 ]
  ! SHR             [ shift and go to state 149 ]
  ! EQUAL           [ shift and go to state 150 ]
  ! NEQUAL          [ shift and go to state 151 ]
  ! LT              [ shift and go to state 152 ]
  ! GT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GE              [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 204

    (120) expression -> expression SHL expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 120 (expression -> expression SHL expression .)
    SHL             reduce using rule 120 (expression -> expression SHL expression .)
    SHR             reduce using rule 120 (expression -> expression SHL expression .)
    AND             reduce using rule 120 (expression -> expression SHL expression .)
    OR              reduce using rule 120 (expression -> expression SHL expression .)
    XOR             reduce using rule 120 (expression -> expression SHL expression .)
    DO              reduce using rule 120 (expression -> expression SHL expression .)
    OF              reduce using rule 120 (expression -> expression SHL expression .)
    END             reduce using rule 120 (expression -> expression SHL expression .)
    SEMICOLON       reduce using rule 120 (expression -> expression SHL expression .)
    UNTIL           reduce using rule 120 (expression -> expression SHL expression .)
    ELSE            reduce using rule 120 (expression -> expression SHL expression .)
    STRING_LITERAL  reduce using rule 120 (expression -> expression SHL expression .)
    INTEGER_CONST   reduce using rule 120 (expression -> expression SHL expression .)
    REAL_CONST      reduce using rule 120 (expression -> expression SHL expression .)
    ID              reduce using rule 120 (expression -> expression SHL expression .)
    RBRACKET        reduce using rule 120 (expression -> expression SHL expression .)
    COMMA           reduce using rule 120 (expression -> expression SHL expression .)
    RPAREN          reduce using rule 120 (expression -> expression SHL expression .)
    TO              reduce using rule 120 (expression -> expression SHL expression .)
    DOWNTO          reduce using rule 120 (expression -> expression SHL expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155

  ! PLUS            [ reduce using rule 120 (expression -> expression SHL expression .) ]
  ! MINUS           [ reduce using rule 120 (expression -> expression SHL expression .) ]
  ! TIMES           [ reduce using rule 120 (expression -> expression SHL expression .) ]
  ! DIVIDE          [ reduce using rule 120 (expression -> expression SHL expression .) ]
  ! DIVIDE_INT      [ reduce using rule 120 (expression -> expression SHL expression .) ]
  ! MODULO          [ reduce using rule 120 (expression -> expression SHL expression .) ]
  ! EQUAL           [ reduce using rule 120 (expression -> expression SHL expression .) ]
  ! NEQUAL          [ reduce using rule 120 (expression -> expression SHL expression .) ]
  ! LT              [ reduce using rule 120 (expression -> expression SHL expression .) ]
  ! GT              [ reduce using rule 120 (expression -> expression SHL expression .) ]
  ! LE              [ reduce using rule 120 (expression -> expression SHL expression .) ]
  ! GE              [ reduce using rule 120 (expression -> expression SHL expression .) ]
  ! SHL             [ shift and go to state 148 ]
  ! SHR             [ shift and go to state 149 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 205

    (121) expression -> expression SHR expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 121 (expression -> expression SHR expression .)
    SHL             reduce using rule 121 (expression -> expression SHR expression .)
    SHR             reduce using rule 121 (expression -> expression SHR expression .)
    AND             reduce using rule 121 (expression -> expression SHR expression .)
    OR              reduce using rule 121 (expression -> expression SHR expression .)
    XOR             reduce using rule 121 (expression -> expression SHR expression .)
    DO              reduce using rule 121 (expression -> expression SHR expression .)
    OF              reduce using rule 121 (expression -> expression SHR expression .)
    END             reduce using rule 121 (expression -> expression SHR expression .)
    SEMICOLON       reduce using rule 121 (expression -> expression SHR expression .)
    UNTIL           reduce using rule 121 (expression -> expression SHR expression .)
    ELSE            reduce using rule 121 (expression -> expression SHR expression .)
    STRING_LITERAL  reduce using rule 121 (expression -> expression SHR expression .)
    INTEGER_CONST   reduce using rule 121 (expression -> expression SHR expression .)
    REAL_CONST      reduce using rule 121 (expression -> expression SHR expression .)
    ID              reduce using rule 121 (expression -> expression SHR expression .)
    RBRACKET        reduce using rule 121 (expression -> expression SHR expression .)
    COMMA           reduce using rule 121 (expression -> expression SHR expression .)
    RPAREN          reduce using rule 121 (expression -> expression SHR expression .)
    TO              reduce using rule 121 (expression -> expression SHR expression .)
    DOWNTO          reduce using rule 121 (expression -> expression SHR expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155

  ! PLUS            [ reduce using rule 121 (expression -> expression SHR expression .) ]
  ! MINUS           [ reduce using rule 121 (expression -> expression SHR expression .) ]
  ! TIMES           [ reduce using rule 121 (expression -> expression SHR expression .) ]
  ! DIVIDE          [ reduce using rule 121 (expression -> expression SHR expression .) ]
  ! DIVIDE_INT      [ reduce using rule 121 (expression -> expression SHR expression .) ]
  ! MODULO          [ reduce using rule 121 (expression -> expression SHR expression .) ]
  ! EQUAL           [ reduce using rule 121 (expression -> expression SHR expression .) ]
  ! NEQUAL          [ reduce using rule 121 (expression -> expression SHR expression .) ]
  ! LT              [ reduce using rule 121 (expression -> expression SHR expression .) ]
  ! GT              [ reduce using rule 121 (expression -> expression SHR expression .) ]
  ! LE              [ reduce using rule 121 (expression -> expression SHR expression .) ]
  ! GE              [ reduce using rule 121 (expression -> expression SHR expression .) ]
  ! SHL             [ shift and go to state 148 ]
  ! SHR             [ shift and go to state 149 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 206

    (122) expression -> expression EQUAL expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 122 (expression -> expression EQUAL expression .)
    SHL             reduce using rule 122 (expression -> expression EQUAL expression .)
    SHR             reduce using rule 122 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 122 (expression -> expression EQUAL expression .)
    NEQUAL          reduce using rule 122 (expression -> expression EQUAL expression .)
    LT              reduce using rule 122 (expression -> expression EQUAL expression .)
    GT              reduce using rule 122 (expression -> expression EQUAL expression .)
    LE              reduce using rule 122 (expression -> expression EQUAL expression .)
    GE              reduce using rule 122 (expression -> expression EQUAL expression .)
    AND             reduce using rule 122 (expression -> expression EQUAL expression .)
    OR              reduce using rule 122 (expression -> expression EQUAL expression .)
    XOR             reduce using rule 122 (expression -> expression EQUAL expression .)
    DO              reduce using rule 122 (expression -> expression EQUAL expression .)
    OF              reduce using rule 122 (expression -> expression EQUAL expression .)
    END             reduce using rule 122 (expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 122 (expression -> expression EQUAL expression .)
    UNTIL           reduce using rule 122 (expression -> expression EQUAL expression .)
    ELSE            reduce using rule 122 (expression -> expression EQUAL expression .)
    STRING_LITERAL  reduce using rule 122 (expression -> expression EQUAL expression .)
    INTEGER_CONST   reduce using rule 122 (expression -> expression EQUAL expression .)
    REAL_CONST      reduce using rule 122 (expression -> expression EQUAL expression .)
    ID              reduce using rule 122 (expression -> expression EQUAL expression .)
    RBRACKET        reduce using rule 122 (expression -> expression EQUAL expression .)
    COMMA           reduce using rule 122 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 122 (expression -> expression EQUAL expression .)
    TO              reduce using rule 122 (expression -> expression EQUAL expression .)
    DOWNTO          reduce using rule 122 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147

  ! PLUS            [ reduce using rule 122 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 122 (expression -> expression EQUAL expression .) ]
  ! TIMES           [ reduce using rule 122 (expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 122 (expression -> expression EQUAL expression .) ]
  ! DIVIDE_INT      [ reduce using rule 122 (expression -> expression EQUAL expression .) ]
  ! MODULO          [ reduce using rule 122 (expression -> expression EQUAL expression .) ]
  ! SHL             [ shift and go to state 148 ]
  ! SHR             [ shift and go to state 149 ]
  ! EQUAL           [ shift and go to state 150 ]
  ! NEQUAL          [ shift and go to state 151 ]
  ! LT              [ shift and go to state 152 ]
  ! GT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GE              [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 207

    (123) expression -> expression NEQUAL expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 123 (expression -> expression NEQUAL expression .)
    SHL             reduce using rule 123 (expression -> expression NEQUAL expression .)
    SHR             reduce using rule 123 (expression -> expression NEQUAL expression .)
    EQUAL           reduce using rule 123 (expression -> expression NEQUAL expression .)
    NEQUAL          reduce using rule 123 (expression -> expression NEQUAL expression .)
    LT              reduce using rule 123 (expression -> expression NEQUAL expression .)
    GT              reduce using rule 123 (expression -> expression NEQUAL expression .)
    LE              reduce using rule 123 (expression -> expression NEQUAL expression .)
    GE              reduce using rule 123 (expression -> expression NEQUAL expression .)
    AND             reduce using rule 123 (expression -> expression NEQUAL expression .)
    OR              reduce using rule 123 (expression -> expression NEQUAL expression .)
    XOR             reduce using rule 123 (expression -> expression NEQUAL expression .)
    DO              reduce using rule 123 (expression -> expression NEQUAL expression .)
    OF              reduce using rule 123 (expression -> expression NEQUAL expression .)
    END             reduce using rule 123 (expression -> expression NEQUAL expression .)
    SEMICOLON       reduce using rule 123 (expression -> expression NEQUAL expression .)
    UNTIL           reduce using rule 123 (expression -> expression NEQUAL expression .)
    ELSE            reduce using rule 123 (expression -> expression NEQUAL expression .)
    STRING_LITERAL  reduce using rule 123 (expression -> expression NEQUAL expression .)
    INTEGER_CONST   reduce using rule 123 (expression -> expression NEQUAL expression .)
    REAL_CONST      reduce using rule 123 (expression -> expression NEQUAL expression .)
    ID              reduce using rule 123 (expression -> expression NEQUAL expression .)
    RBRACKET        reduce using rule 123 (expression -> expression NEQUAL expression .)
    COMMA           reduce using rule 123 (expression -> expression NEQUAL expression .)
    RPAREN          reduce using rule 123 (expression -> expression NEQUAL expression .)
    TO              reduce using rule 123 (expression -> expression NEQUAL expression .)
    DOWNTO          reduce using rule 123 (expression -> expression NEQUAL expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147

  ! PLUS            [ reduce using rule 123 (expression -> expression NEQUAL expression .) ]
  ! MINUS           [ reduce using rule 123 (expression -> expression NEQUAL expression .) ]
  ! TIMES           [ reduce using rule 123 (expression -> expression NEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 123 (expression -> expression NEQUAL expression .) ]
  ! DIVIDE_INT      [ reduce using rule 123 (expression -> expression NEQUAL expression .) ]
  ! MODULO          [ reduce using rule 123 (expression -> expression NEQUAL expression .) ]
  ! SHL             [ shift and go to state 148 ]
  ! SHR             [ shift and go to state 149 ]
  ! EQUAL           [ shift and go to state 150 ]
  ! NEQUAL          [ shift and go to state 151 ]
  ! LT              [ shift and go to state 152 ]
  ! GT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GE              [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 208

    (124) expression -> expression LT expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 124 (expression -> expression LT expression .)
    SHL             reduce using rule 124 (expression -> expression LT expression .)
    SHR             reduce using rule 124 (expression -> expression LT expression .)
    EQUAL           reduce using rule 124 (expression -> expression LT expression .)
    NEQUAL          reduce using rule 124 (expression -> expression LT expression .)
    LT              reduce using rule 124 (expression -> expression LT expression .)
    GT              reduce using rule 124 (expression -> expression LT expression .)
    LE              reduce using rule 124 (expression -> expression LT expression .)
    GE              reduce using rule 124 (expression -> expression LT expression .)
    AND             reduce using rule 124 (expression -> expression LT expression .)
    OR              reduce using rule 124 (expression -> expression LT expression .)
    XOR             reduce using rule 124 (expression -> expression LT expression .)
    DO              reduce using rule 124 (expression -> expression LT expression .)
    OF              reduce using rule 124 (expression -> expression LT expression .)
    END             reduce using rule 124 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 124 (expression -> expression LT expression .)
    UNTIL           reduce using rule 124 (expression -> expression LT expression .)
    ELSE            reduce using rule 124 (expression -> expression LT expression .)
    STRING_LITERAL  reduce using rule 124 (expression -> expression LT expression .)
    INTEGER_CONST   reduce using rule 124 (expression -> expression LT expression .)
    REAL_CONST      reduce using rule 124 (expression -> expression LT expression .)
    ID              reduce using rule 124 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 124 (expression -> expression LT expression .)
    COMMA           reduce using rule 124 (expression -> expression LT expression .)
    RPAREN          reduce using rule 124 (expression -> expression LT expression .)
    TO              reduce using rule 124 (expression -> expression LT expression .)
    DOWNTO          reduce using rule 124 (expression -> expression LT expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147

  ! PLUS            [ reduce using rule 124 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 124 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 124 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 124 (expression -> expression LT expression .) ]
  ! DIVIDE_INT      [ reduce using rule 124 (expression -> expression LT expression .) ]
  ! MODULO          [ reduce using rule 124 (expression -> expression LT expression .) ]
  ! SHL             [ shift and go to state 148 ]
  ! SHR             [ shift and go to state 149 ]
  ! EQUAL           [ shift and go to state 150 ]
  ! NEQUAL          [ shift and go to state 151 ]
  ! LT              [ shift and go to state 152 ]
  ! GT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GE              [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 209

    (125) expression -> expression GT expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 125 (expression -> expression GT expression .)
    SHL             reduce using rule 125 (expression -> expression GT expression .)
    SHR             reduce using rule 125 (expression -> expression GT expression .)
    EQUAL           reduce using rule 125 (expression -> expression GT expression .)
    NEQUAL          reduce using rule 125 (expression -> expression GT expression .)
    LT              reduce using rule 125 (expression -> expression GT expression .)
    GT              reduce using rule 125 (expression -> expression GT expression .)
    LE              reduce using rule 125 (expression -> expression GT expression .)
    GE              reduce using rule 125 (expression -> expression GT expression .)
    AND             reduce using rule 125 (expression -> expression GT expression .)
    OR              reduce using rule 125 (expression -> expression GT expression .)
    XOR             reduce using rule 125 (expression -> expression GT expression .)
    DO              reduce using rule 125 (expression -> expression GT expression .)
    OF              reduce using rule 125 (expression -> expression GT expression .)
    END             reduce using rule 125 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 125 (expression -> expression GT expression .)
    UNTIL           reduce using rule 125 (expression -> expression GT expression .)
    ELSE            reduce using rule 125 (expression -> expression GT expression .)
    STRING_LITERAL  reduce using rule 125 (expression -> expression GT expression .)
    INTEGER_CONST   reduce using rule 125 (expression -> expression GT expression .)
    REAL_CONST      reduce using rule 125 (expression -> expression GT expression .)
    ID              reduce using rule 125 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 125 (expression -> expression GT expression .)
    COMMA           reduce using rule 125 (expression -> expression GT expression .)
    RPAREN          reduce using rule 125 (expression -> expression GT expression .)
    TO              reduce using rule 125 (expression -> expression GT expression .)
    DOWNTO          reduce using rule 125 (expression -> expression GT expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147

  ! PLUS            [ reduce using rule 125 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 125 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 125 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 125 (expression -> expression GT expression .) ]
  ! DIVIDE_INT      [ reduce using rule 125 (expression -> expression GT expression .) ]
  ! MODULO          [ reduce using rule 125 (expression -> expression GT expression .) ]
  ! SHL             [ shift and go to state 148 ]
  ! SHR             [ shift and go to state 149 ]
  ! EQUAL           [ shift and go to state 150 ]
  ! NEQUAL          [ shift and go to state 151 ]
  ! LT              [ shift and go to state 152 ]
  ! GT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GE              [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 210

    (126) expression -> expression LE expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 126 (expression -> expression LE expression .)
    SHL             reduce using rule 126 (expression -> expression LE expression .)
    SHR             reduce using rule 126 (expression -> expression LE expression .)
    EQUAL           reduce using rule 126 (expression -> expression LE expression .)
    NEQUAL          reduce using rule 126 (expression -> expression LE expression .)
    LT              reduce using rule 126 (expression -> expression LE expression .)
    GT              reduce using rule 126 (expression -> expression LE expression .)
    LE              reduce using rule 126 (expression -> expression LE expression .)
    GE              reduce using rule 126 (expression -> expression LE expression .)
    AND             reduce using rule 126 (expression -> expression LE expression .)
    OR              reduce using rule 126 (expression -> expression LE expression .)
    XOR             reduce using rule 126 (expression -> expression LE expression .)
    DO              reduce using rule 126 (expression -> expression LE expression .)
    OF              reduce using rule 126 (expression -> expression LE expression .)
    END             reduce using rule 126 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 126 (expression -> expression LE expression .)
    UNTIL           reduce using rule 126 (expression -> expression LE expression .)
    ELSE            reduce using rule 126 (expression -> expression LE expression .)
    STRING_LITERAL  reduce using rule 126 (expression -> expression LE expression .)
    INTEGER_CONST   reduce using rule 126 (expression -> expression LE expression .)
    REAL_CONST      reduce using rule 126 (expression -> expression LE expression .)
    ID              reduce using rule 126 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 126 (expression -> expression LE expression .)
    COMMA           reduce using rule 126 (expression -> expression LE expression .)
    RPAREN          reduce using rule 126 (expression -> expression LE expression .)
    TO              reduce using rule 126 (expression -> expression LE expression .)
    DOWNTO          reduce using rule 126 (expression -> expression LE expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147

  ! PLUS            [ reduce using rule 126 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 126 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 126 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 126 (expression -> expression LE expression .) ]
  ! DIVIDE_INT      [ reduce using rule 126 (expression -> expression LE expression .) ]
  ! MODULO          [ reduce using rule 126 (expression -> expression LE expression .) ]
  ! SHL             [ shift and go to state 148 ]
  ! SHR             [ shift and go to state 149 ]
  ! EQUAL           [ shift and go to state 150 ]
  ! NEQUAL          [ shift and go to state 151 ]
  ! LT              [ shift and go to state 152 ]
  ! GT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GE              [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 211

    (127) expression -> expression GE expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 127 (expression -> expression GE expression .)
    SHL             reduce using rule 127 (expression -> expression GE expression .)
    SHR             reduce using rule 127 (expression -> expression GE expression .)
    EQUAL           reduce using rule 127 (expression -> expression GE expression .)
    NEQUAL          reduce using rule 127 (expression -> expression GE expression .)
    LT              reduce using rule 127 (expression -> expression GE expression .)
    GT              reduce using rule 127 (expression -> expression GE expression .)
    LE              reduce using rule 127 (expression -> expression GE expression .)
    GE              reduce using rule 127 (expression -> expression GE expression .)
    AND             reduce using rule 127 (expression -> expression GE expression .)
    OR              reduce using rule 127 (expression -> expression GE expression .)
    XOR             reduce using rule 127 (expression -> expression GE expression .)
    DO              reduce using rule 127 (expression -> expression GE expression .)
    OF              reduce using rule 127 (expression -> expression GE expression .)
    END             reduce using rule 127 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 127 (expression -> expression GE expression .)
    UNTIL           reduce using rule 127 (expression -> expression GE expression .)
    ELSE            reduce using rule 127 (expression -> expression GE expression .)
    STRING_LITERAL  reduce using rule 127 (expression -> expression GE expression .)
    INTEGER_CONST   reduce using rule 127 (expression -> expression GE expression .)
    REAL_CONST      reduce using rule 127 (expression -> expression GE expression .)
    ID              reduce using rule 127 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 127 (expression -> expression GE expression .)
    COMMA           reduce using rule 127 (expression -> expression GE expression .)
    RPAREN          reduce using rule 127 (expression -> expression GE expression .)
    TO              reduce using rule 127 (expression -> expression GE expression .)
    DOWNTO          reduce using rule 127 (expression -> expression GE expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147

  ! PLUS            [ reduce using rule 127 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 127 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 127 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 127 (expression -> expression GE expression .) ]
  ! DIVIDE_INT      [ reduce using rule 127 (expression -> expression GE expression .) ]
  ! MODULO          [ reduce using rule 127 (expression -> expression GE expression .) ]
  ! SHL             [ shift and go to state 148 ]
  ! SHR             [ shift and go to state 149 ]
  ! EQUAL           [ shift and go to state 150 ]
  ! NEQUAL          [ shift and go to state 151 ]
  ! LT              [ shift and go to state 152 ]
  ! GT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GE              [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 212

    (128) expression -> expression AND expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 128 (expression -> expression AND expression .)
    AND             reduce using rule 128 (expression -> expression AND expression .)
    OR              reduce using rule 128 (expression -> expression AND expression .)
    XOR             reduce using rule 128 (expression -> expression AND expression .)
    DO              reduce using rule 128 (expression -> expression AND expression .)
    OF              reduce using rule 128 (expression -> expression AND expression .)
    END             reduce using rule 128 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 128 (expression -> expression AND expression .)
    UNTIL           reduce using rule 128 (expression -> expression AND expression .)
    ELSE            reduce using rule 128 (expression -> expression AND expression .)
    STRING_LITERAL  reduce using rule 128 (expression -> expression AND expression .)
    INTEGER_CONST   reduce using rule 128 (expression -> expression AND expression .)
    REAL_CONST      reduce using rule 128 (expression -> expression AND expression .)
    ID              reduce using rule 128 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 128 (expression -> expression AND expression .)
    COMMA           reduce using rule 128 (expression -> expression AND expression .)
    RPAREN          reduce using rule 128 (expression -> expression AND expression .)
    TO              reduce using rule 128 (expression -> expression AND expression .)
    DOWNTO          reduce using rule 128 (expression -> expression AND expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155

  ! PLUS            [ reduce using rule 128 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 128 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 128 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 128 (expression -> expression AND expression .) ]
  ! DIVIDE_INT      [ reduce using rule 128 (expression -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 128 (expression -> expression AND expression .) ]
  ! SHL             [ reduce using rule 128 (expression -> expression AND expression .) ]
  ! SHR             [ reduce using rule 128 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 128 (expression -> expression AND expression .) ]
  ! NEQUAL          [ reduce using rule 128 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 128 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 128 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 128 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 128 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 213

    (129) expression -> expression OR expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 129 (expression -> expression OR expression .)
    OR              reduce using rule 129 (expression -> expression OR expression .)
    XOR             reduce using rule 129 (expression -> expression OR expression .)
    DO              reduce using rule 129 (expression -> expression OR expression .)
    OF              reduce using rule 129 (expression -> expression OR expression .)
    END             reduce using rule 129 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 129 (expression -> expression OR expression .)
    UNTIL           reduce using rule 129 (expression -> expression OR expression .)
    ELSE            reduce using rule 129 (expression -> expression OR expression .)
    STRING_LITERAL  reduce using rule 129 (expression -> expression OR expression .)
    INTEGER_CONST   reduce using rule 129 (expression -> expression OR expression .)
    REAL_CONST      reduce using rule 129 (expression -> expression OR expression .)
    ID              reduce using rule 129 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 129 (expression -> expression OR expression .)
    COMMA           reduce using rule 129 (expression -> expression OR expression .)
    RPAREN          reduce using rule 129 (expression -> expression OR expression .)
    TO              reduce using rule 129 (expression -> expression OR expression .)
    DOWNTO          reduce using rule 129 (expression -> expression OR expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156

  ! PLUS            [ reduce using rule 129 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 129 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 129 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 129 (expression -> expression OR expression .) ]
  ! DIVIDE_INT      [ reduce using rule 129 (expression -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 129 (expression -> expression OR expression .) ]
  ! SHL             [ reduce using rule 129 (expression -> expression OR expression .) ]
  ! SHR             [ reduce using rule 129 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 129 (expression -> expression OR expression .) ]
  ! NEQUAL          [ reduce using rule 129 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 129 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 129 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 129 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 129 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 129 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 214

    (130) expression -> expression XOR expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    THEN            reduce using rule 130 (expression -> expression XOR expression .)
    OR              reduce using rule 130 (expression -> expression XOR expression .)
    XOR             reduce using rule 130 (expression -> expression XOR expression .)
    DO              reduce using rule 130 (expression -> expression XOR expression .)
    OF              reduce using rule 130 (expression -> expression XOR expression .)
    END             reduce using rule 130 (expression -> expression XOR expression .)
    SEMICOLON       reduce using rule 130 (expression -> expression XOR expression .)
    UNTIL           reduce using rule 130 (expression -> expression XOR expression .)
    ELSE            reduce using rule 130 (expression -> expression XOR expression .)
    STRING_LITERAL  reduce using rule 130 (expression -> expression XOR expression .)
    INTEGER_CONST   reduce using rule 130 (expression -> expression XOR expression .)
    REAL_CONST      reduce using rule 130 (expression -> expression XOR expression .)
    ID              reduce using rule 130 (expression -> expression XOR expression .)
    RBRACKET        reduce using rule 130 (expression -> expression XOR expression .)
    COMMA           reduce using rule 130 (expression -> expression XOR expression .)
    RPAREN          reduce using rule 130 (expression -> expression XOR expression .)
    TO              reduce using rule 130 (expression -> expression XOR expression .)
    DOWNTO          reduce using rule 130 (expression -> expression XOR expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156

  ! PLUS            [ reduce using rule 130 (expression -> expression XOR expression .) ]
  ! MINUS           [ reduce using rule 130 (expression -> expression XOR expression .) ]
  ! TIMES           [ reduce using rule 130 (expression -> expression XOR expression .) ]
  ! DIVIDE          [ reduce using rule 130 (expression -> expression XOR expression .) ]
  ! DIVIDE_INT      [ reduce using rule 130 (expression -> expression XOR expression .) ]
  ! MODULO          [ reduce using rule 130 (expression -> expression XOR expression .) ]
  ! SHL             [ reduce using rule 130 (expression -> expression XOR expression .) ]
  ! SHR             [ reduce using rule 130 (expression -> expression XOR expression .) ]
  ! EQUAL           [ reduce using rule 130 (expression -> expression XOR expression .) ]
  ! NEQUAL          [ reduce using rule 130 (expression -> expression XOR expression .) ]
  ! LT              [ reduce using rule 130 (expression -> expression XOR expression .) ]
  ! GT              [ reduce using rule 130 (expression -> expression XOR expression .) ]
  ! LE              [ reduce using rule 130 (expression -> expression XOR expression .) ]
  ! GE              [ reduce using rule 130 (expression -> expression XOR expression .) ]
  ! AND             [ reduce using rule 130 (expression -> expression XOR expression .) ]
  ! OR              [ shift and go to state 157 ]
  ! XOR             [ shift and go to state 158 ]


state 215

    (132) expression -> LPAREN expression RPAREN .

    THEN            reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    DIVIDE_INT      reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    SHL             reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    SHR             reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    NEQUAL          reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    OF              reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    STRING_LITERAL  reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    INTEGER_CONST   reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    REAL_CONST      reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 132 (expression -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 132 (expression -> LPAREN expression RPAREN .)


state 216

    (138) function_call -> ID LPAREN args_optional . RPAREN

    RPAREN          shift and go to state 249


state 217

    (98) while_statement -> WHILE expression DO statement .

    END             reduce using rule 98 (while_statement -> WHILE expression DO statement .)
    SEMICOLON       reduce using rule 98 (while_statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 98 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 98 (while_statement -> WHILE expression DO statement .)
    STRING_LITERAL  reduce using rule 98 (while_statement -> WHILE expression DO statement .)
    INTEGER_CONST   reduce using rule 98 (while_statement -> WHILE expression DO statement .)
    REAL_CONST      reduce using rule 98 (while_statement -> WHILE expression DO statement .)
    PLUS            reduce using rule 98 (while_statement -> WHILE expression DO statement .)
    MINUS           reduce using rule 98 (while_statement -> WHILE expression DO statement .)
    ID              reduce using rule 98 (while_statement -> WHILE expression DO statement .)


state 218

    (99) repeat_statement -> REPEAT statement_list UNTIL expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    END             reduce using rule 99 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    SEMICOLON       reduce using rule 99 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    UNTIL           reduce using rule 99 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    ELSE            reduce using rule 99 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    STRING_LITERAL  reduce using rule 99 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    INTEGER_CONST   reduce using rule 99 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    REAL_CONST      reduce using rule 99 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    ID              reduce using rule 99 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    XOR             shift and go to state 158

  ! PLUS            [ reduce using rule 99 (repeat_statement -> REPEAT statement_list UNTIL expression .) ]
  ! MINUS           [ reduce using rule 99 (repeat_statement -> REPEAT statement_list UNTIL expression .) ]


state 219

    (100) for_statement -> FOR ID ASSIGN expression . TO expression DO statement
    (101) for_statement -> FOR ID ASSIGN expression . DOWNTO expression DO statement
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    TO              shift and go to state 250
    DOWNTO          shift and go to state 251
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    XOR             shift and go to state 158


state 220

    (113) record_assignment -> ID DOT ID ASSIGN . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 252
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 221

    (85) procedure_call -> ID LPAREN args_optional RPAREN .

    END             reduce using rule 85 (procedure_call -> ID LPAREN args_optional RPAREN .)
    SEMICOLON       reduce using rule 85 (procedure_call -> ID LPAREN args_optional RPAREN .)
    UNTIL           reduce using rule 85 (procedure_call -> ID LPAREN args_optional RPAREN .)
    ELSE            reduce using rule 85 (procedure_call -> ID LPAREN args_optional RPAREN .)
    STRING_LITERAL  reduce using rule 85 (procedure_call -> ID LPAREN args_optional RPAREN .)
    INTEGER_CONST   reduce using rule 85 (procedure_call -> ID LPAREN args_optional RPAREN .)
    REAL_CONST      reduce using rule 85 (procedure_call -> ID LPAREN args_optional RPAREN .)
    PLUS            reduce using rule 85 (procedure_call -> ID LPAREN args_optional RPAREN .)
    MINUS           reduce using rule 85 (procedure_call -> ID LPAREN args_optional RPAREN .)
    ID              reduce using rule 85 (procedure_call -> ID LPAREN args_optional RPAREN .)


state 222

    (86) args -> args COMMA . expression
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 253
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 223

    (102) case_statement -> CASE expression OF case_element_list . else_clause_optional END
    (103) case_element_list -> case_element_list . semicolon_optional case_element
    (109) else_clause_optional -> . semicolon_optional ELSE statement semicolon_optional
    (110) else_clause_optional -> . empty
    (111) semicolon_optional -> . SEMICOLON
    (112) semicolon_optional -> . empty
    (150) empty -> .

    SEMICOLON       shift and go to state 257
    END             reduce using rule 150 (empty -> .)
    ELSE            reduce using rule 150 (empty -> .)
    STRING_LITERAL  reduce using rule 150 (empty -> .)
    INTEGER_CONST   reduce using rule 150 (empty -> .)
    REAL_CONST      reduce using rule 150 (empty -> .)
    PLUS            reduce using rule 150 (empty -> .)
    MINUS           reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)

    else_clause_optional           shift and go to state 254
    semicolon_optional             shift and go to state 255
    empty                          shift and go to state 256

state 224

    (104) case_element_list -> case_element .

    SEMICOLON       reduce using rule 104 (case_element_list -> case_element .)
    END             reduce using rule 104 (case_element_list -> case_element .)
    ELSE            reduce using rule 104 (case_element_list -> case_element .)
    STRING_LITERAL  reduce using rule 104 (case_element_list -> case_element .)
    INTEGER_CONST   reduce using rule 104 (case_element_list -> case_element .)
    REAL_CONST      reduce using rule 104 (case_element_list -> case_element .)
    PLUS            reduce using rule 104 (case_element_list -> case_element .)
    MINUS           reduce using rule 104 (case_element_list -> case_element .)
    ID              reduce using rule 104 (case_element_list -> case_element .)


state 225

    (105) case_element -> case_label_list . COLON statement
    (106) case_label_list -> case_label_list . COMMA case_label

    COLON           shift and go to state 258
    COMMA           shift and go to state 259


state 226

    (107) case_label_list -> case_label .

    COLON           reduce using rule 107 (case_label_list -> case_label .)
    COMMA           reduce using rule 107 (case_label_list -> case_label .)


state 227

    (108) case_label -> constant .

    COLON           reduce using rule 108 (case_label -> constant .)
    COMMA           reduce using rule 108 (case_label -> constant .)


state 228

    (57) array_type -> ARRAY LBRACKET index_type . RBRACKET OF type

    RBRACKET        shift and go to state 260


state 229

    (58) index_type -> simple_type .

    RBRACKET        reduce using rule 58 (index_type -> simple_type .)


state 230

    (59) record_type -> RECORD record_fields END .

    SEMICOLON       reduce using rule 59 (record_type -> RECORD record_fields END .)
    RPAREN          reduce using rule 59 (record_type -> RECORD record_fields END .)


state 231

    (61) field_list -> field_list field_declaration . SEMICOLON

    SEMICOLON       shift and go to state 261


state 232

    (62) field_list -> field_declaration SEMICOLON .

    ID              reduce using rule 62 (field_list -> field_declaration SEMICOLON .)
    END             reduce using rule 62 (field_list -> field_declaration SEMICOLON .)


state 233

    (63) field_declaration -> id_list COLON . type
    (36) type -> . simple_type
    (37) type -> . array_type
    (38) type -> . record_type
    (39) type -> . class_type
    (54) simple_type -> . subrange_type
    (55) simple_type -> . type_identifier
    (57) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (59) record_type -> . RECORD record_fields END
    (40) class_type -> . CLASS class_body END
    (56) subrange_type -> . constant DOTDOT constant
    (64) type_identifier -> . ID
    (65) type_identifier -> . predefined_type
    (141) constant -> . UNSIGNED_NUMBER
    (142) constant -> . sign UNSIGNED_NUMBER
    (143) constant -> . STRING_LITERAL
    (144) constant -> . constant_identifier
    (66) predefined_type -> . INTEGER
    (67) predefined_type -> . REAL
    (68) predefined_type -> . BOOLEAN
    (69) predefined_type -> . STRING
    (145) UNSIGNED_NUMBER -> . INTEGER_CONST
    (146) UNSIGNED_NUMBER -> . REAL_CONST
    (147) sign -> . PLUS
    (148) sign -> . MINUS
    (149) constant_identifier -> . ID

    ARRAY           shift and go to state 107
    RECORD          shift and go to state 108
    CLASS           shift and go to state 109
    ID              shift and go to state 111
    STRING_LITERAL  shift and go to state 115
    INTEGER         shift and go to state 117
    REAL            shift and go to state 118
    BOOLEAN         shift and go to state 119
    STRING          shift and go to state 120
    INTEGER_CONST   shift and go to state 121
    REAL_CONST      shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124

    type                           shift and go to state 262
    simple_type                    shift and go to state 101
    array_type                     shift and go to state 102
    record_type                    shift and go to state 103
    class_type                     shift and go to state 104
    subrange_type                  shift and go to state 105
    type_identifier                shift and go to state 106
    constant                       shift and go to state 110
    predefined_type                shift and go to state 112
    UNSIGNED_NUMBER                shift and go to state 113
    sign                           shift and go to state 114
    constant_identifier            shift and go to state 116

state 234

    (40) class_type -> CLASS class_body END .

    SEMICOLON       reduce using rule 40 (class_type -> CLASS class_body END .)
    RPAREN          reduce using rule 40 (class_type -> CLASS class_body END .)


state 235

    (42) class_member_list -> class_member_list class_member .

    ID              reduce using rule 42 (class_member_list -> class_member_list class_member .)
    CONSTRUCTOR     reduce using rule 42 (class_member_list -> class_member_list class_member .)
    FUNCTION        reduce using rule 42 (class_member_list -> class_member_list class_member .)
    PROCEDURE       reduce using rule 42 (class_member_list -> class_member_list class_member .)
    END             reduce using rule 42 (class_member_list -> class_member_list class_member .)


state 236

    (48) class_variable_declaration -> ID COLON . type SEMICOLON
    (36) type -> . simple_type
    (37) type -> . array_type
    (38) type -> . record_type
    (39) type -> . class_type
    (54) simple_type -> . subrange_type
    (55) simple_type -> . type_identifier
    (57) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (59) record_type -> . RECORD record_fields END
    (40) class_type -> . CLASS class_body END
    (56) subrange_type -> . constant DOTDOT constant
    (64) type_identifier -> . ID
    (65) type_identifier -> . predefined_type
    (141) constant -> . UNSIGNED_NUMBER
    (142) constant -> . sign UNSIGNED_NUMBER
    (143) constant -> . STRING_LITERAL
    (144) constant -> . constant_identifier
    (66) predefined_type -> . INTEGER
    (67) predefined_type -> . REAL
    (68) predefined_type -> . BOOLEAN
    (69) predefined_type -> . STRING
    (145) UNSIGNED_NUMBER -> . INTEGER_CONST
    (146) UNSIGNED_NUMBER -> . REAL_CONST
    (147) sign -> . PLUS
    (148) sign -> . MINUS
    (149) constant_identifier -> . ID

    ARRAY           shift and go to state 107
    RECORD          shift and go to state 108
    CLASS           shift and go to state 109
    ID              shift and go to state 111
    STRING_LITERAL  shift and go to state 115
    INTEGER         shift and go to state 117
    REAL            shift and go to state 118
    BOOLEAN         shift and go to state 119
    STRING          shift and go to state 120
    INTEGER_CONST   shift and go to state 121
    REAL_CONST      shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124

    type                           shift and go to state 263
    simple_type                    shift and go to state 101
    array_type                     shift and go to state 102
    record_type                    shift and go to state 103
    class_type                     shift and go to state 104
    subrange_type                  shift and go to state 105
    type_identifier                shift and go to state 106
    constant                       shift and go to state 110
    predefined_type                shift and go to state 112
    UNSIGNED_NUMBER                shift and go to state 113
    sign                           shift and go to state 114
    constant_identifier            shift and go to state 116

state 237

    (49) constructor_declaration -> CONSTRUCTOR ID . formal_parameter_list_opt SEMICOLON
    (27) formal_parameter_list_opt -> . LPAREN formal_parameter_list RPAREN
    (28) formal_parameter_list_opt -> . empty
    (150) empty -> .

    LPAREN          shift and go to state 76
    SEMICOLON       reduce using rule 150 (empty -> .)

    formal_parameter_list_opt      shift and go to state 264
    empty                          shift and go to state 77

state 238

    (50) class_function_declaration -> FUNCTION ID . formal_parameter_list_opt COLON type SEMICOLON
    (27) formal_parameter_list_opt -> . LPAREN formal_parameter_list RPAREN
    (28) formal_parameter_list_opt -> . empty
    (150) empty -> .

    LPAREN          shift and go to state 76
    COLON           reduce using rule 150 (empty -> .)

    formal_parameter_list_opt      shift and go to state 265
    empty                          shift and go to state 77

state 239

    (53) class_procedure_declaration -> PROCEDURE ID . formal_parameter_list_opt SEMICOLON
    (27) formal_parameter_list_opt -> . LPAREN formal_parameter_list RPAREN
    (28) formal_parameter_list_opt -> . empty
    (150) empty -> .

    LPAREN          shift and go to state 76
    SEMICOLON       reduce using rule 150 (empty -> .)

    formal_parameter_list_opt      shift and go to state 266
    empty                          shift and go to state 77

state 240

    (56) subrange_type -> constant DOTDOT constant .

    SEMICOLON       reduce using rule 56 (subrange_type -> constant DOTDOT constant .)
    RBRACKET        reduce using rule 56 (subrange_type -> constant DOTDOT constant .)
    RPAREN          reduce using rule 56 (subrange_type -> constant DOTDOT constant .)


state 241

    (52) procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON .

    VAR             reduce using rule 52 (procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 52 (procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 52 (procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 52 (procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 52 (procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 52 (procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON .)


state 242

    (29) formal_parameter_list -> formal_parameter_list SEMICOLON formal_parameter .

    RPAREN          reduce using rule 29 (formal_parameter_list -> formal_parameter_list SEMICOLON formal_parameter .)
    SEMICOLON       reduce using rule 29 (formal_parameter_list -> formal_parameter_list SEMICOLON formal_parameter .)


state 243

    (31) formal_parameter -> id_list COLON type .

    RPAREN          reduce using rule 31 (formal_parameter -> id_list COLON type .)
    SEMICOLON       reduce using rule 31 (formal_parameter -> id_list COLON type .)


state 244

    (51) function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON . block SEMICOLON
    (7) block -> . declarations compound_statement
    (8) declarations -> . declaration_list
    (9) declarations -> . empty
    (10) declaration_list -> . declaration_list declaration
    (11) declaration_list -> . declaration
    (150) empty -> .
    (12) declaration -> . var_declaration
    (13) declaration -> . const_declaration
    (14) declaration -> . type_declaration
    (15) declaration -> . procedure_declaration
    (16) declaration -> . function_declaration
    (17) var_declaration -> . VAR var_declaration_list
    (23) const_declaration -> . CONST const_list
    (32) type_declaration -> . TYPE type_list
    (52) procedure_declaration -> . PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON
    (51) function_declaration -> . FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON

    BEGIN           reduce using rule 150 (empty -> .)
    VAR             shift and go to state 19
    CONST           shift and go to state 20
    TYPE            shift and go to state 21
    PROCEDURE       shift and go to state 22
    FUNCTION        shift and go to state 23

    block                          shift and go to state 267
    declarations                   shift and go to state 10
    declaration_list               shift and go to state 11
    empty                          shift and go to state 12
    declaration                    shift and go to state 13
    var_declaration                shift and go to state 14
    const_declaration              shift and go to state 15
    type_declaration               shift and go to state 16
    procedure_declaration          shift and go to state 17
    function_declaration           shift and go to state 18

state 245

    (83) expression_list -> expression_list COMMA expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    RBRACKET        reduce using rule 83 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 83 (expression_list -> expression_list COMMA expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    XOR             shift and go to state 158


state 246

    (95) if_statement -> IF expression THEN statement else_part .

    END             reduce using rule 95 (if_statement -> IF expression THEN statement else_part .)
    SEMICOLON       reduce using rule 95 (if_statement -> IF expression THEN statement else_part .)
    UNTIL           reduce using rule 95 (if_statement -> IF expression THEN statement else_part .)
    ELSE            reduce using rule 95 (if_statement -> IF expression THEN statement else_part .)
    STRING_LITERAL  reduce using rule 95 (if_statement -> IF expression THEN statement else_part .)
    INTEGER_CONST   reduce using rule 95 (if_statement -> IF expression THEN statement else_part .)
    REAL_CONST      reduce using rule 95 (if_statement -> IF expression THEN statement else_part .)
    PLUS            reduce using rule 95 (if_statement -> IF expression THEN statement else_part .)
    MINUS           reduce using rule 95 (if_statement -> IF expression THEN statement else_part .)
    ID              reduce using rule 95 (if_statement -> IF expression THEN statement else_part .)


state 247

    (96) else_part -> ELSE . statement
    (73) statement -> . simple_statement
    (74) statement -> . structured_statement
    (75) simple_statement -> . assignment_statement
    (76) simple_statement -> . procedure_call_statement
    (77) simple_statement -> . empty
    (88) structured_statement -> . compound_statement
    (89) structured_statement -> . if_statement
    (90) structured_statement -> . while_statement
    (91) structured_statement -> . repeat_statement
    (92) structured_statement -> . for_statement
    (93) structured_statement -> . case_statement
    (94) structured_statement -> . record_assignment
    (78) assignment_statement -> . variable ASSIGN expression
    (84) procedure_call_statement -> . procedure_call
    (150) empty -> .
    (70) compound_statement -> . BEGIN statement_list END
    (95) if_statement -> . IF expression THEN statement else_part
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_list UNTIL expression
    (100) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (101) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (102) case_statement -> . CASE expression OF case_element_list else_clause_optional END
    (113) record_assignment -> . ID DOT ID ASSIGN expression
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET
    (85) procedure_call -> . ID LPAREN args_optional RPAREN

  ! shift/reduce conflict for ID resolved as shift
    ELSE            reduce using rule 150 (empty -> .)
    END             reduce using rule 150 (empty -> .)
    SEMICOLON       reduce using rule 150 (empty -> .)
    UNTIL           reduce using rule 150 (empty -> .)
    STRING_LITERAL  reduce using rule 150 (empty -> .)
    INTEGER_CONST   reduce using rule 150 (empty -> .)
    REAL_CONST      reduce using rule 150 (empty -> .)
    PLUS            reduce using rule 150 (empty -> .)
    MINUS           reduce using rule 150 (empty -> .)
    BEGIN           shift and go to state 28
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    REPEAT          shift and go to state 62
    FOR             shift and go to state 63
    CASE            shift and go to state 65
    ID              shift and go to state 64

  ! ID              [ reduce using rule 150 (empty -> .) ]

    statement                      shift and go to state 268
    simple_statement               shift and go to state 46
    structured_statement           shift and go to state 47
    assignment_statement           shift and go to state 48
    procedure_call_statement       shift and go to state 49
    empty                          shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    while_statement                shift and go to state 53
    repeat_statement               shift and go to state 54
    for_statement                  shift and go to state 55
    case_statement                 shift and go to state 56
    record_assignment              shift and go to state 57
    variable                       shift and go to state 58
    procedure_call                 shift and go to state 59

state 248

    (97) else_part -> empty .

    ELSE            reduce using rule 97 (else_part -> empty .)
    END             reduce using rule 97 (else_part -> empty .)
    SEMICOLON       reduce using rule 97 (else_part -> empty .)
    UNTIL           reduce using rule 97 (else_part -> empty .)
    STRING_LITERAL  reduce using rule 97 (else_part -> empty .)
    INTEGER_CONST   reduce using rule 97 (else_part -> empty .)
    REAL_CONST      reduce using rule 97 (else_part -> empty .)
    PLUS            reduce using rule 97 (else_part -> empty .)
    MINUS           reduce using rule 97 (else_part -> empty .)
    ID              reduce using rule 97 (else_part -> empty .)


state 249

    (138) function_call -> ID LPAREN args_optional RPAREN .

    THEN            reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    PLUS            reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    MINUS           reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    TIMES           reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    DIVIDE          reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    DIVIDE_INT      reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    MODULO          reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    SHL             reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    SHR             reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    EQUAL           reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    NEQUAL          reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    LT              reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    GT              reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    LE              reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    GE              reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    AND             reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    OR              reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    XOR             reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    DO              reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    OF              reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    END             reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    SEMICOLON       reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    UNTIL           reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    ELSE            reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    STRING_LITERAL  reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    INTEGER_CONST   reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    REAL_CONST      reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    ID              reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    RBRACKET        reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    COMMA           reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    RPAREN          reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    TO              reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)
    DOWNTO          reduce using rule 138 (function_call -> ID LPAREN args_optional RPAREN .)


state 250

    (100) for_statement -> FOR ID ASSIGN expression TO . expression DO statement
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 269
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 251

    (101) for_statement -> FOR ID ASSIGN expression DOWNTO . expression DO statement
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression TIMES expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression DIVIDE_INT expression
    (119) expression -> . expression MODULO expression
    (120) expression -> . expression SHL expression
    (121) expression -> . expression SHR expression
    (122) expression -> . expression EQUAL expression
    (123) expression -> . expression NEQUAL expression
    (124) expression -> . expression LT expression
    (125) expression -> . expression GT expression
    (126) expression -> . expression LE expression
    (127) expression -> . expression GE expression
    (128) expression -> . expression AND expression
    (129) expression -> . expression OR expression
    (130) expression -> . expression XOR expression
    (131) expression -> . NOT expression
    (132) expression -> . LPAREN expression RPAREN
    (133) expression -> . function_call
    (134) expression -> . variable
    (135) expression -> . INTEGER_CONST
    (136) expression -> . REAL_CONST
    (137) expression -> . STRING_LITERAL
    (138) function_call -> . ID LPAREN args_optional RPAREN
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET

    NOT             shift and go to state 86
    LPAREN          shift and go to state 87
    INTEGER_CONST   shift and go to state 90
    REAL_CONST      shift and go to state 91
    STRING_LITERAL  shift and go to state 92
    ID              shift and go to state 93

    expression                     shift and go to state 270
    function_call                  shift and go to state 88
    variable                       shift and go to state 89

state 252

    (113) record_assignment -> ID DOT ID ASSIGN expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    END             reduce using rule 113 (record_assignment -> ID DOT ID ASSIGN expression .)
    SEMICOLON       reduce using rule 113 (record_assignment -> ID DOT ID ASSIGN expression .)
    UNTIL           reduce using rule 113 (record_assignment -> ID DOT ID ASSIGN expression .)
    ELSE            reduce using rule 113 (record_assignment -> ID DOT ID ASSIGN expression .)
    STRING_LITERAL  reduce using rule 113 (record_assignment -> ID DOT ID ASSIGN expression .)
    INTEGER_CONST   reduce using rule 113 (record_assignment -> ID DOT ID ASSIGN expression .)
    REAL_CONST      reduce using rule 113 (record_assignment -> ID DOT ID ASSIGN expression .)
    ID              reduce using rule 113 (record_assignment -> ID DOT ID ASSIGN expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    XOR             shift and go to state 158

  ! PLUS            [ reduce using rule 113 (record_assignment -> ID DOT ID ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 113 (record_assignment -> ID DOT ID ASSIGN expression .) ]


state 253

    (86) args -> args COMMA expression .
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    COMMA           reduce using rule 86 (args -> args COMMA expression .)
    RPAREN          reduce using rule 86 (args -> args COMMA expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    XOR             shift and go to state 158


state 254

    (102) case_statement -> CASE expression OF case_element_list else_clause_optional . END

    END             shift and go to state 271


state 255

    (103) case_element_list -> case_element_list semicolon_optional . case_element
    (109) else_clause_optional -> semicolon_optional . ELSE statement semicolon_optional
    (105) case_element -> . case_label_list COLON statement
    (106) case_label_list -> . case_label_list COMMA case_label
    (107) case_label_list -> . case_label
    (108) case_label -> . constant
    (141) constant -> . UNSIGNED_NUMBER
    (142) constant -> . sign UNSIGNED_NUMBER
    (143) constant -> . STRING_LITERAL
    (144) constant -> . constant_identifier
    (145) UNSIGNED_NUMBER -> . INTEGER_CONST
    (146) UNSIGNED_NUMBER -> . REAL_CONST
    (147) sign -> . PLUS
    (148) sign -> . MINUS
    (149) constant_identifier -> . ID

    ELSE            shift and go to state 273
    STRING_LITERAL  shift and go to state 115
    INTEGER_CONST   shift and go to state 121
    REAL_CONST      shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    ID              shift and go to state 127

    case_element                   shift and go to state 272
    case_label_list                shift and go to state 225
    case_label                     shift and go to state 226
    constant                       shift and go to state 227
    UNSIGNED_NUMBER                shift and go to state 113
    sign                           shift and go to state 114
    constant_identifier            shift and go to state 116

state 256

    (110) else_clause_optional -> empty .
    (112) semicolon_optional -> empty .

    END             reduce using rule 110 (else_clause_optional -> empty .)
    ELSE            reduce using rule 112 (semicolon_optional -> empty .)
    STRING_LITERAL  reduce using rule 112 (semicolon_optional -> empty .)
    INTEGER_CONST   reduce using rule 112 (semicolon_optional -> empty .)
    REAL_CONST      reduce using rule 112 (semicolon_optional -> empty .)
    PLUS            reduce using rule 112 (semicolon_optional -> empty .)
    MINUS           reduce using rule 112 (semicolon_optional -> empty .)
    ID              reduce using rule 112 (semicolon_optional -> empty .)


state 257

    (111) semicolon_optional -> SEMICOLON .

    ELSE            reduce using rule 111 (semicolon_optional -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 111 (semicolon_optional -> SEMICOLON .)
    INTEGER_CONST   reduce using rule 111 (semicolon_optional -> SEMICOLON .)
    REAL_CONST      reduce using rule 111 (semicolon_optional -> SEMICOLON .)
    PLUS            reduce using rule 111 (semicolon_optional -> SEMICOLON .)
    MINUS           reduce using rule 111 (semicolon_optional -> SEMICOLON .)
    ID              reduce using rule 111 (semicolon_optional -> SEMICOLON .)
    END             reduce using rule 111 (semicolon_optional -> SEMICOLON .)


state 258

    (105) case_element -> case_label_list COLON . statement
    (73) statement -> . simple_statement
    (74) statement -> . structured_statement
    (75) simple_statement -> . assignment_statement
    (76) simple_statement -> . procedure_call_statement
    (77) simple_statement -> . empty
    (88) structured_statement -> . compound_statement
    (89) structured_statement -> . if_statement
    (90) structured_statement -> . while_statement
    (91) structured_statement -> . repeat_statement
    (92) structured_statement -> . for_statement
    (93) structured_statement -> . case_statement
    (94) structured_statement -> . record_assignment
    (78) assignment_statement -> . variable ASSIGN expression
    (84) procedure_call_statement -> . procedure_call
    (150) empty -> .
    (70) compound_statement -> . BEGIN statement_list END
    (95) if_statement -> . IF expression THEN statement else_part
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_list UNTIL expression
    (100) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (101) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (102) case_statement -> . CASE expression OF case_element_list else_clause_optional END
    (113) record_assignment -> . ID DOT ID ASSIGN expression
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET
    (85) procedure_call -> . ID LPAREN args_optional RPAREN

  ! shift/reduce conflict for ID resolved as shift
    SEMICOLON       reduce using rule 150 (empty -> .)
    END             reduce using rule 150 (empty -> .)
    ELSE            reduce using rule 150 (empty -> .)
    STRING_LITERAL  reduce using rule 150 (empty -> .)
    INTEGER_CONST   reduce using rule 150 (empty -> .)
    REAL_CONST      reduce using rule 150 (empty -> .)
    PLUS            reduce using rule 150 (empty -> .)
    MINUS           reduce using rule 150 (empty -> .)
    BEGIN           shift and go to state 28
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    REPEAT          shift and go to state 62
    FOR             shift and go to state 63
    CASE            shift and go to state 65
    ID              shift and go to state 64

  ! ID              [ reduce using rule 150 (empty -> .) ]

    statement                      shift and go to state 274
    simple_statement               shift and go to state 46
    structured_statement           shift and go to state 47
    assignment_statement           shift and go to state 48
    procedure_call_statement       shift and go to state 49
    empty                          shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    while_statement                shift and go to state 53
    repeat_statement               shift and go to state 54
    for_statement                  shift and go to state 55
    case_statement                 shift and go to state 56
    record_assignment              shift and go to state 57
    variable                       shift and go to state 58
    procedure_call                 shift and go to state 59

state 259

    (106) case_label_list -> case_label_list COMMA . case_label
    (108) case_label -> . constant
    (141) constant -> . UNSIGNED_NUMBER
    (142) constant -> . sign UNSIGNED_NUMBER
    (143) constant -> . STRING_LITERAL
    (144) constant -> . constant_identifier
    (145) UNSIGNED_NUMBER -> . INTEGER_CONST
    (146) UNSIGNED_NUMBER -> . REAL_CONST
    (147) sign -> . PLUS
    (148) sign -> . MINUS
    (149) constant_identifier -> . ID

    STRING_LITERAL  shift and go to state 115
    INTEGER_CONST   shift and go to state 121
    REAL_CONST      shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    ID              shift and go to state 127

    case_label                     shift and go to state 275
    constant                       shift and go to state 227
    UNSIGNED_NUMBER                shift and go to state 113
    sign                           shift and go to state 114
    constant_identifier            shift and go to state 116

state 260

    (57) array_type -> ARRAY LBRACKET index_type RBRACKET . OF type

    OF              shift and go to state 276


state 261

    (61) field_list -> field_list field_declaration SEMICOLON .

    ID              reduce using rule 61 (field_list -> field_list field_declaration SEMICOLON .)
    END             reduce using rule 61 (field_list -> field_list field_declaration SEMICOLON .)


state 262

    (63) field_declaration -> id_list COLON type .

    SEMICOLON       reduce using rule 63 (field_declaration -> id_list COLON type .)


state 263

    (48) class_variable_declaration -> ID COLON type . SEMICOLON

    SEMICOLON       shift and go to state 277


state 264

    (49) constructor_declaration -> CONSTRUCTOR ID formal_parameter_list_opt . SEMICOLON

    SEMICOLON       shift and go to state 278


state 265

    (50) class_function_declaration -> FUNCTION ID formal_parameter_list_opt . COLON type SEMICOLON

    COLON           shift and go to state 279


state 266

    (53) class_procedure_declaration -> PROCEDURE ID formal_parameter_list_opt . SEMICOLON

    SEMICOLON       shift and go to state 280


state 267

    (51) function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 281


state 268

    (96) else_part -> ELSE statement .

    ELSE            reduce using rule 96 (else_part -> ELSE statement .)
    END             reduce using rule 96 (else_part -> ELSE statement .)
    SEMICOLON       reduce using rule 96 (else_part -> ELSE statement .)
    UNTIL           reduce using rule 96 (else_part -> ELSE statement .)
    STRING_LITERAL  reduce using rule 96 (else_part -> ELSE statement .)
    INTEGER_CONST   reduce using rule 96 (else_part -> ELSE statement .)
    REAL_CONST      reduce using rule 96 (else_part -> ELSE statement .)
    PLUS            reduce using rule 96 (else_part -> ELSE statement .)
    MINUS           reduce using rule 96 (else_part -> ELSE statement .)
    ID              reduce using rule 96 (else_part -> ELSE statement .)


state 269

    (100) for_statement -> FOR ID ASSIGN expression TO expression . DO statement
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    DO              shift and go to state 282
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    XOR             shift and go to state 158


state 270

    (101) for_statement -> FOR ID ASSIGN expression DOWNTO expression . DO statement
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . TIMES expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . DIVIDE_INT expression
    (119) expression -> expression . MODULO expression
    (120) expression -> expression . SHL expression
    (121) expression -> expression . SHR expression
    (122) expression -> expression . EQUAL expression
    (123) expression -> expression . NEQUAL expression
    (124) expression -> expression . LT expression
    (125) expression -> expression . GT expression
    (126) expression -> expression . LE expression
    (127) expression -> expression . GE expression
    (128) expression -> expression . AND expression
    (129) expression -> expression . OR expression
    (130) expression -> expression . XOR expression

    DO              shift and go to state 283
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    TIMES           shift and go to state 144
    DIVIDE          shift and go to state 145
    DIVIDE_INT      shift and go to state 146
    MODULO          shift and go to state 147
    SHL             shift and go to state 148
    SHR             shift and go to state 149
    EQUAL           shift and go to state 150
    NEQUAL          shift and go to state 151
    LT              shift and go to state 152
    GT              shift and go to state 153
    LE              shift and go to state 154
    GE              shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    XOR             shift and go to state 158


state 271

    (102) case_statement -> CASE expression OF case_element_list else_clause_optional END .

    END             reduce using rule 102 (case_statement -> CASE expression OF case_element_list else_clause_optional END .)
    SEMICOLON       reduce using rule 102 (case_statement -> CASE expression OF case_element_list else_clause_optional END .)
    UNTIL           reduce using rule 102 (case_statement -> CASE expression OF case_element_list else_clause_optional END .)
    ELSE            reduce using rule 102 (case_statement -> CASE expression OF case_element_list else_clause_optional END .)
    STRING_LITERAL  reduce using rule 102 (case_statement -> CASE expression OF case_element_list else_clause_optional END .)
    INTEGER_CONST   reduce using rule 102 (case_statement -> CASE expression OF case_element_list else_clause_optional END .)
    REAL_CONST      reduce using rule 102 (case_statement -> CASE expression OF case_element_list else_clause_optional END .)
    PLUS            reduce using rule 102 (case_statement -> CASE expression OF case_element_list else_clause_optional END .)
    MINUS           reduce using rule 102 (case_statement -> CASE expression OF case_element_list else_clause_optional END .)
    ID              reduce using rule 102 (case_statement -> CASE expression OF case_element_list else_clause_optional END .)


state 272

    (103) case_element_list -> case_element_list semicolon_optional case_element .

    SEMICOLON       reduce using rule 103 (case_element_list -> case_element_list semicolon_optional case_element .)
    END             reduce using rule 103 (case_element_list -> case_element_list semicolon_optional case_element .)
    ELSE            reduce using rule 103 (case_element_list -> case_element_list semicolon_optional case_element .)
    STRING_LITERAL  reduce using rule 103 (case_element_list -> case_element_list semicolon_optional case_element .)
    INTEGER_CONST   reduce using rule 103 (case_element_list -> case_element_list semicolon_optional case_element .)
    REAL_CONST      reduce using rule 103 (case_element_list -> case_element_list semicolon_optional case_element .)
    PLUS            reduce using rule 103 (case_element_list -> case_element_list semicolon_optional case_element .)
    MINUS           reduce using rule 103 (case_element_list -> case_element_list semicolon_optional case_element .)
    ID              reduce using rule 103 (case_element_list -> case_element_list semicolon_optional case_element .)


state 273

    (109) else_clause_optional -> semicolon_optional ELSE . statement semicolon_optional
    (73) statement -> . simple_statement
    (74) statement -> . structured_statement
    (75) simple_statement -> . assignment_statement
    (76) simple_statement -> . procedure_call_statement
    (77) simple_statement -> . empty
    (88) structured_statement -> . compound_statement
    (89) structured_statement -> . if_statement
    (90) structured_statement -> . while_statement
    (91) structured_statement -> . repeat_statement
    (92) structured_statement -> . for_statement
    (93) structured_statement -> . case_statement
    (94) structured_statement -> . record_assignment
    (78) assignment_statement -> . variable ASSIGN expression
    (84) procedure_call_statement -> . procedure_call
    (150) empty -> .
    (70) compound_statement -> . BEGIN statement_list END
    (95) if_statement -> . IF expression THEN statement else_part
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_list UNTIL expression
    (100) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (101) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (102) case_statement -> . CASE expression OF case_element_list else_clause_optional END
    (113) record_assignment -> . ID DOT ID ASSIGN expression
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET
    (85) procedure_call -> . ID LPAREN args_optional RPAREN

    SEMICOLON       reduce using rule 150 (empty -> .)
    END             reduce using rule 150 (empty -> .)
    BEGIN           shift and go to state 28
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    REPEAT          shift and go to state 62
    FOR             shift and go to state 63
    CASE            shift and go to state 65
    ID              shift and go to state 64

    statement                      shift and go to state 284
    simple_statement               shift and go to state 46
    structured_statement           shift and go to state 47
    assignment_statement           shift and go to state 48
    procedure_call_statement       shift and go to state 49
    empty                          shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    while_statement                shift and go to state 53
    repeat_statement               shift and go to state 54
    for_statement                  shift and go to state 55
    case_statement                 shift and go to state 56
    record_assignment              shift and go to state 57
    variable                       shift and go to state 58
    procedure_call                 shift and go to state 59

state 274

    (105) case_element -> case_label_list COLON statement .

    SEMICOLON       reduce using rule 105 (case_element -> case_label_list COLON statement .)
    END             reduce using rule 105 (case_element -> case_label_list COLON statement .)
    ELSE            reduce using rule 105 (case_element -> case_label_list COLON statement .)
    STRING_LITERAL  reduce using rule 105 (case_element -> case_label_list COLON statement .)
    INTEGER_CONST   reduce using rule 105 (case_element -> case_label_list COLON statement .)
    REAL_CONST      reduce using rule 105 (case_element -> case_label_list COLON statement .)
    PLUS            reduce using rule 105 (case_element -> case_label_list COLON statement .)
    MINUS           reduce using rule 105 (case_element -> case_label_list COLON statement .)
    ID              reduce using rule 105 (case_element -> case_label_list COLON statement .)


state 275

    (106) case_label_list -> case_label_list COMMA case_label .

    COLON           reduce using rule 106 (case_label_list -> case_label_list COMMA case_label .)
    COMMA           reduce using rule 106 (case_label_list -> case_label_list COMMA case_label .)


state 276

    (57) array_type -> ARRAY LBRACKET index_type RBRACKET OF . type
    (36) type -> . simple_type
    (37) type -> . array_type
    (38) type -> . record_type
    (39) type -> . class_type
    (54) simple_type -> . subrange_type
    (55) simple_type -> . type_identifier
    (57) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (59) record_type -> . RECORD record_fields END
    (40) class_type -> . CLASS class_body END
    (56) subrange_type -> . constant DOTDOT constant
    (64) type_identifier -> . ID
    (65) type_identifier -> . predefined_type
    (141) constant -> . UNSIGNED_NUMBER
    (142) constant -> . sign UNSIGNED_NUMBER
    (143) constant -> . STRING_LITERAL
    (144) constant -> . constant_identifier
    (66) predefined_type -> . INTEGER
    (67) predefined_type -> . REAL
    (68) predefined_type -> . BOOLEAN
    (69) predefined_type -> . STRING
    (145) UNSIGNED_NUMBER -> . INTEGER_CONST
    (146) UNSIGNED_NUMBER -> . REAL_CONST
    (147) sign -> . PLUS
    (148) sign -> . MINUS
    (149) constant_identifier -> . ID

    ARRAY           shift and go to state 107
    RECORD          shift and go to state 108
    CLASS           shift and go to state 109
    ID              shift and go to state 111
    STRING_LITERAL  shift and go to state 115
    INTEGER         shift and go to state 117
    REAL            shift and go to state 118
    BOOLEAN         shift and go to state 119
    STRING          shift and go to state 120
    INTEGER_CONST   shift and go to state 121
    REAL_CONST      shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124

    type                           shift and go to state 285
    simple_type                    shift and go to state 101
    array_type                     shift and go to state 102
    record_type                    shift and go to state 103
    class_type                     shift and go to state 104
    subrange_type                  shift and go to state 105
    type_identifier                shift and go to state 106
    constant                       shift and go to state 110
    predefined_type                shift and go to state 112
    UNSIGNED_NUMBER                shift and go to state 113
    sign                           shift and go to state 114
    constant_identifier            shift and go to state 116

state 277

    (48) class_variable_declaration -> ID COLON type SEMICOLON .

    ID              reduce using rule 48 (class_variable_declaration -> ID COLON type SEMICOLON .)
    CONSTRUCTOR     reduce using rule 48 (class_variable_declaration -> ID COLON type SEMICOLON .)
    FUNCTION        reduce using rule 48 (class_variable_declaration -> ID COLON type SEMICOLON .)
    PROCEDURE       reduce using rule 48 (class_variable_declaration -> ID COLON type SEMICOLON .)
    END             reduce using rule 48 (class_variable_declaration -> ID COLON type SEMICOLON .)


state 278

    (49) constructor_declaration -> CONSTRUCTOR ID formal_parameter_list_opt SEMICOLON .

    ID              reduce using rule 49 (constructor_declaration -> CONSTRUCTOR ID formal_parameter_list_opt SEMICOLON .)
    CONSTRUCTOR     reduce using rule 49 (constructor_declaration -> CONSTRUCTOR ID formal_parameter_list_opt SEMICOLON .)
    FUNCTION        reduce using rule 49 (constructor_declaration -> CONSTRUCTOR ID formal_parameter_list_opt SEMICOLON .)
    PROCEDURE       reduce using rule 49 (constructor_declaration -> CONSTRUCTOR ID formal_parameter_list_opt SEMICOLON .)
    END             reduce using rule 49 (constructor_declaration -> CONSTRUCTOR ID formal_parameter_list_opt SEMICOLON .)


state 279

    (50) class_function_declaration -> FUNCTION ID formal_parameter_list_opt COLON . type SEMICOLON
    (36) type -> . simple_type
    (37) type -> . array_type
    (38) type -> . record_type
    (39) type -> . class_type
    (54) simple_type -> . subrange_type
    (55) simple_type -> . type_identifier
    (57) array_type -> . ARRAY LBRACKET index_type RBRACKET OF type
    (59) record_type -> . RECORD record_fields END
    (40) class_type -> . CLASS class_body END
    (56) subrange_type -> . constant DOTDOT constant
    (64) type_identifier -> . ID
    (65) type_identifier -> . predefined_type
    (141) constant -> . UNSIGNED_NUMBER
    (142) constant -> . sign UNSIGNED_NUMBER
    (143) constant -> . STRING_LITERAL
    (144) constant -> . constant_identifier
    (66) predefined_type -> . INTEGER
    (67) predefined_type -> . REAL
    (68) predefined_type -> . BOOLEAN
    (69) predefined_type -> . STRING
    (145) UNSIGNED_NUMBER -> . INTEGER_CONST
    (146) UNSIGNED_NUMBER -> . REAL_CONST
    (147) sign -> . PLUS
    (148) sign -> . MINUS
    (149) constant_identifier -> . ID

    ARRAY           shift and go to state 107
    RECORD          shift and go to state 108
    CLASS           shift and go to state 109
    ID              shift and go to state 111
    STRING_LITERAL  shift and go to state 115
    INTEGER         shift and go to state 117
    REAL            shift and go to state 118
    BOOLEAN         shift and go to state 119
    STRING          shift and go to state 120
    INTEGER_CONST   shift and go to state 121
    REAL_CONST      shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124

    type                           shift and go to state 286
    simple_type                    shift and go to state 101
    array_type                     shift and go to state 102
    record_type                    shift and go to state 103
    class_type                     shift and go to state 104
    subrange_type                  shift and go to state 105
    type_identifier                shift and go to state 106
    constant                       shift and go to state 110
    predefined_type                shift and go to state 112
    UNSIGNED_NUMBER                shift and go to state 113
    sign                           shift and go to state 114
    constant_identifier            shift and go to state 116

state 280

    (53) class_procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON .

    ID              reduce using rule 53 (class_procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON .)
    CONSTRUCTOR     reduce using rule 53 (class_procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON .)
    FUNCTION        reduce using rule 53 (class_procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON .)
    PROCEDURE       reduce using rule 53 (class_procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON .)
    END             reduce using rule 53 (class_procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON .)


state 281

    (51) function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON .

    VAR             reduce using rule 51 (function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON .)
    CONST           reduce using rule 51 (function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON .)
    TYPE            reduce using rule 51 (function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 51 (function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 51 (function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON .)
    BEGIN           reduce using rule 51 (function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON .)


state 282

    (100) for_statement -> FOR ID ASSIGN expression TO expression DO . statement
    (73) statement -> . simple_statement
    (74) statement -> . structured_statement
    (75) simple_statement -> . assignment_statement
    (76) simple_statement -> . procedure_call_statement
    (77) simple_statement -> . empty
    (88) structured_statement -> . compound_statement
    (89) structured_statement -> . if_statement
    (90) structured_statement -> . while_statement
    (91) structured_statement -> . repeat_statement
    (92) structured_statement -> . for_statement
    (93) structured_statement -> . case_statement
    (94) structured_statement -> . record_assignment
    (78) assignment_statement -> . variable ASSIGN expression
    (84) procedure_call_statement -> . procedure_call
    (150) empty -> .
    (70) compound_statement -> . BEGIN statement_list END
    (95) if_statement -> . IF expression THEN statement else_part
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_list UNTIL expression
    (100) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (101) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (102) case_statement -> . CASE expression OF case_element_list else_clause_optional END
    (113) record_assignment -> . ID DOT ID ASSIGN expression
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET
    (85) procedure_call -> . ID LPAREN args_optional RPAREN

  ! shift/reduce conflict for ID resolved as shift
    ELSE            reduce using rule 150 (empty -> .)
    END             reduce using rule 150 (empty -> .)
    SEMICOLON       reduce using rule 150 (empty -> .)
    UNTIL           reduce using rule 150 (empty -> .)
    STRING_LITERAL  reduce using rule 150 (empty -> .)
    INTEGER_CONST   reduce using rule 150 (empty -> .)
    REAL_CONST      reduce using rule 150 (empty -> .)
    PLUS            reduce using rule 150 (empty -> .)
    MINUS           reduce using rule 150 (empty -> .)
    BEGIN           shift and go to state 28
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    REPEAT          shift and go to state 62
    FOR             shift and go to state 63
    CASE            shift and go to state 65
    ID              shift and go to state 64

  ! ID              [ reduce using rule 150 (empty -> .) ]

    statement                      shift and go to state 287
    simple_statement               shift and go to state 46
    structured_statement           shift and go to state 47
    assignment_statement           shift and go to state 48
    procedure_call_statement       shift and go to state 49
    empty                          shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    while_statement                shift and go to state 53
    repeat_statement               shift and go to state 54
    for_statement                  shift and go to state 55
    case_statement                 shift and go to state 56
    record_assignment              shift and go to state 57
    variable                       shift and go to state 58
    procedure_call                 shift and go to state 59

state 283

    (101) for_statement -> FOR ID ASSIGN expression DOWNTO expression DO . statement
    (73) statement -> . simple_statement
    (74) statement -> . structured_statement
    (75) simple_statement -> . assignment_statement
    (76) simple_statement -> . procedure_call_statement
    (77) simple_statement -> . empty
    (88) structured_statement -> . compound_statement
    (89) structured_statement -> . if_statement
    (90) structured_statement -> . while_statement
    (91) structured_statement -> . repeat_statement
    (92) structured_statement -> . for_statement
    (93) structured_statement -> . case_statement
    (94) structured_statement -> . record_assignment
    (78) assignment_statement -> . variable ASSIGN expression
    (84) procedure_call_statement -> . procedure_call
    (150) empty -> .
    (70) compound_statement -> . BEGIN statement_list END
    (95) if_statement -> . IF expression THEN statement else_part
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_list UNTIL expression
    (100) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (101) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (102) case_statement -> . CASE expression OF case_element_list else_clause_optional END
    (113) record_assignment -> . ID DOT ID ASSIGN expression
    (79) variable -> . ID
    (80) variable -> . variable DOT ID
    (81) variable -> . variable LBRACKET expression_list RBRACKET
    (85) procedure_call -> . ID LPAREN args_optional RPAREN

  ! shift/reduce conflict for ID resolved as shift
    ELSE            reduce using rule 150 (empty -> .)
    END             reduce using rule 150 (empty -> .)
    SEMICOLON       reduce using rule 150 (empty -> .)
    UNTIL           reduce using rule 150 (empty -> .)
    STRING_LITERAL  reduce using rule 150 (empty -> .)
    INTEGER_CONST   reduce using rule 150 (empty -> .)
    REAL_CONST      reduce using rule 150 (empty -> .)
    PLUS            reduce using rule 150 (empty -> .)
    MINUS           reduce using rule 150 (empty -> .)
    BEGIN           shift and go to state 28
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    REPEAT          shift and go to state 62
    FOR             shift and go to state 63
    CASE            shift and go to state 65
    ID              shift and go to state 64

  ! ID              [ reduce using rule 150 (empty -> .) ]

    statement                      shift and go to state 288
    simple_statement               shift and go to state 46
    structured_statement           shift and go to state 47
    assignment_statement           shift and go to state 48
    procedure_call_statement       shift and go to state 49
    empty                          shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    while_statement                shift and go to state 53
    repeat_statement               shift and go to state 54
    for_statement                  shift and go to state 55
    case_statement                 shift and go to state 56
    record_assignment              shift and go to state 57
    variable                       shift and go to state 58
    procedure_call                 shift and go to state 59

state 284

    (109) else_clause_optional -> semicolon_optional ELSE statement . semicolon_optional
    (111) semicolon_optional -> . SEMICOLON
    (112) semicolon_optional -> . empty
    (150) empty -> .

    SEMICOLON       shift and go to state 257
    END             reduce using rule 150 (empty -> .)

    semicolon_optional             shift and go to state 289
    empty                          shift and go to state 290

state 285

    (57) array_type -> ARRAY LBRACKET index_type RBRACKET OF type .

    SEMICOLON       reduce using rule 57 (array_type -> ARRAY LBRACKET index_type RBRACKET OF type .)
    RPAREN          reduce using rule 57 (array_type -> ARRAY LBRACKET index_type RBRACKET OF type .)


state 286

    (50) class_function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type . SEMICOLON

    SEMICOLON       shift and go to state 291


state 287

    (100) for_statement -> FOR ID ASSIGN expression TO expression DO statement .

    END             reduce using rule 100 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    SEMICOLON       reduce using rule 100 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    UNTIL           reduce using rule 100 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 100 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    STRING_LITERAL  reduce using rule 100 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    INTEGER_CONST   reduce using rule 100 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    REAL_CONST      reduce using rule 100 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    PLUS            reduce using rule 100 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    MINUS           reduce using rule 100 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ID              reduce using rule 100 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)


state 288

    (101) for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .

    END             reduce using rule 101 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    SEMICOLON       reduce using rule 101 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    UNTIL           reduce using rule 101 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 101 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    STRING_LITERAL  reduce using rule 101 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    INTEGER_CONST   reduce using rule 101 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    REAL_CONST      reduce using rule 101 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    PLUS            reduce using rule 101 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    MINUS           reduce using rule 101 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    ID              reduce using rule 101 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)


state 289

    (109) else_clause_optional -> semicolon_optional ELSE statement semicolon_optional .

    END             reduce using rule 109 (else_clause_optional -> semicolon_optional ELSE statement semicolon_optional .)


state 290

    (112) semicolon_optional -> empty .

    END             reduce using rule 112 (semicolon_optional -> empty .)


state 291

    (50) class_function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON .

    ID              reduce using rule 50 (class_function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON .)
    CONSTRUCTOR     reduce using rule 50 (class_function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON .)
    FUNCTION        reduce using rule 50 (class_function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON .)
    PROCEDURE       reduce using rule 50 (class_function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON .)
    END             reduce using rule 50 (class_function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 64 resolved as shift
WARNING: shift/reduce conflict for ID in state 141 resolved as shift
WARNING: shift/reduce conflict for ID in state 162 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 197 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 218 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 218 resolved as shift
WARNING: shift/reduce conflict for ID in state 247 resolved as shift
WARNING: shift/reduce conflict for ID in state 258 resolved as shift
WARNING: shift/reduce conflict for ID in state 282 resolved as shift
WARNING: shift/reduce conflict for ID in state 283 resolved as shift
